
using SPEQTAGST.BAL;
using SPEQTAGST.BAL.M264r1;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using SPEQTAGST.BAL.M112t;
using Excel = Microsoft.Office.Interop.Excel;
using System.Reflection;
using Newtonsoft.Json;
using System.Diagnostics;
using System.Web.Script.Serialization;
using SPEQTAGST.BAL.M956r2;
using SPEQTAGST.BAL.GSTR1;
using System.Data.OleDb;
using SPEQTAGST.BAL.V019js;
using SPEQTAGST.Usermain;
using SPQ.Helper;
using System.Net;
using SPQ.Automation;
using SPEQTAGST.BAL.M363r1a;
using SPEQTAGST.rintlcs3b;
using Proactive.CustomTools.CustomDataGridView;
//using Proactive.CustomTools.CustomDataGridView;


namespace SPEQTAGST.xasjbr1
{
    public partial class SPQGSTR1Dashboard : Form
    {
        r1Publicclass objGSTR5 = new r1Publicclass();
        r1aPublicclass objGSTR1A = new r1aPublicclass();

        #region Declaration imp of excel
        DataTable dtGT;
        DataTable dtLT;

        #endregion

        private HttpWebResponse response;
        AssesseeDetail assesseeModel;
        CookieContainer Cc = new CookieContainer();
        private string gstr1json;

        private string DashboardPage
        {
            get
            {
                return "https://services.gst.gov.in/services/auth/fowelcome";
            }
            set
            {
            }
        }
        public string getError
        {
            get;
            set;
        }
        private string GstLoginPage
        {
            get
            {
                return "https://services.gst.gov.in/services/login";
            }
            set
            {
            }
        }
        private string SubmitPage
        {
            get
            {
                return "https://services.gst.gov.in/services/authenticate";
            }
            set
            {
            }
        }

        public SPQGSTR1Dashboard()
        {
            InitializeComponent();

            lblheader.Text = "GSTR-1 Return || "+ CommonHelper.SelectedYear;

            Getdata();
            GetdataAmendment();
            //GetReportData();
            GetGSTR1VsGSTR3B();
            GetMessage();
            GetFilingStatusMsg();
            //tabControl1.TabPages.Remove(tabControl1.TabPages[1]);
            ((SPQMDI)Application.OpenForms["SPQMDI"]).SetReturnName(CommonHelper.ReturnName);

            ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();

            dgvMain.ColumnHeadersDefaultCellStyle.BackColor = Color.Navy;
            dgvMain.EnableHeadersVisualStyles = false;
            dgvMain.ColumnHeadersDefaultCellStyle.Font = new Font("Verdana", 8, FontStyle.Bold);
            dgvMain.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;

            dgvGSTR1Amendment.ColumnHeadersDefaultCellStyle.BackColor = Color.Navy;
            dgvGSTR1Amendment.EnableHeadersVisualStyles = false;
            dgvGSTR1Amendment.ColumnHeadersDefaultCellStyle.Font = new Font("Verdana", 8, FontStyle.Bold);
            dgvGSTR1Amendment.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;

            dgvReport.ColumnHeadersDefaultCellStyle.BackColor = Color.Navy;
            dgvReport.EnableHeadersVisualStyles = false;
            dgvReport.ColumnHeadersDefaultCellStyle.Font = new Font("Verdana", 8, FontStyle.Bold);
            dgvReport.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;

            grdGSTR1vsGSTR3B.ColumnHeadersDefaultCellStyle.BackColor = Color.Navy;
            grdGSTR1vsGSTR3B.EnableHeadersVisualStyles = false;
            grdGSTR1vsGSTR3B.ColumnHeadersDefaultCellStyle.Font = new Font("Verdana", 8, FontStyle.Bold);
            grdGSTR1vsGSTR3B.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;

            //  ***** To Hide GSTR-1 Amendment Tab
            tabGSTR1Amendment.Hide();
            tabControl1.TabPages.Remove(tabGSTR1Amendment);
           // tabControl1.TabPages[1].Hide();
           
        }
        
        public void Getdata()
        {
            try
            {
                DataTable dt1 = new DataTable();
                DataTable dt = new DataTable();

                dt1.Columns.Add("Type of Invoices", typeof(string));
                dt1.Columns.Add("Status", typeof(string));
                dt1.Columns.Add("NOofInv", typeof(string));
                dt1.Columns.Add("InvTaxVal", typeof(string));
                dt1.Columns.Add("IGST", typeof(string));
                dt1.Columns.Add("CGST", typeof(string));
                dt1.Columns.Add("SGST", typeof(string));
                dt1.Columns.Add("Cess", typeof(string));
                dt1.Columns.Add("Total Tax", typeof(string));

                #region  B2B
                string Query = "Select * from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CessAmount"] != null && Convert.ToString(dt.Rows[0]["Fld_CessAmount"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                    }

                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("B2B Invoices     [Table No.4]", strStatus, dt.Rows[0]["Fld_InvoiceNo"].ToString(), dt.Rows[0]["Fld_InvoiceTaxableVal"].ToString(), dt.Rows[0]["Fld_IGSTAmnt"].ToString(), dt.Rows[0]["Fld_CGSTAmnt"].ToString(), dt.Rows[0]["Fld_SGSTAmnt"].ToString(), dt.Rows[0]["Fld_CessAmount"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("B2B Invoices     [Table No.4]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region B2CL
                Query = "Select * from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGST"] != null && Convert.ToString(dt.Rows[0]["Fld_IGST"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGST"]);
                    }
                    if (dt.Rows[0]["Fld_CESS"] != null && Convert.ToString(dt.Rows[0]["Fld_CESS"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESS"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" :  "Pending";
                    dt1.Rows.Add("B2C Large Invoices     [Table No.5]", strStatus, dt.Rows[0]["Fld_InvoiceNo"].ToString(), dt.Rows[0]["Fld_TaxableValue"].ToString(), dt.Rows[0]["Fld_IGST"].ToString(), "0", "0", dt.Rows[0]["Fld_CESS"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("B2C Large Invoices     [Table No.5]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region B2CS
                Query = "Select * from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {

                    Int32 _Count = 0;
                    string _Query = "Select * from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id;";
                    DataTable dtCount = new DataTable();
                    dtCount = objGSTR5.GetDataGSTR1(_Query);
                    if (dtCount != null && dtCount.Rows.Count > 0)
                    {
                        _Count = dtCount.Rows.Count - 1;
                    }

                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGST"] != null && Convert.ToString(dt.Rows[0]["Fld_IGST"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGST"]);
                    }
                    if (dt.Rows[0]["Fld_CGST"] != null && Convert.ToString(dt.Rows[0]["Fld_CGST"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGST"]);
                    }
                    if (dt.Rows[0]["Fld_SGST"] != null && Convert.ToString(dt.Rows[0]["Fld_SGST"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGST"]);
                    }
                    if (dt.Rows[0]["Fld_CESS"] != null && Convert.ToString(dt.Rows[0]["Fld_CESS"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESS"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("B2C Small Invoices     [Table No.7]", strStatus, dt.Rows[0]["Fld_Rate"].ToString(), dt.Rows[0]["Fld_TaxableValue"].ToString(), dt.Rows[0]["Fld_IGST"].ToString(), dt.Rows[0]["Fld_CGST"].ToString(), dt.Rows[0]["Fld_SGST"].ToString(), dt.Rows[0]["Fld_CESS"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("B2C Small Invoices     [Table No.7]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Zero rated supplies
                Query = "Select * from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'  order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0)
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CESS"] != null && Convert.ToString(dt.Rows[0]["Fld_CESS"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESS"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("Zero rated supplies     [Table No.6A]", strStatus, dt.Rows[0]["Fld_InvoiceNo"].ToString(), dt.Rows[0]["Fld_IGSTInvoiceTaxableVal"].ToString(), dt.Rows[0]["Fld_IGSTAmnt"].ToString(), "", "", dt.Rows[0]["Fld_CESS"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("Zero rated supplies     [Table No.6A]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Credit/Debit Note
                Query = "Select * from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);

                if (dt != null && dt.Rows.Count > 1)
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CessAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_CessAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmnt"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("Credit/Debit Note     [Table No.9B]", strStatus, dt.Rows[0]["Fld_DbtCrdtNoteNo"].ToString(), dt.Rows[0]["Fld_Taxable"].ToString(), dt.Rows[0]["Fld_IGSTAmnt"].ToString(), dt.Rows[0]["Fld_CGSTAmnt"].ToString(), dt.Rows[0]["Fld_SGSTAmnt"].ToString(), dt.Rows[0]["Fld_CessAmnt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("Credit/Debit Note     [Table No.9B]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region CDN UR
                Query = "Select * from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CessAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_CessAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmnt"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("Credit Note/Debit Note and Refund Voucher to unregister person     [Table No.9B]", strStatus, dt.Rows[0]["Fld_OrgInvoiceNo"].ToString(), dt.Rows[0]["Fld_Taxable"].ToString(), dt.Rows[0]["Fld_IGSTAmnt"].ToString(), dt.Rows[0]["Fld_CGSTAmnt"].ToString(), dt.Rows[0]["Fld_SGSTAmnt"].ToString(), dt.Rows[0]["Fld_CessAmnt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("Credit Note/Debit Note and Refund Voucher to unregister person     [Table No.9B]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Nil Rated
                Query = "Select * from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";

                //Query = " SELECT  sum(replace(ifnull(Fld_NilRatedSupply,0.00),',','')) + sum(replace(ifnull(Fld_Exempted,0.00),',','')) + sum(replace(ifnull(Fld_NonGSTSupplies,0.00),',','')) as NILRated " +
                //       " FROM SPQR1NilRated WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' and Fld_Month='" + CommonHelper.SelectedMonth + "' group by Fld_Month ";


                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                decimal Fld_TaxTurn_1 = 0;
                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Fld_NilRatedSupply"].ToString().Trim() != "")
                            Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[i]["Fld_NilRatedSupply"]);
                        if (dt.Rows[i]["Fld_Exempted"].ToString().Trim() != "")
                            Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[i]["Fld_Exempted"]);
                        if (dt.Rows[i]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                            Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[i]["Fld_NonGSTSupplies"]);
                    }
                }
                
                if (Fld_TaxTurn_1 != 0)
                {
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("Nil rated, exempted and non GST outward supplies     [Table No.8]", strStatus, "1", Fld_TaxTurn_1.ToString("N2"), "0", "0", "0", "0", "0");
                }
                else
                {
                    dt1.Rows.Add("Nil rated, exempted and non GST outward supplies     [Table No.8]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Form Gross Advance
                Query = "Select * from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CessAmount"] != null && Convert.ToString(dt.Rows[0]["Fld_CessAmount"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("Advance Received     [Table No.11A]", strStatus, dt.Rows[0]["Fld_POS"].ToString(), dt.Rows[0]["Fld_GrossAdvRcv"].ToString(), dt.Rows[0]["Fld_IGSTAmnt"].ToString(), dt.Rows[0]["Fld_CGSTAmnt"].ToString(), dt.Rows[0]["Fld_SGSTAmnt"].ToString(), dt.Rows[0]["Fld_CessAmount"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("Advance Received     [Table No.11A]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Form Net Advance
                Query = "Select * from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmnt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmnt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                    }
                    if (dt.Rows[0]["Fld_CessAmount"] != null && Convert.ToString(dt.Rows[0]["Fld_CessAmount"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("Advance Adjusted     [Table No.11B]", strStatus, dt.Rows[0]["Fld_POS"].ToString(), dt.Rows[0]["Fld_Advadj"].ToString(), dt.Rows[0]["Fld_IGSTAmnt"].ToString(), dt.Rows[0]["Fld_CGSTAmnt"].ToString(), dt.Rows[0]["Fld_SGSTAmnt"].ToString(), dt.Rows[0]["Fld_CessAmount"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("Advance Adjusted     [Table No.11B]", "-", "0", "0", "0", "0", "0", "0", "0");
                }

                #endregion

                #region Total                
                if (dt1 != null && dt1.Rows.Count > 1)
                {
                    Decimal TaxableValue = 0;
                    Decimal IGST = 0;
                    Decimal CGST = 0;
                    Decimal SGST = 0;
                    Decimal Cess = 0;
                    Decimal Tax = 0;

                    for (int i = 0; i < dt1.Rows.Count; i++)
                    {
                        if(i == 4 || i == 5 || i == 8)
                        {
                            if(dt1.Rows[i]["InvTaxVal"] != null && Convert.ToDecimal(dt1.Rows[i]["InvTaxVal"]) > 0)
                                TaxableValue = TaxableValue - Convert.ToDecimal(dt1.Rows[i]["InvTaxVal"]);
                            else
                                TaxableValue = TaxableValue + Convert.ToDecimal(dt1.Rows[i]["InvTaxVal"]);

                            if (dt1.Rows[i]["IGST"] != null && Convert.ToDecimal(dt1.Rows[i]["IGST"]) > 0)
                                IGST = IGST - Convert.ToDecimal(dt1.Rows[i]["IGST"]);
                            else
                                IGST = IGST + Convert.ToDecimal(dt1.Rows[i]["IGST"]);

                            if (dt1.Rows[i]["CGST"] != null && Convert.ToDecimal(dt1.Rows[i]["CGST"]) > 0)
                                CGST = CGST - Convert.ToDecimal(dt1.Rows[i]["CGST"]);
                            else
                                CGST = CGST + Convert.ToDecimal(dt1.Rows[i]["CGST"]);

                            if (dt1.Rows[i]["SGST"] != null && Convert.ToDecimal(dt1.Rows[i]["SGST"]) > 0)
                                SGST = SGST - Convert.ToDecimal(dt1.Rows[i]["SGST"]);
                            else
                                SGST = SGST + Convert.ToDecimal(dt1.Rows[i]["SGST"]);

                            if (dt1.Rows[i]["Cess"] != null && Convert.ToDecimal(dt1.Rows[i]["Cess"]) > 0)
                                Cess = Cess - Convert.ToDecimal(dt1.Rows[i]["Cess"]);
                            else
                                Cess = Cess + Convert.ToDecimal(dt1.Rows[i]["Cess"]);

                            if (dt1.Rows[i]["Total Tax"] != null && Convert.ToDecimal(dt1.Rows[i]["Total Tax"]) > 0)
                                Tax = Tax - Convert.ToDecimal(dt1.Rows[i]["Total Tax"]);
                            else
                                Tax = Tax + Convert.ToDecimal(dt1.Rows[i]["Total Tax"]);                            
                        }
                        else
                        {
                            string value = dt1.Rows[i]["CGST"].ToString();// Convert.ToString(dt1.Rows[i]["CGST"]);

                            TaxableValue = TaxableValue + Convert.ToDecimal(dt1.Rows[i]["InvTaxVal"]);
                            IGST = IGST + Convert.ToDecimal(Convert.ToString(dt1.Rows[i]["IGST"]) == "" ? 0 : dt1.Rows[i]["IGST"]);
                            CGST = CGST + Convert.ToDecimal( Convert.ToString(dt1.Rows[i]["CGST"]) == "" ? 0 : dt1.Rows[i]["CGST"]);
                            SGST = SGST + Convert.ToDecimal(Convert.ToString(dt1.Rows[i]["SGST"]) == "" ? 0 : dt1.Rows[i]["SGST"]);
                            Cess = Cess + Convert.ToDecimal(Convert.ToString(dt1.Rows[i]["Cess"]) == "" ? 0 : dt1.Rows[i]["Cess"]);
                            Tax = Tax + Convert.ToDecimal(Convert.ToString(dt1.Rows[i]["Total Tax"]) == "" ? 0 : dt1.Rows[i]["Total Tax"]);
                        }                                               
                    }

                    dt1.Rows.Add("Total [B2B+B2CL+B2CS+Zero Rated +Nil / Exmepted + Advance Received-CDNR-CDNUR-Advance Adjusted]", "-", "-", Utility.Round(Convert.ToString(TaxableValue)), Utility.Round(Convert.ToString(IGST)), Utility.Round(Convert.ToString(CGST)), Utility.Round(Convert.ToString(SGST)), Utility.Round(Convert.ToString(Cess)), Utility.Round(Convert.ToString(Tax)));
                }
                else
                {
                    dt1.Rows.Add("Total", "-", "-", "0", "0", "0", "0", "0", "0");
                }

                #endregion

                #region HSN Summary
                Query = "Select * from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    Int32 _Count = 0;
                    string _Query = "Select * from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id;";
                    DataTable dtCount = new DataTable();
                    dtCount = objGSTR5.GetDataGSTR1(_Query);
                    if (dtCount != null && dtCount.Rows.Count > 0)
                    {
                        _Count = dtCount.Rows.Count - 1;
                    }

                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGST"] != null && Convert.ToString(dt.Rows[0]["Fld_IGST"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGST"]);
                    }
                    if (dt.Rows[0]["Fld_CGST"] != null && Convert.ToString(dt.Rows[0]["Fld_CGST"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGST"]);
                    }
                    if (dt.Rows[0]["Fld_SGST"] != null && Convert.ToString(dt.Rows[0]["Fld_SGST"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGST"]);
                    }
                    if (dt.Rows[0]["Fld_Cess"] != null && Convert.ToString(dt.Rows[0]["Fld_Cess"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_Cess"]);
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("HSN Summary", strStatus, _Count, dt.Rows[0]["Fld_TotalTaxableValue"].ToString(), dt.Rows[0]["Fld_IGST"].ToString(), dt.Rows[0]["Fld_CGST"].ToString(), dt.Rows[0]["Fld_SGST"].ToString(), dt.Rows[0]["Fld_Cess"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("HSN Summary", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Form 13 Document
                Query = "Select * from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    Int32 _Count = 0;
                    string _Query = "Select * from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id;";
                    DataTable dtCount = new DataTable();
                    dtCount = objGSTR5.GetDataGSTR1(_Query);
                    if (dtCount != null && dtCount.Rows.Count > 0)
                    {
                        _Count = dtCount.Rows.Count - 1;
                    }
                    string strStatus = dt.Rows[1]["Fld_FileStatus"].ToString() == "Completed" ? "Successfull" : "Pending";
                    dt1.Rows.Add("Documents Issued Summary", strStatus, _Count, "0", "0", "0", "0", "0", "0");
                }
                else
                {
                    dt1.Rows.Add("Documents Issued Summary", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion



                //Add
                dt1.Columns["Type of Invoices"].ColumnName = "Type of Invoices";
                dt1.Columns["Status"].ColumnName = "Validation";
                dt1.Columns["NOofInv"].ColumnName = "No of Records";
                dt1.Columns["InvTaxVal"].ColumnName = "Taxable Value";
                dt1.Columns["IGST"].ColumnName = "IGST";
                dt1.Columns["CGST"].ColumnName = "CGST";
                dt1.Columns["SGST"].ColumnName = "SGST";
                dt1.Columns["Cess"].ColumnName = "Cess";
                dt1.Columns["Total Tax"].ColumnName = "Total GST";

                dgvMain.DataSource = dt1;
                dgvMain.Columns["Type of Invoices"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                dgvMain.Columns["Validation"].Width = 110;
                dgvMain.Columns["IGST"].Width = 105;
                dgvMain.Columns["CGST"].Width = 105;
                dgvMain.Columns["SGST"].Width = 105;
                dgvMain.Columns["Cess"].Width = 105;
                dgvMain.Columns["Total GST"].Width = 105;
                dgvMain.ColumnHeadersHeight = 50;
                DataGridViewRow row = this.dgvMain.RowTemplate;
                row.MinimumHeight = 22;
                // DgvMain.Columns["Validation Status"].Visible = false;
                // DgvMain.Columns["Invoice Value"].Visible = false;
                foreach (DataGridViewColumn column in dgvMain.Columns)
                {
                    column.SortMode = DataGridViewColumnSortMode.NotSortable;

                    if (column.Index != 0 && column.Index != 1)
                        dgvMain.Columns[column.Index].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                }
                //dgvMain.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(232, 241, 252);
                //dgvMain.EnableHeadersVisualStyles = false;


                for (int i = 0; i < dgvMain.Rows.Count; i++)
                {
                    for (int j = 3; j < dgvMain.ColumnCount; j++)
                    {
                        if (dgvMain.Rows[i].Cells[j].Value.ToString() == "-" || dgvMain.Rows[i].Cells[j].Value.ToString() == "" || dgvMain.Rows[i].Cells[j].Value == null)
                        {
                            dgvMain.Rows[i].Cells[j].Value = "0";
                        }
                    }
                }

                //dgvMain.Refresh();
                Application.DoEvents();

                GetdataAmendment();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        public void GetdataAmendment()
        {
            try
            {
                DataTable dt1 = new DataTable();
                DataTable dt = new DataTable();
                string Query = "";
                dt1.Columns.Add("Type of Invoices", typeof(string));
                dt1.Columns.Add("Status", typeof(string));
                dt1.Columns.Add("NOofInv", typeof(string));
                dt1.Columns.Add("InvTaxVal", typeof(string));
                dt1.Columns.Add("IGST", typeof(string));
                dt1.Columns.Add("CGST", typeof(string));
                dt1.Columns.Add("SGST", typeof(string));
                dt1.Columns.Add("Cess", typeof(string));
                dt1.Columns.Add("Total Tax", typeof(string));

                #region  B2BA
                Query = "Select Fld_FileStatus,Count(DISTINCT Fld_OrgInvoiceNo) AS Fld_OrgInvoiceNo,SUM(Replace(Fld_TaxVal,',','')) AS Fld_TaxVal,SUM(Replace(Fld_IGSTAmt,',','')) AS Fld_IGSTAmt,SUM(Replace(Fld_CGSTAmt,',','')) AS Fld_CGSTAmt,SUM(Replace(Fld_SGSTAmt,',','')) AS Fld_SGSTAmt,SUM(Replace(Fld_CESSAmt,',','')) AS Fld_CESSAmt from SPQR1AmendB2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CESSAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSAmt"]);
                    }

                    dt1.Rows.Add("B2B Invoice     [Table No.4]", dt.Rows[0]["Fld_FileStatus"].ToString(), dt.Rows[0]["Fld_OrgInvoiceNo"].ToString(), dt.Rows[0]["Fld_TaxVal"].ToString(), dt.Rows[0]["Fld_IGSTAmt"].ToString(), dt.Rows[0]["Fld_CGSTAmt"].ToString(), dt.Rows[0]["Fld_SGSTAmt"].ToString(), dt.Rows[0]["Fld_CESSAmt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("B2BA Invoices     [Table No.4]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region B2CLA
                Query = "Select Fld_FileStatus,Count(DISTINCT Fld_OrgInvoiceNo) AS Fld_OrgInvoiceNo,SUM(Replace(Fld_TaxVal,',','')) AS Fld_TaxVal,SUM(Replace(Fld_IGSTAmt,',','')) AS Fld_IGSTAmt,0 AS Fld_CGSTAmt,0 AS Fld_SGSTAmt,SUM(Replace(Fld_CESSAmt,',','')) AS Fld_CESSAmt from SPQR1AmendB2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {

                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CESSAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSAmt"]);
                    }


                    dt1.Rows.Add("B2CLA Invoices     [Table No.5]", dt.Rows[0]["Fld_FileStatus"].ToString(), dt.Rows[0]["Fld_OrgInvoiceNo"].ToString(), dt.Rows[0]["Fld_TaxVal"].ToString(), dt.Rows[0]["Fld_IGSTAmt"].ToString(), "0", "0", dt.Rows[0]["Fld_CESSAmt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("B2CLA Invoices     [Table No.5]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region B2CSA
                Query = "Select Fld_FileStatus,Count(Fld_ID) AS Fld_OrgInvoiceNo,SUM(Replace(Fld_TaxVal,',','')) AS Fld_TaxVal,SUM(Replace(Fld_IGSTAmt,',','')) AS Fld_IGSTAmt,SUM(Replace(Fld_CGSTAmt,',','')) AS Fld_CGSTAmt,SUM(Replace(Fld_SGSTAmt,',','')) AS Fld_SGSTAmt,SUM(Replace(Fld_CESSAmt,',','')) AS Fld_CESSAmt from SPQR1AmendB2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CESSAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSAmt"]);
                    }

                    dt1.Rows.Add("B2CSA Invoices     [Table No.7]", dt.Rows[0]["Fld_FileStatus"].ToString(), "0", dt.Rows[0]["Fld_TaxVal"].ToString(), dt.Rows[0]["Fld_IGSTAmt"].ToString(), dt.Rows[0]["Fld_CGSTAmt"].ToString(), dt.Rows[0]["Fld_SGSTAmt"].ToString(), dt.Rows[0]["Fld_CESSAmt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("B2CSA Invoices     [Table No.7]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region EXPA
                Query = "Select Fld_FileStatus,Count(DISTINCT Fld_OrgSupInvoiceNo) AS Fld_OrgSupInvoiceNo,SUM(Replace(Fld_TaxableValue,',','')) AS Fld_TaxableValue,SUM(Replace(Fld_IGSTAmt,',','')) AS Fld_IGSTAmt,'' AS Fld_CGSTAmt,'' AS Fld_SGSTAmt,SUM(Replace(Fld_CESSAmt,',','')) AS Fld_CESSAmt from SPQR1AmendEXPORT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {

                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CESSAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSAmt"]);
                    }

                    dt1.Rows.Add("EXPA     [Table No.6A]", dt.Rows[0]["Fld_FileStatus"].ToString(), dt.Rows[0]["Fld_OrgSupInvoiceNo"].ToString(), dt.Rows[0]["Fld_TaxableValue"].ToString(), dt.Rows[0]["Fld_IGSTAmt"].ToString(), "", "", dt.Rows[0]["Fld_CESSAmt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("EXPA     [Table No.6A]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region CDNRA
                Query = "Select Fld_FileStatus,Count(DISTINCT Fld_OrgCDNNo) AS Fld_OrgCDNNo,SUM(Replace(Fld_TaxableValue,',','')) AS Fld_TaxableValue,SUM(Replace(Fld_IGSTAmt,',','')) AS Fld_IGSTAmt,SUM(Replace(Fld_CGSTAmt,',','')) AS Fld_CGSTAmt,SUM(Replace(Fld_SGSTAmt,',','')) AS Fld_SGSTAmt,SUM(Replace(Fld_CESSAmt,',','')) AS Fld_CESSAmt from SPQR1AmendCDNR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);

                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CESSAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSAmt"]);
                    }

                    dt1.Rows.Add("CDNRA     [Table No.9B]", dt.Rows[0]["Fld_FileStatus"], dt.Rows[0]["Fld_OrgCDNNo"].ToString(), dt.Rows[0]["Fld_TaxableValue"].ToString(), dt.Rows[0]["Fld_IGSTAmt"].ToString(), dt.Rows[0]["Fld_CGSTAmt"].ToString(), dt.Rows[0]["Fld_SGSTAmt"].ToString(), dt.Rows[0]["Fld_CESSAmt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("CDNRA     [Table No.9B]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region CDNURA
                Query = "Select Fld_FileStatus,Count(DISTINCT Fld_OrgCDNRefVouNo) AS Fld_OrgCDNRefVouNo,SUM(Replace(Fld_TaxableValue,',','')) AS Fld_TaxableValue,SUM(Replace(Fld_IGSTAmt,',','')) AS Fld_IGSTAmt,SUM(Replace(Fld_CGSTAmt,',','')) AS Fld_CGSTAmt,SUM(Replace(Fld_SGSTAmt,',','')) AS Fld_SGSTAmt,SUM(Replace(Fld_CESSAmt,',','')) AS Fld_CESSAmt from SPQR1AmendCDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CESSAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSAmt"]);
                    }

                    dt1.Rows.Add("CDNURA     [Table No.9B]", dt.Rows[0]["Fld_FileStatus"], dt.Rows[0]["Fld_OrgCDNRefVouNo"].ToString(), dt.Rows[0]["Fld_TaxableValue"].ToString(), dt.Rows[0]["Fld_IGSTAmt"].ToString(), dt.Rows[0]["Fld_CGSTAmt"].ToString(), dt.Rows[0]["Fld_SGSTAmt"].ToString(), dt.Rows[0]["Fld_CESSAmt"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("CDNURA     [Table No.9B]", "-", "0", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region ATA
                Query = "Select Fld_FileStatus,Count(Fld_ID) AS Fld_OrgInvoiceNo,SUM(Replace(Fld_AdvReceived,',','')) AS Fld_AdvReceived,SUM(Replace(Fld_IGSTRate,',','')) AS Fld_IGSTRate,SUM(Replace(Fld_CGSTRate,',','')) AS Fld_CGSTRate,SUM(Replace(Fld_SGSTRate,',','')) AS Fld_SGSTRate,SUM(Replace(Fld_CESSRate,',','')) AS Fld_CESSRate from SPQR1AmendAT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTRate"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTRate"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTRate"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTRate"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTRate"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTRate"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTRate"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTRate"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTRate"]);
                    }
                    if (dt.Rows[0]["Fld_CESSRate"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSRate"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSRate"]);
                    }

                    dt1.Rows.Add("ATA     [Table No.11A]", dt.Rows[0]["Fld_FileStatus"].ToString(), "0", dt.Rows[0]["Fld_AdvReceived"].ToString(), dt.Rows[0]["Fld_IGSTRate"].ToString(), dt.Rows[0]["Fld_CGSTRate"].ToString(), dt.Rows[0]["Fld_SGSTRate"].ToString(), dt.Rows[0]["Fld_CESSRate"].ToString(), TotalTax);
                }
                else
                {
                    dt1.Rows.Add("ATA     [Table No.11A]", "-", "0", "0", "0", "0", "0", "0", "0");
                }

                #endregion

                #region TXPA
                Query = "Select Fld_FileStatus,Count(Fld_ID) AS Fld_OrgInvoiceNo,SUM(Replace(Fld_AdvToAdjusted,',','')) AS Fld_AdvToAdjusted,SUM(Replace(Fld_IGSTAmt,',','')) AS Fld_IGSTAmt,SUM(Replace(Fld_CGSTAmt,',','')) AS Fld_CGSTAmt,SUM(Replace(Fld_SGSTAmt,',','')) AS Fld_SGSTAmt,SUM(Replace(Fld_CESSAmt,',','')) AS Fld_CESSAmt from SPQR1AmendTXP where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' AND Fld_FileStatus != 'Total' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0 && Convert.ToString(dt.Rows[0]["Fld_FileStatus"]) != "")
                {
                    Decimal TotalTax = 0;
                    if (dt.Rows[0]["Fld_IGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_IGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_SGSTAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_SGSTAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmt"]);
                    }
                    if (dt.Rows[0]["Fld_CESSAmt"] != null && Convert.ToString(dt.Rows[0]["Fld_CESSAmt"]).Trim() != "")
                    {
                        TotalTax = TotalTax + Convert.ToDecimal(dt.Rows[0]["Fld_CESSAmt"]);
                    }

                    dt1.Rows.Add("TXPA     [Table No.11B]", dt.Rows[0]["Fld_FileStatus"].ToString(), 0, dt.Rows[0]["Fld_AdvToAdjusted"].ToString(), dt.Rows[0]["Fld_IGSTAmt"].ToString(), dt.Rows[0]["Fld_CGSTAmt"].ToString(), dt.Rows[0]["Fld_SGSTAmt"].ToString(), dt.Rows[0]["Fld_CESSAmt"].ToString());
                }
                else
                {
                    dt1.Rows.Add("TXPA     [Table No.11B]", "-", "0", "0", "0", "0", "0", "0", "0");
                }

                #endregion

                //Add
                dt1.Columns["Type of Invoices"].ColumnName = "Type of Invoices";
                // dt1.Columns["Validation Status"].ColumnName = "Validation Status";
                dt1.Columns["Status"].ColumnName = "Status";
                dt1.Columns["NOofInv"].ColumnName = "Document Count";
                //dt1.Columns["InvValue"].ColumnName = "Invoice Value";
                dt1.Columns["InvTaxVal"].ColumnName = "Taxable Value";
                dt1.Columns["IGST"].ColumnName = "IGST";
                dt1.Columns["CGST"].ColumnName = "CGST";
                dt1.Columns["SGST"].ColumnName = "SGST";
                dt1.Columns["Cess"].ColumnName = "Cess";
                dt1.Columns["Total Tax"].ColumnName = "Total Tax";

                dgvGSTR1Amendment.DataSource = dt1;
                //dgvGSTR1Amendment.Columns["Type of Invoices"].Width = 450;
                dgvGSTR1Amendment.Columns["Type of Invoices"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                dgvGSTR1Amendment.Columns["Status"].Width = 110;
                dgvGSTR1Amendment.Columns["IGST"].Width = 105;
                dgvGSTR1Amendment.Columns["CGST"].Width = 105;
                dgvGSTR1Amendment.Columns["SGST"].Width = 105;
                dgvGSTR1Amendment.Columns["Cess"].Width = 105;
                dgvGSTR1Amendment.Columns["Total Tax"].Width = 105;
                dgvGSTR1Amendment.ColumnHeadersHeight = 50;
                DataGridViewRow row = this.dgvGSTR1Amendment.RowTemplate;
                row.MinimumHeight = 22;

                foreach (DataGridViewColumn column in dgvGSTR1Amendment.Columns)
                {
                    column.SortMode = DataGridViewColumnSortMode.NotSortable;

                    if (column.Index != 0 && column.Index != 1)
                        dgvGSTR1Amendment.Columns[column.Index].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                }
                //dgvGSTR1Amendment.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(232, 241, 252);
                //dgvGSTR1Amendment.EnableHeadersVisualStyles = false;


                for (int i = 0; i < dgvGSTR1Amendment.Rows.Count; i++)
                {
                    for (int j = 3; j < dgvGSTR1Amendment.ColumnCount; j++)
                    {
                        if (dgvGSTR1Amendment.Rows[i].Cells[j].Value.ToString() == "-" || dgvGSTR1Amendment.Rows[i].Cells[j].Value.ToString() == "" || dgvGSTR1Amendment.Rows[i].Cells[j].Value == null)
                        {
                            dgvGSTR1Amendment.Rows[i].Cells[j].Value = "0";
                        }
                    }
                }

                //dgvGSTR1Amendment.Refresh();
                Application.DoEvents();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        public void GetReportData()
        {
            try
            {
                decimal Fld_ExportTurn_3B = 0, Fld_IGSTTurn_3B = 0, Fld_TaxTurn_3B = 0, Fld_CESS_3B = 0, Fld_IGST_3B = 0, Fld_CGST_3B = 0, Fld_SGST_3B = 0;
                decimal Fld_ExportTurn_1 = 0, Fld_IGSTTurn_1 = 0, Fld_TaxTurn_1 = 0, Fld_CESS_1 = 0, Fld_IGST_1 = 0, Fld_CGST_1 = 0, Fld_SGST_1 = 0;
                string Query = "";
                DataTable dt = new DataTable();

                foreach (DataGridViewColumn column in dgvReport.Columns)
                {
                    column.SortMode = DataGridViewColumnSortMode.NotSortable;
                }
                dgvReport.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(232, 241, 252);
                dgvReport.EnableHeadersVisualStyles = false;

                #region IsQuarter = True
                if (CommonHelper.IsQuarter == true)
                {
                    if ("June" == CommonHelper.SelectedMonth || "September" == CommonHelper.SelectedMonth || "December" == CommonHelper.SelectedMonth || "March" == CommonHelper.SelectedMonth)
                    {
                        lblReportTitle.Visible = true;
                        dgvReport.Visible = true;

                        #region GSTR-1
                        Query = "Select * from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_InvoiceTaxableVal"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_InvoiceTaxableVal"]);

                                if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                    Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                    Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                                if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                    Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CessAmount"].ToString().Trim() != "")
                                    Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                            }
                        }

                        Query = "Select * from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_TaxableValue"].ToString() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_TaxableValue"]);

                                if (dt.Rows[0]["Fld_IGST"].ToString().Trim() != "")
                                    Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGST"]);
                                //if (dt.Rows[0]["Fld_CGST"].ToString() != "")
                                //    Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGST"]);
                                //if (dt.Rows[0]["Fld_SGST"].ToString() != "")
                                //    Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGST"]);
                                if (dt.Rows[0]["Fld_CESS"].ToString().Trim() != "")
                                    Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CESS"]);
                            }
                        }

                        Query = "Select * from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_TaxableValue"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_TaxableValue"]);

                                if (dt.Rows[0]["Fld_IGST"].ToString().Trim() != "")
                                    Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGST"]);
                                if (dt.Rows[0]["Fld_CGST"].ToString().Trim() != "")
                                    Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGST"]);
                                if (dt.Rows[0]["Fld_SGST"].ToString().Trim() != "")
                                    Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGST"]);
                                if (dt.Rows[0]["Fld_CESS"].ToString().Trim() != "")
                                    Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CESS"]);
                            }
                        }

                        Query = "Select * from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_Taxable"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_Taxable"]);

                                if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                    Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                    Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                                if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                    Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CessAmnt"].ToString().Trim() != "")
                                    Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmnt"]);
                            }
                        }

                        Query = "Select * from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_Taxable"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_Taxable"]);

                                if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                    Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                    Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                                if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                    Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CessAmnt"].ToString().Trim() != "")
                                    Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmnt"]);
                            }
                        }

                        Query = "Select * from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_GrossAdvRcv"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_GrossAdvRcv"]);

                                if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                    Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                    Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                                if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                    Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CessAmount"].ToString().Trim() != "")
                                    Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                            }
                        }

                        Query = "Select * from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_Advadj"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 - Convert.ToDecimal(dt.Rows[0]["Fld_Advadj"]);

                                if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                    Fld_IGST_1 = Fld_IGST_1 - Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                    Fld_CGST_1 = Fld_CGST_1 - Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                                if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                    Fld_SGST_1 = Fld_SGST_1 - Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                                if (dt.Rows[0]["Fld_CessAmount"].ToString().Trim() != "")
                                    Fld_CESS_1 = Fld_CESS_1 - Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                            }
                        }

                        Query = "Select * from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_IGSTInvoiceTaxableVal"].ToString().Trim() != "")
                                    Fld_ExportTurn_1 = Fld_ExportTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTInvoiceTaxableVal"]);

                                if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                    Fld_IGSTTurn_1 = Fld_IGSTTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);

                            }
                        }

                        Query = "Select * from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                        dt = new DataTable();
                        dt = objGSTR1A.GetDataGSTR1A(Query);

                        if (dt != null)
                        {
                            if (dt.Rows.Count > 0)
                            {
                                if (dt.Rows[0]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_NilRatedSupply"]);
                                if (dt.Rows[0]["Fld_Exempted"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_Exempted"]);
                                if (dt.Rows[0]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_NonGSTSupplies"]);

                                if (dt.Rows[1]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[1]["Fld_NilRatedSupply"]);
                                if (dt.Rows[1]["Fld_Exempted"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[1]["Fld_Exempted"]);
                                if (dt.Rows[1]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[1]["Fld_NonGSTSupplies"]);

                                if (dt.Rows[2]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[2]["Fld_NilRatedSupply"]);
                                if (dt.Rows[2]["Fld_Exempted"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[2]["Fld_Exempted"]);
                                if (dt.Rows[2]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[2]["Fld_NonGSTSupplies"]);

                                if (dt.Rows[3]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[3]["Fld_NilRatedSupply"]);
                                if (dt.Rows[3]["Fld_Exempted"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[3]["Fld_Exempted"]);
                                if (dt.Rows[3]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[3]["Fld_NonGSTSupplies"]);

                            }
                        }

                        dgvReport.Rows.Add("GSTR-1", Fld_TaxTurn_1, Fld_IGST_1, Fld_CGST_1, Fld_SGST_1, Fld_CESS_1, Fld_ExportTurn_1, Fld_IGSTTurn_1);
                        #endregion

                        #region GSTR-3B
                        if (CommonHelper.IsQuarter == true)
                        {
                            string Month = SetQuarterlyMonth(CommonHelper.SelectedMonth);
                            string[] Monthstr = Month.Split(',');

                            for (int i = 0; i < Monthstr.Length; i++)
                            {
                                Query = "Select * from SPQR3BOutwardSupplies where Fld_Month='" + Monthstr[i].Trim() + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                                dt = new DataTable();
                                dt = objGSTR1A.GetDataGSTR1A(Query);
                                if (dt != null)
                                {
                                    if (dt.Rows.Count > 0)
                                    {
                                        if (dt.Rows[1][3].ToString().Trim() != "")
                                            Fld_ExportTurn_3B = Convert.ToDecimal(dt.Rows[1][3]);
                                        if (dt.Rows[1][4].ToString().Trim() != "")
                                            Fld_IGSTTurn_3B = Convert.ToDecimal(dt.Rows[1][4]);

                                        if (dt.Rows[0][3].ToString().Trim() != "")
                                            Fld_TaxTurn_3B = Fld_TaxTurn_3B + Convert.ToDecimal(dt.Rows[0][3]);
                                        if (dt.Rows[2][3].ToString().Trim() != "")
                                            Fld_TaxTurn_3B = Fld_TaxTurn_3B + Convert.ToDecimal(dt.Rows[2][3]);
                                        if (dt.Rows[4][3].ToString().Trim() != "")
                                            Fld_TaxTurn_3B = Fld_TaxTurn_3B + Convert.ToDecimal(dt.Rows[4][3]);

                                        if (dt.Rows[0][7].ToString().Trim() != "")
                                            Fld_CESS_3B = Fld_CESS_3B + Convert.ToDecimal(dt.Rows[0][7]);
                                        if (dt.Rows[1][7].ToString().Trim() != "")
                                            Fld_CESS_3B = Fld_CESS_3B + Convert.ToDecimal(dt.Rows[1][7]);
                                        //if (dt.Rows[3][7].ToString() != "")
                                        //    Fld_CESS_3B = Fld_CESS_3B + Convert.ToDecimal(dt.Rows[3][7]);

                                        if (dt.Rows[0][4].ToString() != "")
                                            Fld_IGST_3B = Fld_IGST_3B + Convert.ToDecimal(dt.Rows[0][4]);
                                        //if (dt.Rows[3][4].ToString() != "")
                                        //    Fld_IGST_3B = Fld_IGST_3B + Convert.ToDecimal(dt.Rows[3][4]);

                                        if (dt.Rows[0][5].ToString().Trim() != "")
                                            Fld_CGST_3B = Fld_CGST_3B + Convert.ToDecimal(dt.Rows[0][5]);
                                        //if (dt.Rows[3][5].ToString() != "")
                                        //    Fld_CGST_3B = Fld_CGST_3B + Convert.ToDecimal(dt.Rows[3][5]);

                                        if (dt.Rows[0][6].ToString().Trim() != "")
                                            Fld_SGST_3B = Fld_SGST_3B + Convert.ToDecimal(dt.Rows[0][6]);
                                        //if (dt.Rows[3][6].ToString() != "")
                                        //    Fld_SGST_3B = Fld_SGST_3B + Convert.ToDecimal(dt.Rows[3][6]);
                                    }
                                }
                            }
                        }

                        dgvReport.Rows.Add("GSTR-3B", Fld_TaxTurn_3B, Fld_IGST_3B, Fld_CGST_3B, Fld_SGST_3B, Fld_CESS_3B, Fld_ExportTurn_3B, Fld_IGSTTurn_3B);
                        #endregion
                    }
                    else
                    {
                        lblReportTitle.Visible = false;
                        dgvReport.Visible = false;
                    }
                }
                #endregion

                #region IsQuarter = False
                if (CommonHelper.IsQuarter == false)
                {
                    lblReportTitle.Visible = true;
                    dgvReport.Visible = true;

                    #region GSTR-1
                    Query = "Select * from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_InvoiceTaxableVal"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_InvoiceTaxableVal"]);

                            if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                            if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CessAmount"].ToString().Trim() != "")
                                Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                        }
                    }

                    Query = "Select * from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_TaxableValue"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_TaxableValue"]);

                            if (dt.Rows[0]["Fld_IGST"].ToString().Trim() != "")
                                Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGST"]);
                            //if (dt.Rows[0]["Fld_CGST"].ToString().Trim() != "")
                            //    Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGST"]);
                            //if (dt.Rows[0]["Fld_SGST"].ToString().Trim() != "")
                            //    Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGST"]);
                            if (dt.Rows[0]["Fld_CESS"].ToString().Trim() != "")
                                Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CESS"]);
                        }
                    }

                    Query = "Select * from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_TaxableValue"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_TaxableValue"]);

                            if (dt.Rows[0]["Fld_IGST"].ToString().Trim() != "")
                                Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGST"]);
                            if (dt.Rows[0]["Fld_CGST"].ToString().Trim() != "")
                                Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGST"]);
                            if (dt.Rows[0]["Fld_SGST"].ToString().Trim() != "")
                                Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGST"]);
                            if (dt.Rows[0]["Fld_CESS"].ToString().Trim() != "")
                                Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CESS"]);
                        }
                    }

                    Query = "Select * from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_Taxable"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_Taxable"]);

                            if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                            if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CessAmnt"].ToString().Trim() != "")
                                Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmnt"]);
                        }
                    }

                    Query = "Select * from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_Taxable"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_Taxable"]);

                            if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                            if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CessAmnt"].ToString().Trim() != "")
                                Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmnt"]);
                        }
                    }

                    Query = "Select * from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_GrossAdvRcv"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_GrossAdvRcv"]);

                            if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                Fld_IGST_1 = Fld_IGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                Fld_CGST_1 = Fld_CGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                            if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                Fld_SGST_1 = Fld_SGST_1 + Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CessAmount"].ToString().Trim() != "")
                                Fld_CESS_1 = Fld_CESS_1 + Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                        }
                    }

                    Query = "Select * from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_Advadj"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 - Convert.ToDecimal(dt.Rows[0]["Fld_Advadj"]);

                            if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                Fld_IGST_1 = Fld_IGST_1 - Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim() != "")
                                Fld_CGST_1 = Fld_CGST_1 - Convert.ToDecimal(dt.Rows[0]["Fld_CGSTAmnt"]);
                            if (dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim() != "")
                                Fld_SGST_1 = Fld_SGST_1 - Convert.ToDecimal(dt.Rows[0]["Fld_SGSTAmnt"]);
                            if (dt.Rows[0]["Fld_CessAmount"].ToString().Trim() != "")
                                Fld_CESS_1 = Fld_CESS_1 - Convert.ToDecimal(dt.Rows[0]["Fld_CessAmount"]);
                        }
                    }

                    Query = "Select * from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_IGSTInvoiceTaxableVal"].ToString().Trim() != "")
                                Fld_ExportTurn_1 = Fld_ExportTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTInvoiceTaxableVal"]);

                            if (dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim() != "")
                                Fld_IGSTTurn_1 = Fld_IGSTTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_IGSTAmnt"]);

                        }
                    }

                    Query = "Select * from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);

                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_NilRatedSupply"]);
                            if (dt.Rows[0]["Fld_Exempted"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_Exempted"]);
                            if (dt.Rows[0]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[0]["Fld_NonGSTSupplies"]);

                            if (dt.Rows.Count > 1)
                            {
                                if (dt.Rows[1]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[1]["Fld_NilRatedSupply"]);
                                if (dt.Rows[1]["Fld_Exempted"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[1]["Fld_Exempted"]);
                                if (dt.Rows[1]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[1]["Fld_NonGSTSupplies"]);
                            }
                            if (dt.Rows.Count > 2)
                            {
                                if (dt.Rows[2]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[2]["Fld_NilRatedSupply"]);
                                if (dt.Rows[2]["Fld_Exempted"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[2]["Fld_Exempted"]);
                                if (dt.Rows[2]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[2]["Fld_NonGSTSupplies"]);
                            }
                            if (dt.Rows.Count > 3)
                            {
                                if (dt.Rows[3]["Fld_NilRatedSupply"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[3]["Fld_NilRatedSupply"]);
                                if (dt.Rows[3]["Fld_Exempted"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[3]["Fld_Exempted"]);
                                if (dt.Rows[3]["Fld_NonGSTSupplies"].ToString().Trim() != "")
                                    Fld_TaxTurn_1 = Fld_TaxTurn_1 + Convert.ToDecimal(dt.Rows[3]["Fld_NonGSTSupplies"]);
                            }
                        }
                    }

                    dgvReport.Rows.Add("GSTR-1", Fld_TaxTurn_1, Fld_IGST_1, Fld_CGST_1, Fld_SGST_1, Fld_CESS_1, Fld_ExportTurn_1, Fld_IGSTTurn_1);
                    #endregion

                    #region GSTR-3B

                    Query = "Select * from SPQR3BOutwardSupplies where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    dt = new DataTable();
                    dt = objGSTR1A.GetDataGSTR1A(Query);
                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[1][3].ToString().Trim() != "")
                                Fld_ExportTurn_3B = Convert.ToDecimal(dt.Rows[1][3]);
                            if (dt.Rows[1][4].ToString().Trim() != "")
                                Fld_IGSTTurn_3B = Convert.ToDecimal(dt.Rows[1][4]);

                            if (dt.Rows[0][3].ToString().Trim() != "")
                                Fld_TaxTurn_3B = Fld_TaxTurn_3B + Convert.ToDecimal(dt.Rows[0][3]);
                            if (dt.Rows[2][3].ToString().Trim() != "")
                                Fld_TaxTurn_3B = Fld_TaxTurn_3B + Convert.ToDecimal(dt.Rows[2][3]);
                            if (dt.Rows[4][3].ToString().Trim() != "")
                                Fld_TaxTurn_3B = Fld_TaxTurn_3B + Convert.ToDecimal(dt.Rows[4][3]);

                            if (dt.Rows[0][7].ToString().Trim() != "")
                                Fld_CESS_3B = Fld_CESS_3B + Convert.ToDecimal(dt.Rows[0][7]);
                            if (dt.Rows[1][7].ToString().Trim() != "")
                                Fld_CESS_3B = Fld_CESS_3B + Convert.ToDecimal(dt.Rows[1][7]);
                            //if (dt.Rows[3][7].ToString().Trim() != "")
                            //    Fld_CESS_3B = Fld_CESS_3B + Convert.ToDecimal(dt.Rows[3][7]);

                            if (dt.Rows[0][4].ToString().Trim() != "")
                                Fld_IGST_3B = Fld_IGST_3B + Convert.ToDecimal(dt.Rows[0][4]);
                            //if (dt.Rows[3][4].ToString().Trim() != "")
                            //    Fld_IGST_3B = Fld_IGST_3B + Convert.ToDecimal(dt.Rows[3][4]);

                            if (dt.Rows[0][5].ToString().Trim() != "")
                                Fld_CGST_3B = Fld_CGST_3B + Convert.ToDecimal(dt.Rows[0][5]);
                            //if (dt.Rows[3][5].ToString().Trim() != "")
                            //    Fld_CGST_3B = Fld_CGST_3B + Convert.ToDecimal(dt.Rows[3][5]);

                            if (dt.Rows[0][6].ToString().Trim() != "")
                                Fld_SGST_3B = Fld_SGST_3B + Convert.ToDecimal(dt.Rows[0][6]);
                            //if (dt.Rows[3][6].ToString().Trim() != "")
                            //    Fld_SGST_3B = Fld_SGST_3B + Convert.ToDecimal(dt.Rows[3][6]);
                        }
                    }

                    dgvReport.Rows.Add("GSTR-3B", Fld_TaxTurn_3B, Fld_IGST_3B, Fld_CGST_3B, Fld_SGST_3B, Fld_CESS_3B, Fld_ExportTurn_3B, Fld_IGSTTurn_3B);
                    #endregion
                }
                #endregion

                if (dgvReport.Rows.Count == 2)
                {
                    dgvReport.Rows.Add("Difference", Utility.DisplayIndianCurrency(Convert.ToString(Fld_TaxTurn_1 - Fld_TaxTurn_3B))
                        , Utility.DisplayIndianCurrency(Convert.ToString(Fld_IGST_1 - Fld_IGST_3B))
                        , Utility.DisplayIndianCurrency(Convert.ToString(Fld_CGST_1 - Fld_CGST_3B))
                        , Utility.DisplayIndianCurrency(Convert.ToString(Fld_SGST_1 - Fld_SGST_3B))
                        , Utility.DisplayIndianCurrency(Convert.ToString(Fld_CESS_1 - Fld_CESS_3B))
                        , Utility.DisplayIndianCurrency(Convert.ToString(Fld_ExportTurn_1 - Fld_ExportTurn_3B))
                        , Utility.DisplayIndianCurrency(Convert.ToString(Fld_IGSTTurn_1 - Fld_IGSTTurn_3B)));
                }

                if (dgvReport.RowCount > 0)
                {
                    dgvReport.Rows[1].Cells[0].Style.ForeColor = Color.Blue;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void MatchData(string stu)
        {
            try
            {
                DataTable dt1 = new DataTable();
                DataTable dt = new DataTable();

                dt1.Columns.Add("Type of Invoices", typeof(string));
                //dt1.Columns.Add("Validation Status", typeof(string));
                dt1.Columns.Add("Status", typeof(string));
                dt1.Columns.Add("NOofInv", typeof(string));
                //  dt1.Columns.Add("InvValue", typeof(string));
                dt1.Columns.Add("InvTaxVal", typeof(string));
                dt1.Columns.Add("IGST", typeof(string));
                dt1.Columns.Add("CGST", typeof(string));
                dt1.Columns.Add("SGST", typeof(string));
                dt1.Columns.Add("Cess", typeof(string));

                #region  B2B
                string Query = "Select * from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    //lbl5InvCnt.Text = dt.Rows[0]["Fld_InvoiceNo"].ToString().Trim();
                    //lbl5InvVal.Text = dt.Rows[0]["Fld_InvoiceValue"].ToString().Trim();
                    //lbl5InvTaxVal.Text = dt.Rows[0]["Fld_InvoiceTaxableVal"].ToString().Trim();
                    //lbl5IGSTAmt.Text = dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim();
                    //lbl5CGSTAmt.Text = dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim();
                    //lbl5SGSTAmt.Text = dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim();
                    //lbl5Status.Text = dt.Rows[1]["Fld_FileStatus"].ToString().Trim();


                    dt1.Rows.Add("B2B Invoices", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), dt.Rows[0]["Fld_InvoiceNo"].ToString().Trim(), dt.Rows[0]["Fld_InvoiceTaxableVal"].ToString().Trim(), dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CessAmount"].ToString().Trim());
                }
                else
                {
                    dt1.Rows.Add("B2B Invoices", "-", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region B2C
                Query = "Select * from SPQR1B2C where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    dt1.Rows.Add("B2C Invoices", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), dt.Rows[0]["Fld_InvoiceNo"].ToString().Trim(), dt.Rows[0]["Fld_TaxableValue"].ToString().Trim(), dt.Rows[0]["Fld_IGST"].ToString().Trim(), dt.Rows[0]["Fld_CGST"].ToString().Trim(), dt.Rows[0]["Fld_SGST"].ToString().Trim(), dt.Rows[0]["Fld_CESS"].ToString().Trim());
                }
                else
                {
                    dt1.Rows.Add("B2C Invoices", "-", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Zero rated supplies and Deemed Exports
                Query = "Select * from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'  order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0)
                {
                    dt1.Rows.Add("Zero rated supplies and Deemed Exports", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), dt.Rows[0]["Fld_InvoiceNo"].ToString().Trim(), dt.Rows[0]["Fld_InvoiceValue"].ToString().Trim(), dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim(), "", "", "");
                }
                else
                {
                    dt1.Rows.Add("Zero rated supplies and Deemed Exports", "-", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Credit/Debit Note
                string Status7 = null;
                bool fl = false;
                Query = "Select * from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count == 2)
                {
                    fl = true;
                    Status7 = dt.Rows[1]["Fld_FileStatus"].ToString().Trim();
                    dt = Utility.Filter(dt, "Fld_FileStatus='Total'");
                }

                if (dt != null && dt.Rows.Count == 1)
                {
                    dt1.Rows.Add("Credit/Debit Note", Status7, dt.Rows[0]["Fld_OrgInvoiceNo"].ToString().Trim(), dt.Rows[0]["Fld_Taxable"].ToString().Trim(), dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CessAmnt"].ToString().Trim());
                }
                else
                {
                    dt1.Rows.Add("Credit/Debit Note", "-", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Nil Rated

                Query = "Select * from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    //decimal Total = Convert.ToDecimal(dt.Rows[0]["Fld_NilRatedSupply"].ToString().Trim()) + Convert.ToDecimal(dt.Rows[0]["Fld_Exempted"].ToString().Trim()) + Convert.ToDecimal(dt.Rows[0]["Fld_NonGSTSupplies"].ToString().Trim());
                    //// lbl9Status.Text = dt.Rows[0]["Fld_FileStatus"].ToString().Trim();dt.Rows[0]["Fld_NilRated"].ToString().Trim()
                    //dt1.Rows.Add("Nil Rated", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), "0", Total, "0", "0", "0", "0");

                    dt1.Rows.Add("Nil rated, exempted and non GST outward supplies", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), "0", "0", "0", "0", "0", "0");
                }
                else
                {
                    dt1.Rows.Add("Nil rated, exempted and non GST outward supplies", "-", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Advances

                //Query = "Select * from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' order by Fld_Id DESC LIMIT 2";
                //dt = new DataTable();
                //dt = objGSTR5.GetDataGSTR1(Query);
                //if (dt != null && dt.Rows.Count > 1)
                //{
                //    //decimal Total = Convert.ToDecimal(dt.Rows[0]["Fld_NilRatedSupply"].ToString().Trim()) + Convert.ToDecimal(dt.Rows[0]["Fld_Exempted"].ToString().Trim()) + Convert.ToDecimal(dt.Rows[0]["Fld_NonGSTSupplies"].ToString().Trim());
                //    //// lbl9Status.Text = dt.Rows[0]["Fld_FileStatus"].ToString().Trim();dt.Rows[0]["Fld_NilRated"].ToString().Trim()
                //    //dt1.Rows.Add("Nil Rated", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), "0", Total, "0", "0", "0", "0");

                //    dt1.Rows.Add("Advances", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), "0", "0", "0", "0", "0", "0");
                //}
                //else
                //{
                //    dt1.Rows.Add("Advances", "-", "0", "0", "0", "0", "0", "0");
                //}
                #endregion

                #region Form Gross Advance
                Query = "Select * from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    //dt1.Rows.Add("Gross Advance Received", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), dt.Rows[0]["Fld_ARNNo"].ToString().Trim(), "0", dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CessAmount"].ToString().Trim());

                    dt1.Rows.Add("Advance Tax Paid", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), dt.Rows[0]["Fld_ARNNo"].ToString().Trim(), "0", dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CessAmount"].ToString().Trim());
                }
                else
                {
                    dt1.Rows.Add("Advance Tax Paid", "-", "0", "0", "0", "0", "0", "0");
                }

                #endregion

                #region Form Net Advance
                Query = "Select * from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    //dt1.Rows.Add("Net Advance Adjusted", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), dt.Rows[0]["Fld_InvoiceNo"].ToString().Trim(), "0", dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CessAmount"].ToString().Trim());

                    dt1.Rows.Add("Advance Tax Adjusted", dt.Rows[1]["Fld_FileStatus"].ToString().Trim(), dt.Rows[0]["Fld_InvoiceNo"].ToString().Trim(), "0", dt.Rows[0]["Fld_IGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_SGSTAmnt"].ToString().Trim(), dt.Rows[0]["Fld_CessAmount"].ToString().Trim());
                }
                else
                {
                    dt1.Rows.Add("Advance Tax Adjusted", "-", "0", "0", "0", "0", "0", "0");
                }

                #endregion

                //Add
                dt1.Columns["Type of Invoices"].ColumnName = "Type of Invoices";
                // dt1.Columns["Validation Status"].ColumnName = "Validation Status";
                dt1.Columns["Status"].ColumnName = "Status";
                dt1.Columns["NOofInv"].ColumnName = "Document Count";
                //dt1.Columns["InvValue"].ColumnName = "Invoice Value";
                dt1.Columns["InvTaxVal"].ColumnName = "Taxable Value";
                dt1.Columns["IGST"].ColumnName = "IGST";
                dt1.Columns["CGST"].ColumnName = "CGST";
                dt1.Columns["SGST"].ColumnName = "SGST";
                dt1.Columns["Cess"].ColumnName = "Cess";

                dgvMain.DataSource = dt1;
                dgvMain.Columns["Type of Invoices"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                //DgvMain.Columns["Type of Invoices"].Width = 371;
                dgvMain.Columns["Status"].Width = 110;
                dgvMain.Columns["IGST"].Width = 105;
                dgvMain.Columns["CGST"].Width = 105;
                dgvMain.Columns["SGST"].Width = 105;
                dgvMain.Columns["Cess"].Width = 105;
                dgvMain.ColumnHeadersHeight = 50;
                // DgvMain.Columns["Validation Status"].Visible = false;
                // DgvMain.Columns["Invoice Value"].Visible = false;
                foreach (DataGridViewColumn column in dgvMain.Columns)
                {
                    column.SortMode = DataGridViewColumnSortMode.NotSortable;

                    if (column.Index != 0 && column.Index != 1)
                        dgvMain.Columns[column.Index].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                }
                dgvMain.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(232, 241, 252);
                dgvMain.EnableHeadersVisualStyles = false;


                for (int i = 0; i < dgvMain.Rows.Count; i++)
                {
                    for (int j = 3; j < dgvMain.ColumnCount; j++)
                    {
                        if (dgvMain.Rows[i].Cells[j].Value.ToString() == "-" || dgvMain.Rows[i].Cells[j].Value.ToString() == "" || dgvMain.Rows[i].Cells[j].Value == null)
                        {
                            dgvMain.Rows[i].Cells[j].Value = "0";
                        }
                    }
                }
                dgvMain.Columns["Type of Invoices"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                dgvMain.Refresh();
                Application.DoEvents();

                #region Add Total and Account and Diffrent

                string NOofInv = dgvMain.Rows.Cast<DataGridViewRow>().Where(x => x.Cells["Document Count"].Value != null).Sum(x => x.Cells["Document Count"].Value.ToString().Trim() == "" ? 0 : Convert.ToDecimal(x.Cells["Document Count"].Value)).ToString();
                // string InvValue = DgvMain.Rows.Cast<DataGridViewRow>().Where(x => x.Cells["Invoice Value"].Value != null).Sum(x => x.Cells["Invoice Value"].Value.ToString().Trim() == "" ? 0 : Convert.ToDecimal(x.Cells["Invoice Value"].Value)).ToString();
                string InvTaxVal = dgvMain.Rows.Cast<DataGridViewRow>().Where(x => x.Cells["Taxable Value"].Value != null).Sum(x => x.Cells["Taxable Value"].Value.ToString().Trim() == "" ? 0 : Convert.ToDecimal(x.Cells["Taxable Value"].Value)).ToString();
                string IGST = dgvMain.Rows.Cast<DataGridViewRow>().Where(x => x.Cells["IGST"].Value != null).Sum(x => x.Cells["IGST"].Value.ToString().Trim() == "" ? 0 : Convert.ToDecimal(x.Cells["IGST"].Value)).ToString();
                string CGST = dgvMain.Rows.Cast<DataGridViewRow>().Where(x => x.Cells["CGST"].Value != null).Sum(x => x.Cells["CGST"].Value.ToString().Trim() == "" ? 0 : Convert.ToDecimal(x.Cells["CGST"].Value)).ToString();
                string SGST = dgvMain.Rows.Cast<DataGridViewRow>().Where(x => x.Cells["SGST"].Value != null).Sum(x => x.Cells["SGST"].Value.ToString().Trim() == "" ? 0 : Convert.ToDecimal(x.Cells["SGST"].Value)).ToString();
                string Cess = dgvMain.Rows.Cast<DataGridViewRow>().Where(x => x.Cells["Cess"].Value != null).Sum(x => x.Cells["Cess"].Value.ToString().Trim() == "" ? 0 : Convert.ToDecimal(x.Cells["Cess"].Value)).ToString();


                //TotAL
                if (dgvtotal.Columns.Count == 0)
                {
                    foreach (DataGridViewColumn dgvc in dgvMain.Columns)
                    {
                        dgvtotal.Columns.Add(dgvc.Clone() as DataGridViewColumn);
                    }
                }
                dgvtotal.Rows.Add("Total", "", "", "", "", "", "", "");
                dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Document Count"].Value = NOofInv.ToString();
                dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Taxable Value"].Value = InvTaxVal.ToString();
                // dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Invoice Value"].Value = InvValue.ToString();
                dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["IGST"].Value = IGST.ToString();
                dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["CGST"].Value = CGST.ToString();
                dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["SGST"].Value = SGST.ToString();
                dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Cess"].Value = Cess.ToString();
                dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Type of Invoices"].Value = "Total";

                #endregion

                #region Account
                DataTable dtAcc = new DataTable();
                if (dgvaccount.Columns.Count == 0)
                {
                    foreach (DataGridViewColumn dgvc in dgvMain.Columns)
                    {
                        dgvaccount.Columns.Add(dgvc.Clone() as DataGridViewColumn);
                    }
                }
                dtAcc = dt1.Clone();
                dtAcc.Rows.Add("As per Account", "", "", "", "", "", "", "");
                dgvaccount.DataSource = dtAcc;
                dgvaccount.Columns[0].ReadOnly = true;
                dgvaccount.Columns[1].ReadOnly = true;
                #endregion

                #region Differnce
                if (dgvdiff.Columns.Count == 0)
                {
                    foreach (DataGridViewColumn dgvc in dgvMain.Columns)
                    {
                        dgvdiff.Columns.Add(dgvc.Clone() as DataGridViewColumn);
                    }
                }
                DataTable dtDiff = new DataTable();
                dtDiff = dt1.Clone();
                dtDiff.Rows.Add("Difference", "", "", "", "", "", "", "");
                dgvdiff.DataSource = dtDiff;
                dgvdiff.ReadOnly = true;
                dgvaccount.Rows[0].Cells[0].Selected = false;


                #endregion

                #region Grid 3
                DataTable dtDgv3 = new DataTable();
                dtDgv3.Columns.Add("Type of Invoices", typeof(string));
                //dt1.Columns.Add("Validation Status", typeof(string));
                dtDgv3.Columns.Add("Status", typeof(string));
                dtDgv3.Columns.Add("NOofInv", typeof(string));
                //  dt1.Columns.Add("InvValue", typeof(string));
                dtDgv3.Columns.Add("InvTaxVal", typeof(string));
                dtDgv3.Columns.Add("IGST", typeof(string));
                dtDgv3.Columns.Add("CGST", typeof(string));
                dtDgv3.Columns.Add("SGST", typeof(string));
                dtDgv3.Columns.Add("Cess", typeof(string));
                if (dgvMain.Columns.Count == 0)
                {
                    foreach (DataGridViewColumn dgvc in dgvMain.Columns)
                    {
                        dgvMain.Columns.Add(dgvc.Clone() as DataGridViewColumn);
                    }
                }

                #region HSN Summary
                Query = "Select * from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    dtDgv3.Rows.Add("HSN-wise summary of outward supplies", dt.Rows[1]["Fld_FileStatus"].ToString(), "0", dt.Rows[0]["Fld_TotalTaxableValue"].ToString(), dt.Rows[0]["Fld_IGST"].ToString(), dt.Rows[0]["Fld_CGST"].ToString(), dt.Rows[0]["Fld_SGST"].ToString(), dt.Rows[0]["Fld_Cess"].ToString());
                }
                else
                {
                    dtDgv3.Rows.Add("HSN-wise summary of outward supplies", "-", "0", "0", "0", "0", "0", "0");
                }
                #endregion

                #region Form 13 Document
                Query = "Select * from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' order by Fld_Id DESC LIMIT 2;";
                dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 1)
                {
                    dtDgv3.Rows.Add("Documents issued during the tax period", dt.Rows[1]["Fld_FileStatus"].ToString(), "0", "0", "0", "0", "0", "0");
                }
                else
                {
                    dtDgv3.Rows.Add("Documents issued during the tax period", "-", "0", "0", "0", "0", "0", "0");
                }

                #endregion

                //Add
                dtDgv3.Columns["Type of Invoices"].ColumnName = "Type of Invoices";
                // dt1.Columns["Validation Status"].ColumnName = "Validation Status";
                dtDgv3.Columns["Status"].ColumnName = "Status";
                dtDgv3.Columns["NOofInv"].ColumnName = "Document Count";
                //dt1.Columns["InvValue"].ColumnName = "Invoice Value";
                dtDgv3.Columns["InvTaxVal"].ColumnName = "Taxable Value";
                dtDgv3.Columns["IGST"].ColumnName = "IGST";
                dtDgv3.Columns["CGST"].ColumnName = "CGST";
                dtDgv3.Columns["SGST"].ColumnName = "SGST";
                dtDgv3.Columns["Cess"].ColumnName = "Cess";

                dgvMain.DataSource = dtDgv3;
                dgvMain.Columns["Type of Invoices"].Width = 371;
                dgvMain.Columns["Status"].Width = 110;
                dgvMain.Columns["IGST"].Width = 105;
                dgvMain.Columns["CGST"].Width = 105;
                dgvMain.Columns["SGST"].Width = 105;
                dgvMain.Columns["Cess"].Width = 105;
                dgvMain.ColumnHeadersHeight = 50;
                // DgvMain.Columns["Validation Status"].Visible = false;
                // DgvMain.Columns["Invoice Value"].Visible = false;
                foreach (DataGridViewColumn column in dgvMain.Columns)
                {
                    column.SortMode = DataGridViewColumnSortMode.NotSortable;

                    if (column.Index != 0 && column.Index != 1)
                        dgvMain.Columns[column.Index].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                }
                dgvMain.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(232, 241, 252);
                dgvMain.EnableHeadersVisualStyles = false;


                for (int i = 0; i < dgvMain.Rows.Count; i++)
                {
                    for (int j = 3; j < dgvMain.ColumnCount; j++)
                    {
                        if (dgvMain.Rows[i].Cells[j].Value.ToString() == "-" || dgvMain.Rows[i].Cells[j].Value.ToString() == "" || dgvMain.Rows[i].Cells[j].Value == null)
                        {
                            dgvMain.Rows[i].Cells[j].Value = "0";
                        }
                    }
                }

                dgvMain.Refresh();
                Application.DoEvents();
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        public string SetQuarterlyMonth(string Month)
        {
            try
            {
                string FinalString = "";

                if (Month == "April" || Month == "May" || Month == "June")
                    FinalString = "April,May,June";
                else if (Month == "July" || Month == "August" || Month == "September")
                    FinalString = "July,August,September";
                else if (Month == "October" || Month == "November" || Month == "December")
                    FinalString = "October,November,December";
                else if (Month == "January" || Month == "February" || Month == "March")
                    FinalString = "January,February,March";

                return FinalString;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        private void dgvMainCellClick(object sender, DataGridViewCellEventArgs e)
        {
            CommonHelper.IsMainFormType = "1";
            if (e.RowIndex == 0 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2B obj = new SPQGSTR1B2B();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 1 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2CL obj = new SPQGSTR1B2CL();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 2 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2CS obj = new SPQGSTR1B2CS();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 3 && e.ColumnIndex == 0)
            {
                SPQGSTR1ZeroRated obj = new SPQGSTR1ZeroRated();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 4 && e.ColumnIndex == 0)
            {
                SPQGSTR1CDN obj = new SPQGSTR1CDN();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 5 && e.ColumnIndex == 0)
            {
                SPQGSTR1CDNUR obj = new SPQGSTR1CDNUR();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 6 && e.ColumnIndex == 0)
            {
                SPQGSTR1NilRated obj = new SPQGSTR1NilRated();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 7 && e.ColumnIndex == 0)
            {
                SPQGSTR1AdvanceReceived obj = new SPQGSTR1AdvanceReceived();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

            }
            else if (e.RowIndex == 8 && e.ColumnIndex == 0)
            {
                SPQGSTR1AdvanceAdjusted obj = new SPQGSTR1AdvanceAdjusted();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();

            }
            else if (e.RowIndex == 10 && e.ColumnIndex == 0)
            {
                SPQGSTR1HSNOutwardSummary obj = new SPQGSTR1HSNOutwardSummary();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();

            }
            else if (e.RowIndex == 11 && e.ColumnIndex == 0)
            {
                SPQGSTR1DocumentIssued obj = new SPQGSTR1DocumentIssued();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();

            }
        }

        private void dgvGSTR1Amendment_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            CommonHelper.IsMainFormType = "1";
            if (e.RowIndex == 0 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2BA obj = new SPQGSTR1B2BA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...","Information",MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (e.RowIndex == 1 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2CLA obj = new SPQGSTR1B2CLA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (e.RowIndex == 2 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2CSA obj = new SPQGSTR1B2CSA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (e.RowIndex == 3 && e.ColumnIndex == 0)
            {
                SPQGSTR1EXPA obj = new SPQGSTR1EXPA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (e.RowIndex == 4 && e.ColumnIndex == 0)
            {
                SPQGSTR1CDNRA obj = new SPQGSTR1CDNRA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (e.RowIndex == 5 && e.ColumnIndex == 0)
            {
                SPQGSTR1CDNURA obj = new SPQGSTR1CDNURA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (e.RowIndex == 6 && e.ColumnIndex == 0)
            {
                SPQGSTR1ATA obj = new SPQGSTR1ATA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (e.RowIndex == 7 && e.ColumnIndex == 0)
            {
                SPQGSTR1TXPA obj = new SPQGSTR1TXPA();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();

                //MessageBox.Show("Under work in progress...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public DataTable BindGridDataToMainGrid(DataTable dt)
        {
            DataTable dtfn = new DataTable();

            try
            {

                DataTable dtfilter = new DataTable();
                dtfilter = dt.Copy();
                string gstin = CommonHelper.StateName;

                // create fields
                dtfn.Columns.Add("colSrNo", typeof(string));
                dtfn.Columns.Add("colNatureOfDocument", typeof(string));
                dtfn.Columns.Add("colNilRatedSupply", typeof(string));
                dtfn.Columns.Add("colExempted", typeof(string));
                dtfn.Columns.Add("colNonGSTSupplies", typeof(string));

                #region Kaushik
                /*

                #region Regsame
                DataTable dt_RegSame = Utility.Filter(dt, "(colGSTIN is null or colGSTIN = '') and colPlaceSupply = '" + gstin + "'");
                var result1 = (from r in dt_RegSame.AsEnumerable()
                               group r by new
                               {
                                   colType = r["colType"],
                               } into g

                               select new
                               {
                                   colType = g.Key.colType,
                                   colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                               });


                string ni = "";
                string ex = "";
                string non = "";
                foreach (var item in result1)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }
                dtfn.Rows.Add(new object[] { 1, "Inter-State supplies to registered persons", ni, ex, non });
                #endregion

                #region regDiff

                ni = ""; ex = ""; non = "";

                DataTable dt_RegDiff = Utility.Filter(dt, "colGSTIN <> '' and colPlaceSupply <> '" + gstin + "'");

                var result11 = (from r in dt_RegDiff.AsEnumerable()
                                group r by new
                                {
                                    colType = r["colType"],
                                } into g

                                select new
                                {
                                    colType = g.Key.colType,
                                    colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                                });


                foreach (var item in result11)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }

                dtfn.Rows.Add(new object[] { 2, "Intra-State supplies to registered persons", ni, ex, non });

                #endregion

                #region unregsame
                ni = ""; ex = ""; non = "";
                DataTable dt_unRegSame = Utility.Filter(dt, "(colGSTIN is null or colGSTIN = '') and colPlaceSupply = '" + gstin + "'");

                var result111 = (from r in dt_unRegSame.AsEnumerable()
                                 group r by new
                                 {
                                     colType = r["colType"],
                                 } into g

                                 select new
                                 {
                                     colType = g.Key.colType,
                                     colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                                 });


                foreach (var item in result111)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }

                dtfn.Rows.Add(new object[] { 3, "Inter-State supplies to unregistered persons", ni, ex, non });

                #endregion

                #region unregDiff
                ni = ""; ex = ""; non = "";
                DataTable dt_unRegDiff = Utility.Filter(dt, "(colGSTIN is null or colGSTIN = '') and colPlaceSupply <> '" + gstin + "'");

                var result1111 = (from r in dt_unRegDiff.AsEnumerable()
                                  group r by new
                                  {
                                      colType = r["colType"],
                                  } into g

                                  select new
                                  {
                                      colType = g.Key.colType,
                                      colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                                  });


                foreach (var item in result1111)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }

                dtfn.Rows.Add(new object[] { 4, "Intra-State supplies to unregistered persons", ni, ex, non });

                #endregion
                */

                #endregion


                #region Regsame
                DataTable dt_RegSame = Utility.Filter(dt, "colGSTIN <> '' and colPlaceSupply <> '" + gstin + "'");
                var result1 = (from r in dt_RegSame.AsEnumerable()
                               group r by new
                               {
                                   colType = r["colType"],
                               } into g

                               select new
                               {
                                   colType = g.Key.colType,
                                   colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                               });

                string ni = "";
                string ex = "";
                string non = "";
                foreach (var item in result1)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }
                dtfn.Rows.Add(new object[] { 1, "Inter-State supplies to registered persons", ni, ex, non });
                #endregion

                #region regDiff

                ni = ""; ex = ""; non = "";

                DataTable dt_RegDiff = Utility.Filter(dt, "colGSTIN <> '' and colPlaceSupply = '" + gstin + "'");

                var result11 = (from r in dt_RegDiff.AsEnumerable()
                                group r by new
                                {
                                    colType = r["colType"],
                                } into g

                                select new
                                {
                                    colType = g.Key.colType,
                                    colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                                });


                foreach (var item in result11)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }

                dtfn.Rows.Add(new object[] { 2, "Intra-State supplies to registered persons", ni, ex, non });

                #endregion

                #region unregsame
                ni = ""; ex = ""; non = "";
                DataTable dt_unRegSame = Utility.Filter(dt, "(colGSTIN is null or colGSTIN = '') and colPlaceSupply <> '" + gstin + "'");

                var result111 = (from r in dt_unRegSame.AsEnumerable()
                                 group r by new
                                 {
                                     colType = r["colType"],
                                 } into g

                                 select new
                                 {
                                     colType = g.Key.colType,
                                     colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                                 });

                foreach (var item in result111)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }

                dtfn.Rows.Add(new object[] { 3, "Inter-State supplies to unregistered persons", ni, ex, non });

                #endregion

                #region unregDiff
                ni = ""; ex = ""; non = "";
                DataTable dt_unRegDiff = Utility.Filter(dt, "(colGSTIN is null or colGSTIN = '') and colPlaceSupply = '" + gstin + "'");

                var result1111 = (from r in dt_unRegDiff.AsEnumerable()
                                  group r by new
                                  {
                                      colType = r["colType"],
                                  } into g

                                  select new
                                  {
                                      colType = g.Key.colType,
                                      colAdvadj = g.Sum(x => Convert.ToString(x["colInvoiceValue"]).Trim() == "" ? 0 : Convert.ToDecimal(x["colInvoiceValue"])),
                                  });

                foreach (var item in result1111)
                {
                    if (item.colType.ToString().Trim() == "Nil rated")
                        ni = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Exempted")
                        ex = Convert.ToString(item.colAdvadj);
                    else if (item.colType.ToString().Trim() == "Non-GST Supply")
                        non = Convert.ToString(item.colAdvadj);
                }

                dtfn.Rows.Add(new object[] { 4, "Intra-State supplies to unregistered persons", ni, ex, non });

                #endregion

                dtfn.AcceptChanges();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return dtfn;
        }

        private void msImpExcel_Click(object sender, EventArgs e)
        {
            try
            {
                pbGSTR1.Visible = true;
                string filePath = string.Empty; string fileExt = string.Empty;
                string conn = string.Empty, _str = string.Empty;
                //open dialog to choose file
                OpenFileDialog file = new OpenFileDialog();
                if (file.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    // get file name and extention of selected file
                    filePath = file.FileName;
                    fileExt = Path.GetExtension(filePath);

                    // check selected file extention
                    if (fileExt.CompareTo(".xls") == 0 || fileExt.CompareTo(".xlsx") == 0)
                    {
                        #region if impoted file is open then close open file
                        foreach (Process proc in System.Diagnostics.Process.GetProcessesByName("EXCEL"))
                        {
                            if (proc.MainWindowTitle == "Microsoft Excel - " + file.SafeFileName)
                                proc.Kill();
                        }
                        #endregion

                        #region connection string
                        if (fileExt.CompareTo(".xls") == 0)
                            conn = @"provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 8.0;TypeGuessRows=0;ImportMixedTypes=Text';"; //for below excel 2007  
                        else
                            conn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0 Xml;HDR=Yes;IMEX=1;TypeGuessRows=0;ImportMixedTypes=Text'"; //for above excel 2007  
                        #endregion

                        using (OleDbConnection con = new OleDbConnection(conn))
                        {
                            pbGSTR1.Visible = true;

                            #region Get Data
                            DataSet dsB2B = new DataSet();
                            DataSet dsB2CL = new DataSet();
                            DataSet dsB2CS = new DataSet();
                            DataSet dsEXP = new DataSet();
                            DataSet dsCDN = new DataSet();
                            DataSet dsCDNUR = new DataSet();
                            DataSet dsNIL = new DataSet();
                            DataSet dsAT = new DataSet();
                            DataSet dsTXPD = new DataSet();
                            DataSet dsHSN = new DataSet();
                            DataSet dsDOC = new DataSet();

                            DataSet dsB2BA = new DataSet();
                            DataSet dsB2CLA = new DataSet();
                            DataSet dsB2CSA = new DataSet();
                            DataSet dsEXPA = new DataSet();
                            DataSet dsCDNA = new DataSet();
                            DataSet dsCDNURA = new DataSet();
                            DataSet dsATA = new DataSet();
                            DataSet dsTXPDA = new DataSet();

                            OleDbDataAdapter oleda = new OleDbDataAdapter("SELECT * FROM [b2b$]", conn);
                            try
                            { oleda.Fill(dsB2B, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda1 = new OleDbDataAdapter("SELECT * FROM [b2cl$]", conn);
                            try
                            { oleda1.Fill(dsB2CL, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda2 = new OleDbDataAdapter("SELECT * FROM [b2cs$]", conn);
                            try
                            { oleda2.Fill(dsB2CS, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda4 = new OleDbDataAdapter("SELECT * FROM [export$]", conn);
                            try
                            { oleda4.Fill(dsEXP, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda5 = new OleDbDataAdapter("SELECT * FROM [cdn$]", conn);
                            try
                            { oleda5.Fill(dsCDN, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda10 = new OleDbDataAdapter("SELECT * FROM [cdnur$]", conn);
                            try
                            { oleda10.Fill(dsCDNUR, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda32 = new OleDbDataAdapter("SELECT * FROM [nilrated-exempted-nongst$]", conn);
                            try
                            { oleda32.Fill(dsNIL, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda6 = new OleDbDataAdapter("SELECT * FROM [advance_tax$]", conn);
                            try
                            { oleda6.Fill(dsAT, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda7 = new OleDbDataAdapter("SELECT * FROM [advance_tax_adjusted$]", conn);
                            try
                            { oleda7.Fill(dsTXPD, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda8 = new OleDbDataAdapter("SELECT * FROM [hsn$]", conn);
                            try
                            { oleda8.Fill(dsHSN, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda9 = new OleDbDataAdapter("SELECT * FROM [documents_issued$]", conn);
                            try
                            { oleda9.Fill(dsDOC, "Customer"); }
                            catch (Exception ex)
                            { }


                            OleDbDataAdapter oleda11 = new OleDbDataAdapter("SELECT * FROM [b2ba$]", conn);
                            try
                            { oleda11.Fill(dsB2BA, "Customer"); }
                            catch (Exception ex)
                            { }

                            OleDbDataAdapter oleda12 = new OleDbDataAdapter("SELECT * FROM [b2cla$]", conn);
                            try
                            { oleda12.Fill(dsB2CLA, "Customer"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda13 = new OleDbDataAdapter("SELECT * FROM [b2csa$]", conn);

                            try
                            { oleda13.Fill(dsB2CSA, "Customer"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda14 = new OleDbDataAdapter("SELECT * FROM [expa$]", conn);

                            try
                            { oleda14.Fill(dsEXPA, "Customer"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda15 = new OleDbDataAdapter("SELECT * FROM [cdnra$]", conn);

                            try
                            { oleda15.Fill(dsCDNA, "Customer"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda16 = new OleDbDataAdapter("SELECT * FROM [cdnura$]", conn);

                            try
                            { oleda16.Fill(dsCDNURA, "Customer"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda17 = new OleDbDataAdapter("SELECT * FROM [ata$]", conn);

                            try
                            { oleda17.Fill(dsATA, "Customer"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda18 = new OleDbDataAdapter("SELECT * FROM [atadja$]", conn);

                            try
                            { oleda18.Fill(dsTXPDA, "Customer"); }
                            catch (Exception ex)
                            { }


                            DataTable dtB2B = new DataTable();
                            dtB2B = dsB2B.Tables["Customer"];
                            //DataTable dtB2C = new DataTable();
                            //dtB2C = dsB2C.Tables["Customer"];
                            DataTable dtB2CL = new DataTable();
                            dtB2CL = dsB2CL.Tables["Customer"];
                            DataTable dtB2CS = new DataTable();
                            dtB2CS = dsB2CS.Tables["Customer"];
                            DataTable dtEXP = new DataTable();
                            dtEXP = dsEXP.Tables["Customer"];
                            DataTable dtCDNR = new DataTable();
                            dtCDNR = dsCDN.Tables["Customer"];
                            DataTable dtCDNUR = new DataTable();
                            dtCDNUR = dsCDNUR.Tables["Customer"];
                            DataTable dtNIL = new DataTable();
                            dtNIL = dsNIL.Tables["Customer"];
                            DataTable dtAT = new DataTable();
                            dtAT = dsAT.Tables["Customer"];
                            DataTable dtTXPD = new DataTable();
                            dtTXPD = dsTXPD.Tables["Customer"];
                            DataTable dtHSN = new DataTable();
                            dtHSN = dsHSN.Tables["Customer"];
                            DataTable dtDOC = new DataTable();
                            dtDOC = dsDOC.Tables["Customer"];


                            DataTable dtB2BA = new DataTable();
                            dtB2BA = dsB2BA.Tables["Customer"];
                            DataTable dtB2CLA = new DataTable();
                            dtB2CLA = dsB2CLA.Tables["Customer"];
                            DataTable dtB2CSA = new DataTable();
                            dtB2CSA = dsB2CSA.Tables["Customer"];
                            DataTable dtEXPA = new DataTable();
                            dtEXPA = dsEXPA.Tables["Customer"];
                            DataTable dtCDNA = new DataTable();
                            dtCDNA = dsCDNA.Tables["Customer"];
                            DataTable dtCDNURA = new DataTable();
                            dtCDNURA = dsCDNURA.Tables["Customer"];
                            DataTable dtATA = new DataTable();
                            dtATA = dsATA.Tables["Customer"];
                            DataTable dtTXPDA = new DataTable();
                            dtTXPDA = dsTXPDA.Tables["Customer"];

                            if (dtB2B != null)
                                dtB2B = Utility.RemoveEmptyRowsFromDataTable(dtB2B);

                            if (dtB2CL != null)
                                dtB2CL = Utility.RemoveEmptyRowsFromDataTable(dtB2CL);

                            if (dtB2CS != null)
                                dtB2CS = Utility.RemoveEmptyRowsFromDataTable(dtB2CS);

                            if (dtEXP != null)
                                dtEXP = Utility.RemoveEmptyRowsFromDataTable(dtEXP);

                            if (dtCDNR != null)
                                dtCDNR = Utility.RemoveEmptyRowsFromDataTable(dtCDNR);

                            if (dtCDNUR != null)
                                dtCDNUR = Utility.RemoveEmptyRowsFromDataTable(dtCDNUR);

                            if (dtAT != null)
                                dtAT = Utility.RemoveEmptyRowsFromDataTable(dtAT);

                            if (dtHSN != null)
                                dtHSN = Utility.RemoveEmptyRowsFromDataTable(dtHSN);

                            if (dtDOC != null)
                                dtDOC = Utility.RemoveEmptyRowsFromDataTable(dtDOC);

                            if (dtAT != null)
                                dtAT = Utility.RemoveEmptyRowsFromDataTable(dtAT);

                            if (dtTXPD != null)
                                dtTXPD = Utility.RemoveEmptyRowsFromDataTable(dtTXPD);

                            if (dtB2BA != null)
                                dtB2BA = Utility.RemoveEmptyRowsFromDataTable(dtB2BA);

                            if (dtB2CLA != null)
                                dtB2CLA = Utility.RemoveEmptyRowsFromDataTable(dtB2CLA);

                            if (dtB2CSA != null)
                                dtB2CSA = Utility.RemoveEmptyRowsFromDataTable(dtB2CSA);

                            if (dtEXPA != null)
                                dtEXPA = Utility.RemoveEmptyRowsFromDataTable(dtEXPA);

                            if (dtCDNA != null)
                                dtCDNA = Utility.RemoveEmptyRowsFromDataTable(dtCDNA);

                            if (dtCDNURA != null)
                                dtCDNURA = Utility.RemoveEmptyRowsFromDataTable(dtCDNURA);

                            if (dtATA != null)
                                dtATA = Utility.RemoveEmptyRowsFromDataTable(dtATA);

                            if (dtTXPDA != null)
                                dtTXPDA = Utility.RemoveEmptyRowsFromDataTable(dtTXPDA);

                            #endregion

                            #region first delete old data from database
                            int _Result = 0;
                            string Query = "Delete from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime - b2b!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - b2cl", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - b2cs", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - exp", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - cdnr", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - cdn-ur", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - Nil", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - at", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - txpd", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - hsn", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - doc", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }

                            Query = "Delete from SPQR1AmendB2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2BA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendB2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2CLA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendB2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2CSA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendEXPORT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - EXPA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendCDNR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - CDNRA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendCDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - CDNURA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendAT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - ATA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendTXP where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - TXPA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            #endregion

                            #region  Validation

                            #region Column names regular
                            string b2bInvNo = "Invoice No", b2bInvDate = "Invoice Date", b2bInvVal = "Invoice Value", b2bInvType = "Invoice Type", b2bTax = "Total Taxable Value", b2bIGST = "IGST Amount", b2bCGST = "CGST Amount", b2bSGST = "SGST Amount", b2bCESS = "CESS Amount", b2bRev = "Reverse Charge", b2bPOS = "Place Of Supply";

                            string b2clPartyName = "Party Name", b2clInvoiceNo = "Invoice No", b2clInvoiceDate = "Invoice Date", b2clInvoiceValue = "Invoice Value", b2clRate = "Rate", b2clTaxableValue = "Taxable Value", b2clIGSTAmount = "IGST Amount", b2clCESSAmount = "CESS Amount", b2clPlaceOfSupply = "Place Of Supply", b2clECommerceGSTIN = "E-Commerce GSTIN";

                            string b2csRate = "Rate", b2csTaxableValue = "Taxable Value", b2csIGSTAmount = "IGST Amount", b2csCGSTAmount = "CGST Amount", b2csSGSTAmount = "SGST Amount", b2csCESSAmount = "CESS Amount", b2csPlaceOfSupply = "Place Of Supply", b2csECommerceGSTIN = "E-Commerce GSTIN";

                            string expType = "Type Of Export", expInvNo = "Invoice No", expInvDate = "Invoice Date", expShipDate = "Shipping bill/ bill of export Date", expInvVal = "Invoice Value", expTax = "Total Taxable Value", expIGST = "IGST Amount", expCESS = "CESS Amount";

                            string cdnType = "Type of note (Debit/ Credit)", cdnurSup = "Supply Type", cdnReason = "Reason for issuing note Dr#/ Cr# Notes", cdnPre = "Pre GST Regime Dr#/ Cr# Notes", cdnInvNo = "Original Invoice No", cdnInvVal = "Note/Refund Voucher Value", cdnTax = "Taxable Value", cdnDate = "Debit Note/ credit note/ Refund voucher Date", cdnInvDate = "Original Invoice Date", cdnIGST = "IGST Amount", cdnCGST = "CGST Amount", cdnSGST = "SGST Amount", cdnCESS = "CESS Amount", cdnPOS = "Place of supply";

                            string nilType = "Type", nilGSTIN = "GSTIN/UIN", nilInvNo = "Invoice No", nilInvVal = "Invoice Value", nilInvDate = "Invoice Date", nilPOS = "Place Of Supply";
                            string atInvNo = "ARN No/ Document No", atInvDate = "ARN /Document Date", atInvVal = "Gross Advance Received", atIGST = "IGST Amount", atCGST = "CGST Amount", atSGST = "SGST Amount", atCESS = "Cess Amount", atPOS = "Place of Supply";
                            string txpdInvNo = "Invoice No", txpdDate = "ARN /Document Date", txpdInvDate = "Invoice Date", txpdInvVal = "Advance adjusted", txpdIGST = "IGST Amount", txpdCGST = "CGST Amount", txpdSGST = "SGST Amount", txpdCESS = "CESS Amount", txpdPOS = "Place Of Supply";
                            string hsnUQC = "UQC", hsnInvVal = "Total value", hsnTax = "Total Taxable Value", hsnIGST = "IGST Amount", hsnCGST = "CGST Amount", hsnSGST = "SGST Amount", hsnCESS = "Cess Amount";
                            string docType = "Nature of document", docTotal = "Total Number", docCancel = "Cancelled", docNet = "Net Issued";
                            int _result = 0;

                            #endregion

                            #region Amendment Varbal
                            string B2BA_GST = "GSTIN/UIN of Recipient", B2BA_RecName = "Receiver Name", B2BA_OrgInvNo = "Original Invoice Number", B2BA_OrgInvDate = "Original Invoice date", B2BA_RevInvNo = "Revised Invoice Number", B2BA_RevInvDate = "Revised Invoice date", B2BA_InvVal = "Invoice Value", B2BA_POS = "Place Of Supply", B2BA_RevCharge = "Reverse Charge", B2BA_ApplTaxRate = "Applicable % of Tax Rate", B2BA_InvType = "Invoice Type", B2BA_EGST = "E-Commerce GSTIN", B2BA_Rate = "Rate", B2BA_TaxVal = "Taxable Value", B2BA_Cess = "Cess Amount";

                            string B2CLA_OrgInvNo = "Original Invoice Number", B2CLA_OrgInvDate = "Original Invoice date", B2CLA_OrgPOS = "Original Place Of Supply", B2CLA_RevInvNo = "Revised Invoice Number", B2CLA_RevInvDate = "Revised Invoice date", B2CLA_InvVal = "Invoice Value", B2CLA_AppTaxRate = "Applicable % of Tax Rate", B2CLA_Rate = "Rate", B2CLA_TaxVal = "Taxable Value", B2CLA_Cess = "Cess Amount", B2CLA_EGST = "E-Commerce GSTIN";

                            string B2CSA_FinYear = "Financial Year", B2CSA_OrgMonth = "Original Month", B2CSA_POS = "Place Of Supply", B2CSA_Type = "Type", B2CSA_AppTaxRate = "Applicable % of Tax Rate", B2CSA_Rate = "Rate", B2CSA_TaxVal = "Taxable Value", B2CSA_Cess = "Cess Amount", B2CSA_EGST = "E-Commerce GSTIN";

                            string CDNRA_GST = "GSTIN/UIN of Recipient", CDNRA_RecName = "Receiver Name", CDNRA_OrgVouNo = "Original Note/Refund Voucher Number", CDNRA_OrgVouDate = "Original Note/Refund Voucher date", CDNRA_OrgRecNo = "Original Invoice/Advance Receipt Number", CDNRA_OrgRecDate = "Original Invoice/Advance Receipt date", CDNRA_RefVouNo = "Revised Note/Refund Voucher Number", CDNRA_RefVouDate = "Revised Note/Refund Voucher date", CDNRA_DocType = "Document Type", CDNRA_SupType = "Supply Type", CDNRA_RefVouVal = "Note/Refund Voucher Value", CDNRA_AppTaxRate = "Applicable % of Tax Rate", CDNRA_Rate = "Rate", CDNRA_TaxVal = "Taxable Value", CDNRA_Cess = "Cess Amount", CDNRA_PreGST = "Pre GST";

                            string CDNURA_URType = "UR Type", CDNURA_OrgRefVouNo = "Original Note/Refund Voucher Number", CDNURA_OrgRefVouDate = "Original Note/Refund Voucher date", CDNURA_OrgRecNo = "Original Invoice/Advance Receipt Number", CDNURA_RecDate = "Original Invoice/Advance Receipt date", CDNURA_RefNo = "Revised Note/Refund Voucher Number", CDNURA_RefVouDate = "Revised Note/Refund Voucher date", CDNURA_DocType = "Document Type", CDNURA_SupType = "Supply Type", CDNURA_RefVouVal = "Note/Refund Voucher Value", CDNURA_AppTaxRate = "Applicable % of Tax Rate", CDNURA_Rate = "Rate", CDNURA_TaxVal = "Taxable Value", CDNURA_Cess = "Cess Amount", CDNURA_PreGST = "Pre GST";

                            string EXPA_ExpType = "Export Type", EXPA_OrgInvNo = "Original Invoice Number", EXPA_OrgInvDate = "Original Invoice date", EXPA_RevInvNo = "Revised Invoice Number", EXPA_RevInvDate = "Revised Invoice date", EXPA_InvVal = "Invoice Value", EXPA_PortCode = "Port Code", EXPA_ShipNo = "Shipping Bill Number", EXPA_ShipDate = "Shipping Bill Date", EXPA_AppTaxRate = "Applicable % of Tax Rate", EXPA_Rate = "Rate", EXPA_TaxVal = "Taxable Value", EXPA_Cess = "Cess Amount";

                            string ATA_FinYear = "Financial Year", ATA_OrgMonth = "Original Month", ATA_OrgPOS = "Original Place Of Supply", ATA_AppTaxRate = "Applicable % of Tax Rate", ATA_Rate = "Rate", ATA_GrossAdvRec = "Gross Advance Received", ATA_Cess = "Cess Amount";

                            string ATADJA_FinYear = "Financial Year", ATADJA_OrgMonth = "Original Month", ATADJA_OrgPOS = "Original Place Of Supply", ATADJA_AppTaxRate = "Applicable % of Tax Rate", ATADJA_Rate = "Rate", ATADJA_GrossAdvAdj = "Gross Advance Adjusted", ATADJA_Cess = "Cess Amount";
                            #endregion

                            #region Regular files
                            #region b2b
                            if (dtB2B != null && dtB2B.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtB2B.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bPOS, typeof(string));
                                        dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bRev, typeof(string));
                                        dtB2B.Columns.Add("Status");
                                    }

                                    dtB2B.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim() != "")
                                        dtB2B.Rows[i][b2bPOS] = Utility.strValidStateName(Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim());

                                    if (Utility.b2bInvType(Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim()))
                                        dtB2B.Rows[i][b2bInvType] = Utility.Strb2bInvType(Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim());
                                    else
                                        dtB2B.Rows[i][b2bInvType] = "";

                                    if (Utility.reverseCharge(Convert.ToString(dtB2B.Rows[i][b2bRev]).Trim()))
                                        dtB2B.Rows[i][b2bRev] = Utility.StrreverseCharge(Convert.ToString(dtB2B.Rows[i][b2bRev]).Trim());
                                    else
                                        dtB2B.Rows[i][b2bRev] = "No";

                                    int sj = dtB2B.Columns[b2bInvDate].Ordinal;
                                    dtB2B = Utility.ChangeColumnDataType(dtB2B, dtB2B.Columns[b2bInvDate].ColumnName, typeof(string));
                                    dtB2B.Columns[b2bInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2B.Rows[i][b2bInvDate]);
                                        dtB2B.Rows[i][b2bInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2B.Rows[i][b2bInvDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region B2CL
                            if (dtB2CL != null && dtB2CL.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtB2CL.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CL = Utility.ChangeColumnDataType(dtB2CL, b2clPlaceOfSupply, typeof(string));
                                        dtB2CL.Columns.Add("Status");
                                    }

                                    dtB2CL.Rows[i]["Status"] = "Draft";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtB2CL.Rows[i][b2clPlaceOfSupply]).Trim()))
                                    //    dtB2CL.Rows[i][b2clPlaceOfSupply] = "";

                                    if (Convert.ToString(dtB2CL.Rows[i][b2clPlaceOfSupply]).Trim() != "")
                                        dtB2CL.Rows[i][b2clPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtB2CL.Rows[i][b2clPlaceOfSupply]).Trim());

                                    int sj = dtB2CL.Columns[b2clInvoiceDate].Ordinal;
                                    dtB2CL = Utility.ChangeColumnDataType(dtB2CL, dtB2CL.Columns[b2clInvoiceDate].ColumnName, typeof(string));
                                    dtB2CL.Columns[b2clInvoiceDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2CL.Rows[i][b2clInvoiceDate]);
                                        dtB2CL.Rows[i][b2clInvoiceDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2CL.Rows[i][b2clInvoiceDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region B2CS
                            if (dtB2CS != null && dtB2CS.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtB2CS.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csPlaceOfSupply, typeof(string));
                                        dtB2CS.Columns.Add("Status");
                                        dtB2CS.Columns.Add("Type");
                                    }

                                    dtB2CS.Rows[i]["Status"] = "Draft";

                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Utility.strValidStateName(Convert.ToString(dtB2CS.Rows[i][b2csPlaceOfSupply])));
                                    if (Pos != "")
                                    {
                                        if (Pos.Length > 2)
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        else
                                            StateId = Convert.ToInt16(Pos);
                                    }

                                    if (StateId == CompanyGSTNState)
                                    {
                                        dtB2CS.Rows[i]["Type"] = "Intra";
                                    }
                                    else
                                    {
                                        dtB2CS.Rows[i]["Type"] = "Inter";
                                    }

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtB2CS.Rows[i][b2csPlaceOfSupply]).Trim()))
                                    //    dtB2CS.Rows[i][b2csPlaceOfSupply] = "";

                                    if (Convert.ToString(dtB2CS.Rows[i][b2clPlaceOfSupply]).Trim() != "")
                                        dtB2CS.Rows[i][b2clPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtB2CS.Rows[i][b2csPlaceOfSupply]).Trim());

                                }
                            }
                            #endregion

                            #region exp
                            if (dtEXP != null && dtEXP.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtEXP.Rows.Count; i++)
                                {
                                    if (i == 0)
                                        dtEXP.Columns.Add("Status");

                                    dtEXP.Rows[i]["Status"] = "Draft";

                                    if (Utility.TypeofExport(Convert.ToString(dtEXP.Rows[i][expType]).Trim()))
                                        dtEXP.Rows[i][expType] = Utility.StrTypeofExport(Convert.ToString(dtEXP.Rows[i][expType]).Trim());
                                    else
                                        dtEXP.Rows[i][expType] = "";

                                    int sj = dtEXP.Columns[expInvDate].Ordinal;
                                    dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expInvDate].ColumnName, typeof(string));
                                    dtEXP.Columns[expInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expInvDate]);
                                        dtEXP.Rows[i][expInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXP.Rows[i][expInvDate] = "";
                                    }

                                    sj = dtEXP.Columns[expShipDate].Ordinal;
                                    dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expShipDate].ColumnName, typeof(string));
                                    dtEXP.Columns[expShipDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expShipDate]);
                                        dtEXP.Rows[i][expShipDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXP.Rows[i][expShipDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region cdn
                            if (dtCDNR != null && dtCDNR.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtCDNR.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnPOS, typeof(string));
                                        dtCDNR.Columns.Add("Status");
                                    }

                                    dtCDNR.Rows[i]["Status"] = "Draft";

                                    if (Utility.CDN1TypesofNote(Convert.ToString(dtCDNR.Rows[i][cdnType]).Trim()))
                                        dtCDNR.Rows[i][cdnType] = Utility.StrCDN1TypesofNote(Convert.ToString(dtCDNR.Rows[i][cdnType]).Trim());
                                    else
                                        dtCDNR.Rows[i][cdnType] = "";

                                    //if (Utility.CDN1Reasonissuing(Convert.ToString(dtCDNR.Rows[i][cdnReason]).Trim()))
                                    //    dtCDNR.Rows[i][cdnReason] = Utility.StrCDN1Reasonissuing(Convert.ToString(dtCDNR.Rows[i][cdnReason]).Trim());
                                    //else
                                    //    dtCDNR.Rows[i][cdnReason] = "";

                                    if (Utility.CDN1PreGSTRegime(Convert.ToString(dtCDNR.Rows[i][cdnPre]).Trim()))
                                        dtCDNR.Rows[i][cdnPre] = Utility.StrCDN1PreGSTRegime(Convert.ToString(dtCDNR.Rows[i][cdnPre]).Trim());
                                    else
                                        dtCDNR.Rows[i][cdnPre] = "";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtCDNR.Rows[i][cdnPOS]).Trim()))
                                    //    dtCDNR.Rows[i][cdnPOS] = "";
                                    //else
                                    //    dtCDNR.Rows[i][cdnPOS] = Convert.ToString(dtCDNR.Rows[i][cdnPOS]).Trim();

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnPOS]).Trim() != "")
                                        dtCDNR.Rows[i][cdnPOS] = Utility.strValidStateName(Convert.ToString(dtCDNR.Rows[i][cdnPOS]).Trim());

                                    int sj = dtCDNR.Columns[cdnDate].Ordinal;
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnDate].ColumnName, typeof(string));
                                    dtCDNR.Columns[cdnDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnDate]);
                                        dtCDNR.Rows[i][cdnDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNR.Rows[i][cdnDate] = "";
                                    }

                                    sj = dtCDNR.Columns[cdnInvDate].Ordinal;
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnInvDate].ColumnName, typeof(string));
                                    dtCDNR.Columns[cdnInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnInvDate]);
                                        dtCDNR.Rows[i][cdnInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNR.Rows[i][cdnInvDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region cdn-ur
                            if (dtCDNUR != null && dtCDNUR.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtCDNUR.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnPOS, typeof(string));
                                        dtCDNUR.Columns.Add("Status");
                                    }

                                    dtCDNUR.Rows[i]["Status"] = "Draft";

                                    if (Utility.CDNUR1TypeofExport(Convert.ToString(dtCDNUR.Rows[i][cdnurSup]).Trim()))
                                        dtCDNUR.Rows[i][cdnurSup] = Utility.StrCDNUR1TypeofExport(Convert.ToString(dtCDNUR.Rows[i][cdnurSup]).Trim());
                                    else
                                        dtCDNUR.Rows[i][cdnurSup] = "";

                                    if (Utility.CDNUR1TypesofNote(Convert.ToString(dtCDNUR.Rows[i][cdnType]).Trim()))
                                        dtCDNUR.Rows[i][cdnType] = Utility.StrCDNUR1TypesofNote(Convert.ToString(dtCDNUR.Rows[i][cdnType]).Trim());
                                    else
                                        dtCDNUR.Rows[i][cdnType] = "";

                                    //if (Utility.CDNUR1Reasonissuing(Convert.ToString(dtCDNUR.Rows[i][cdnReason]).Trim()))
                                    //    dtCDNUR.Rows[i][cdnReason] = Utility.StrCDNUR1Reasonissuing(Convert.ToString(dtCDNUR.Rows[i][cdnReason]).Trim());
                                    //else
                                    //    dtCDNUR.Rows[i][cdnReason] = "";

                                    if (Utility.CDNUR1PreGSTRegime(Convert.ToString(dtCDNUR.Rows[i][cdnPre]).Trim()))
                                        dtCDNUR.Rows[i][cdnPre] = Utility.StrCDNUR1PreGSTRegime(Convert.ToString(dtCDNUR.Rows[i][cdnPre]).Trim());
                                    else
                                        dtCDNUR.Rows[i][cdnPre] = "";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtCDNUR.Rows[i][cdnPOS]).Trim()))
                                    //    dtCDNUR.Rows[i][cdnPOS] = "";
                                    //else
                                    //    dtCDNUR.Rows[i][cdnPOS] = Convert.ToString(dtCDNUR.Rows[i][cdnPOS]).Trim();

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnPOS]).Trim() != "")
                                        dtCDNUR.Rows[i][cdnPOS] = Utility.strValidStateName(Convert.ToString(dtCDNUR.Rows[i][cdnPOS]).Trim());

                                    int sj = dtCDNUR.Columns[cdnDate].Ordinal;
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnDate].ColumnName, typeof(string));
                                    dtCDNUR.Columns[cdnDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnDate]);
                                        dtCDNUR.Rows[i][cdnDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNUR.Rows[i][cdnDate] = "";
                                    }

                                    sj = dtCDNUR.Columns[cdnInvDate].Ordinal;
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnInvDate].ColumnName, typeof(string));
                                    dtCDNUR.Columns[cdnInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnInvDate]);
                                        dtCDNUR.Rows[i][cdnInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNUR.Rows[i][cdnInvDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region nil
                            if (dtNIL != null && dtNIL.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtNIL.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtNIL = Utility.ChangeColumnDataType(dtNIL, nilPOS, typeof(string));
                                        dtNIL.Columns.Add("Status");
                                    }

                                    dtNIL.Rows[i]["Status"] = "Draft";

                                    if (Utility.NilRatedType(Convert.ToString(dtNIL.Rows[i][nilType]).Trim()))
                                        dtNIL.Rows[i][nilType] = Utility.StrNilRatedType(Convert.ToString(dtNIL.Rows[i][nilType]).Trim());
                                    else
                                        dtNIL.Rows[i][nilType] = "";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtNIL.Rows[i][nilPOS]).Trim()))
                                    //    dtNIL.Rows[i][nilPOS] = "";
                                    //else
                                    //    dtNIL.Rows[i][nilPOS] = Convert.ToString(dtNIL.Rows[i][nilPOS]).Trim();

                                    if (Convert.ToString(dtNIL.Rows[i][nilPOS]).Trim() != "")
                                        dtNIL.Rows[i][nilPOS] = Utility.strValidStateName(Convert.ToString(dtNIL.Rows[i][nilPOS]).Trim());

                                    int sj = dtNIL.Columns[nilInvDate].Ordinal;
                                    dtNIL = Utility.ChangeColumnDataType(dtNIL, dtNIL.Columns[nilInvDate].ColumnName, typeof(string));
                                    dtNIL.Columns[nilInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtNIL.Rows[i][nilInvDate]);
                                        dtNIL.Rows[i][nilInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtNIL.Rows[i][nilInvDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region at
                            if (dtAT != null && dtAT.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtAT.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtAT = Utility.ChangeColumnDataType(dtAT, atPOS, typeof(string));
                                        dtAT.Columns.Add("Status");
                                    }

                                    dtAT.Rows[i]["Status"] = "Draft";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtAT.Rows[i][atPOS]).Trim()))
                                    //    dtAT.Rows[i][atPOS] = "";
                                    //else
                                    //    dtAT.Rows[i][atPOS] = Convert.ToString(dtAT.Rows[i][atPOS]).Trim();

                                    if (Convert.ToString(dtAT.Rows[i][atPOS]).Trim() != "")
                                        dtAT.Rows[i][atPOS] = Utility.strValidStateName(Convert.ToString(dtAT.Rows[i][atPOS]).Trim());

                                    int sj = dtAT.Columns[atInvDate].Ordinal;
                                    dtAT = Utility.ChangeColumnDataType(dtAT, dtAT.Columns[atInvDate].ColumnName, typeof(string));
                                    dtAT.Columns[atInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtAT.Rows[i][atInvDate]);
                                        dtAT.Rows[i][atInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtAT.Rows[i][atInvDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region txpd
                            if (dtTXPD != null && dtTXPD.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtTXPD.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtTXPD = Utility.ChangeColumnDataType(dtTXPD, txpdPOS, typeof(string));
                                        dtTXPD.Columns.Add("Status");
                                    }

                                    dtTXPD.Rows[i]["Status"] = "Draft";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtTXPD.Rows[i][txpdPOS]).Trim()))
                                    //    dtTXPD.Rows[i][txpdPOS] = "";
                                    //else
                                    //    dtTXPD.Rows[i][txpdPOS] = Convert.ToString(dtTXPD.Rows[i][txpdPOS]).Trim();

                                    if (Convert.ToString(dtTXPD.Rows[i][txpdPOS]).Trim() != "")
                                        dtTXPD.Rows[i][txpdPOS] = Utility.strValidStateName(Convert.ToString(dtTXPD.Rows[i][txpdPOS]).Trim());

                                    int sj = dtTXPD.Columns[txpdInvDate].Ordinal;
                                    dtTXPD = Utility.ChangeColumnDataType(dtTXPD, dtTXPD.Columns[txpdInvDate].ColumnName, typeof(string));
                                    dtTXPD.Columns[txpdInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtTXPD.Rows[i][txpdInvDate]);
                                        dtTXPD.Rows[i][txpdInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtTXPD.Rows[i][txpdInvDate] = "";
                                    }

                                    sj = dtTXPD.Columns[txpdDate].Ordinal;
                                    dtTXPD = Utility.ChangeColumnDataType(dtTXPD, dtTXPD.Columns[txpdDate].ColumnName, typeof(string));
                                    dtTXPD.Columns[txpdDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtTXPD.Rows[i][txpdDate]);
                                        dtTXPD.Rows[i][txpdDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtTXPD.Rows[i][txpdDate] = "";
                                    }
                                }
                            }
                            #endregion

                            #region hsn
                            if (dtHSN != null && dtHSN.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtHSN.Rows.Count; i++)
                                {
                                    if (i == 0)
                                        dtHSN.Columns.Add("Status");

                                    dtHSN.Rows[i]["Status"] = "Draft";

                                    if (Utility.HNSUQC(Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim()))
                                        dtHSN.Rows[i][hsnUQC] = Utility.StrHNSUQC(Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim());
                                    else
                                        dtHSN.Rows[i][hsnUQC] = "";
                                }
                            }
                            #endregion

                            #region doc
                            if (dtDOC != null && dtDOC.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtDOC.Rows.Count; i++)
                                {
                                    if (i == 0)
                                        dtDOC.Columns.Add("Status");

                                    dtDOC.Rows[i]["Status"] = "Draft";

                                    if (Utility.NatureOfDocument(Convert.ToString(dtDOC.Rows[i][docType]).Trim()))
                                        dtDOC.Rows[i][docType] = Utility.StrNatureOfDocument(Convert.ToString(dtDOC.Rows[i][docType]).Trim());
                                    else
                                        dtDOC.Rows[i][docType] = "";
                                }
                            }
                            #endregion
                            #endregion

                            #region Amendment files
                            #region b2ba

                            if (dtB2BA != null && dtB2BA.Rows.Count > 0)
                                for (int i = 0; i < dtB2BA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2BA = Utility.ChangeColumnDataType(dtB2BA, B2BA_POS, typeof(string));
                                        dtB2BA = Utility.ChangeColumnDataType(dtB2BA, B2BA_RevCharge, typeof(string));
                                        dtB2BA.Columns.Add("Status");
                                    }

                                    dtB2BA.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2BA.Rows[i][B2BA_POS]).Trim() != "")
                                        dtB2BA.Rows[i][B2BA_POS] = Utility.strValidStateName(Convert.ToString(dtB2BA.Rows[i][B2BA_POS]).Trim());

                                    if (Utility.b2bInvType(Convert.ToString(dtB2BA.Rows[i][B2BA_InvType]).Trim()))
                                        dtB2BA.Rows[i][B2BA_InvType] = Utility.Strb2bInvType(Convert.ToString(dtB2BA.Rows[i][B2BA_InvType]).Trim());
                                    else
                                        dtB2BA.Rows[i][B2BA_InvType] = "";

                                    if (Utility.reverseCharge(Convert.ToString(dtB2BA.Rows[i][B2BA_RevCharge]).Trim()))
                                        dtB2BA.Rows[i][B2BA_RevCharge] = Utility.StrreverseCharge(Convert.ToString(dtB2BA.Rows[i][B2BA_RevCharge]).Trim());
                                    else
                                        dtB2BA.Rows[i][B2BA_RevCharge] = "No";

                                    int sj = dtB2BA.Columns[B2BA_OrgInvDate].Ordinal;
                                    dtB2BA = Utility.ChangeColumnDataType(dtB2BA, dtB2BA.Columns[B2BA_OrgInvDate].ColumnName, typeof(string));
                                    dtB2BA.Columns[B2BA_OrgInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2BA.Rows[i][B2BA_OrgInvDate]);
                                        dtB2BA.Rows[i][B2BA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2BA.Rows[i][B2BA_OrgInvDate] = "";
                                    }

                                    sj = dtB2BA.Columns[B2BA_RevInvDate].Ordinal;
                                    dtB2BA = Utility.ChangeColumnDataType(dtB2BA, dtB2BA.Columns[B2BA_RevInvDate].ColumnName, typeof(string));
                                    dtB2BA.Columns[B2BA_RevInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2BA.Rows[i][B2BA_RevInvDate]);
                                        dtB2BA.Rows[i][B2BA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2BA.Rows[i][B2BA_RevInvDate] = "";
                                    }
                                }
                            #endregion

                            #region B2CLA
                            if (dtB2CLA != null && dtB2CLA.Rows.Count > 0)
                                for (int i = 0; i < dtB2CLA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CLA = Utility.ChangeColumnDataType(dtB2CLA, B2CLA_OrgPOS, typeof(string));
                                        dtB2CLA.Columns.Add("Status");
                                    }

                                    dtB2CLA.Rows[i]["Status"] = "Draft";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtB2CLA.Rows[i][B2CLA_OrgPOS]).Trim()))
                                    //    dtB2CLA.Rows[i][B2CLA_OrgPOS] = "";

                                    if (Convert.ToString(dtB2CLA.Rows[i][B2CLA_OrgPOS]).Trim() != "")
                                        dtB2CLA.Rows[i][B2CLA_OrgPOS] = Utility.strValidStateName(Convert.ToString(dtB2CLA.Rows[i][B2CLA_OrgPOS]).Trim());


                                    int sj = dtB2CLA.Columns[B2CLA_OrgInvDate].Ordinal;
                                    dtB2CLA = Utility.ChangeColumnDataType(dtB2CLA, dtB2CLA.Columns[B2CLA_OrgInvDate].ColumnName, typeof(string));
                                    dtB2CLA.Columns[B2CLA_OrgInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2CLA.Rows[i][B2CLA_OrgInvDate]);
                                        dtB2CLA.Rows[i][B2CLA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2CLA.Rows[i][B2CLA_OrgInvDate] = "";
                                    }

                                    sj = dtB2CLA.Columns[B2CLA_RevInvDate].Ordinal;
                                    dtB2CLA = Utility.ChangeColumnDataType(dtB2CLA, dtB2CLA.Columns[B2CLA_RevInvDate].ColumnName, typeof(string));
                                    dtB2CLA.Columns[B2CLA_RevInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2CLA.Rows[i][B2CLA_RevInvDate]);
                                        dtB2CLA.Rows[i][B2CLA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2CLA.Rows[i][B2CLA_RevInvDate] = "";
                                    }
                                }
                            #endregion

                            #region B2CSA
                            if (dtB2CSA != null && dtB2CSA.Rows.Count > 0)
                                for (int i = 0; i < dtB2CSA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CSA = Utility.ChangeColumnDataType(dtB2CSA, B2CSA_POS, typeof(string));
                                        dtB2CSA.Columns.Add("Status");
                                    }

                                    dtB2CSA.Rows[i]["Status"] = "Draft";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtB2CSA.Rows[i][B2CSA_POS]).Trim()))
                                    //    dtB2CSA.Rows[i][B2CSA_POS] = "";

                                    if (Convert.ToString(dtB2CSA.Rows[i][B2CSA_POS]).Trim() != "")
                                        dtB2CSA.Rows[i][B2CSA_POS] = Utility.strValidStateName(Convert.ToString(dtB2CSA.Rows[i][B2CSA_POS]).Trim());

                                    if (Convert.ToString(dtB2CSA.Rows[i][B2CSA_FinYear]).Trim() == "2017-18")
                                        dtB2CSA.Rows[i][B2CSA_FinYear] = "2017 - 2018";
                                    else if (Convert.ToString(dtB2CSA.Rows[i][B2CSA_FinYear]).Trim() == "2018-19")
                                        dtB2CSA.Rows[i][B2CSA_FinYear] = "2018 - 2019";
                                    else if (Convert.ToString(dtB2CSA.Rows[i][B2CSA_FinYear]).Trim() == "2019-20")
                                        dtB2CSA.Rows[i][B2CSA_FinYear] = "2019 - 2020";
                                    else
                                        dtB2CSA.Rows[i][B2CSA_FinYear] = "";

                                    if (Convert.ToString(dtB2CSA.Rows[i][B2CSA_OrgMonth]).Trim() != "")
                                    {
                                        dtB2CSA.Rows[i][B2CSA_OrgMonth] = dtB2CSA.Rows[i][B2CSA_OrgMonth].ToString().ToLower();
                                        dtB2CSA.Rows[i][B2CSA_OrgMonth] = char.ToUpper(dtB2CSA.Rows[i][B2CSA_OrgMonth].ToString()[0]) + dtB2CSA.Rows[i][B2CSA_OrgMonth].ToString().Substring(1); ;
                                    }
                                    else
                                        dtB2CSA.Rows[i][B2CSA_OrgMonth] = "";

                                    if (Convert.ToString(dtB2CSA.Rows[i][B2CSA_Type]).Trim().ToLower() == "e")
                                        dtB2CSA.Rows[i][B2CSA_Type] = "Ecom";
                                    else if (Convert.ToString(dtB2CSA.Rows[i][B2CSA_Type]).Trim().ToLower() == "oe")
                                        dtB2CSA.Rows[i][B2CSA_Type] = "Other than Ecom";

                                }
                            #endregion

                            #region exp
                            if (dtEXPA != null && dtEXPA.Rows.Count > 0)
                                for (int i = 0; i < dtEXPA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                        dtEXPA.Columns.Add("Status");

                                    dtEXPA.Rows[i]["Status"] = "Draft";

                                    if (Utility.TypeofExport(Convert.ToString(dtEXPA.Rows[i][EXPA_ExpType]).Trim()))
                                        dtEXPA.Rows[i][EXPA_ExpType] = Utility.StrTypeofExport(Convert.ToString(dtEXPA.Rows[i][EXPA_ExpType]).Trim());
                                    else
                                        dtEXPA.Rows[i][EXPA_ExpType] = "";

                                    int sj = dtEXPA.Columns[EXPA_OrgInvDate].Ordinal;
                                    dtEXPA = Utility.ChangeColumnDataType(dtEXPA, dtEXPA.Columns[EXPA_OrgInvDate].ColumnName, typeof(string));
                                    dtEXPA.Columns[EXPA_OrgInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXPA.Rows[i][EXPA_OrgInvDate]);
                                        dtEXPA.Rows[i][EXPA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXPA.Rows[i][EXPA_OrgInvDate] = "";
                                    }

                                    sj = dtEXPA.Columns[EXPA_RevInvDate].Ordinal;
                                    dtEXPA = Utility.ChangeColumnDataType(dtEXPA, dtEXPA.Columns[EXPA_RevInvDate].ColumnName, typeof(string));
                                    dtEXPA.Columns[EXPA_RevInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXPA.Rows[i][EXPA_RevInvDate]);
                                        dtEXPA.Rows[i][EXPA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXPA.Rows[i][EXPA_RevInvDate] = "";
                                    }

                                    sj = dtEXPA.Columns[EXPA_ShipDate].Ordinal;
                                    dtEXPA = Utility.ChangeColumnDataType(dtEXPA, dtEXPA.Columns[EXPA_ShipDate].ColumnName, typeof(string));
                                    dtEXPA.Columns[EXPA_ShipDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXPA.Rows[i][EXPA_ShipDate]);
                                        dtEXPA.Rows[i][EXPA_ShipDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXPA.Rows[i][EXPA_ShipDate] = "";
                                    }
                                }
                            #endregion

                            #region cdna
                            if (dtCDNA != null && dtCDNA.Rows.Count > 0)
                                for (int i = 0; i < dtCDNA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtCDNA.Columns.Add("Status");
                                    }

                                    dtCDNA.Rows[i]["Status"] = "Draft";

                                    if (Utility.b2burSupplyType(Convert.ToString(dtCDNA.Rows[i][CDNRA_SupType]).Trim()))
                                        dtCDNA.Rows[i][CDNRA_SupType] = Utility.Strb2burSupplyType(Convert.ToString(dtCDNA.Rows[i][CDNRA_SupType]).Trim());
                                    else
                                        dtCDNA.Rows[i][CDNRA_SupType] = "";

                                    if (Utility.CDN1TypesofNote(Convert.ToString(dtCDNA.Rows[i][CDNRA_DocType]).Trim()))
                                        dtCDNA.Rows[i][CDNRA_DocType] = Utility.StrCDN1TypesofNote(Convert.ToString(dtCDNA.Rows[i][CDNRA_DocType]).Trim());
                                    else
                                        dtCDNA.Rows[i][CDNRA_DocType] = "";

                                    if (Utility.CDN1PreGSTRegime(Convert.ToString(dtCDNA.Rows[i][CDNRA_PreGST]).Trim()))
                                        dtCDNA.Rows[i][CDNRA_PreGST] = Utility.StrCDN1PreGSTRegime(Convert.ToString(dtCDNA.Rows[i][CDNRA_PreGST]).Trim());
                                    else
                                        dtCDNA.Rows[i][CDNRA_PreGST] = "";

                                    int sj = dtCDNA.Columns[CDNRA_OrgRecDate].Ordinal;
                                    dtCDNA = Utility.ChangeColumnDataType(dtCDNA, dtCDNA.Columns[CDNRA_OrgRecDate].ColumnName, typeof(string));
                                    dtCDNA.Columns[CDNRA_OrgRecDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNA.Rows[i][CDNRA_OrgRecDate]);
                                        dtCDNA.Rows[i][CDNRA_OrgRecDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNA.Rows[i][CDNRA_OrgRecDate] = "";
                                    }

                                    sj = dtCDNA.Columns[CDNRA_RefVouDate].Ordinal;
                                    dtCDNA = Utility.ChangeColumnDataType(dtCDNA, dtCDNA.Columns[CDNRA_RefVouDate].ColumnName, typeof(string));
                                    dtCDNA.Columns[CDNRA_RefVouDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNA.Rows[i][CDNRA_RefVouDate]);
                                        dtCDNA.Rows[i][CDNRA_RefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNA.Rows[i][CDNRA_RefVouDate] = "";
                                    }

                                    sj = dtCDNA.Columns[CDNRA_OrgVouDate].Ordinal;
                                    dtCDNA = Utility.ChangeColumnDataType(dtCDNA, dtCDNA.Columns[CDNRA_OrgVouDate].ColumnName, typeof(string));
                                    dtCDNA.Columns[CDNRA_OrgVouDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNA.Rows[i][CDNRA_OrgVouDate]);
                                        dtCDNA.Rows[i][CDNRA_OrgVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNA.Rows[i][CDNRA_OrgVouDate] = "";
                                    }
                                }
                            #endregion

                            #region cdn-ura
                            if (dtCDNURA != null && dtCDNURA.Rows.Count > 0)
                                for (int i = 0; i < dtCDNURA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        //dtCDNURA = Utility.ChangeColumnDataType(dtCDNURA, cdnPOS, typeof(string));
                                        dtCDNURA.Columns.Add("Status");
                                    }

                                    dtCDNURA.Rows[i]["Status"] = "Draft";


                                    if (Utility.b2burSupplyType(Convert.ToString(dtCDNURA.Rows[i][CDNURA_SupType]).Trim()))
                                        dtCDNURA.Rows[i][CDNURA_SupType] = Utility.Strb2burSupplyType(Convert.ToString(dtCDNURA.Rows[i][CDNURA_SupType]).Trim());
                                    else
                                        dtCDNURA.Rows[i][CDNURA_SupType] = "";

                                    if (Utility.CDNUR1TypeofExport(Convert.ToString(dtCDNURA.Rows[i][CDNURA_URType]).Trim()))
                                        dtCDNURA.Rows[i][CDNURA_URType] = Utility.StrCDNUR1TypeofExport(Convert.ToString(dtCDNURA.Rows[i][CDNURA_URType]).Trim());
                                    else
                                        dtCDNURA.Rows[i][CDNURA_URType] = "";

                                    if (Utility.CDNUR1TypesofNote(Convert.ToString(dtCDNURA.Rows[i][CDNURA_DocType]).Trim()))
                                        dtCDNURA.Rows[i][CDNURA_DocType] = Utility.StrCDNUR1TypesofNote(Convert.ToString(dtCDNURA.Rows[i][CDNURA_DocType]).Trim());
                                    else
                                        dtCDNURA.Rows[i][CDNURA_DocType] = "";

                                    if (Utility.CDNUR1PreGSTRegime(Convert.ToString(dtCDNURA.Rows[i][CDNURA_PreGST]).Trim()))
                                        dtCDNURA.Rows[i][CDNURA_PreGST] = Utility.StrCDNUR1PreGSTRegime(Convert.ToString(dtCDNURA.Rows[i][CDNURA_PreGST]).Trim());
                                    else
                                        dtCDNURA.Rows[i][CDNURA_PreGST] = "";


                                    int sj = dtCDNURA.Columns[CDNURA_OrgRefVouDate].Ordinal;
                                    dtCDNURA = Utility.ChangeColumnDataType(dtCDNURA, dtCDNURA.Columns[CDNURA_OrgRefVouDate].ColumnName, typeof(string));
                                    dtCDNURA.Columns[CDNURA_OrgRefVouDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNURA.Rows[i][CDNURA_OrgRefVouDate]);
                                        dtCDNURA.Rows[i][CDNURA_OrgRefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNURA.Rows[i][CDNURA_OrgRefVouDate] = "";
                                    }

                                    sj = dtCDNURA.Columns[CDNURA_RefVouDate].Ordinal;
                                    dtCDNURA = Utility.ChangeColumnDataType(dtCDNURA, dtCDNURA.Columns[CDNURA_RefVouDate].ColumnName, typeof(string));
                                    dtCDNURA.Columns[CDNURA_RefVouDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNURA.Rows[i][CDNURA_RefVouDate]);
                                        dtCDNURA.Rows[i][CDNURA_RefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNURA.Rows[i][CDNURA_RefVouDate] = "";
                                    }

                                    sj = dtCDNURA.Columns[CDNURA_RecDate].Ordinal;
                                    dtCDNURA = Utility.ChangeColumnDataType(dtCDNURA, dtCDNURA.Columns[CDNURA_RecDate].ColumnName, typeof(string));
                                    dtCDNURA.Columns[CDNURA_RecDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNURA.Rows[i][CDNURA_RecDate]);
                                        dtCDNURA.Rows[i][CDNURA_RecDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNURA.Rows[i][CDNURA_RecDate] = "";
                                    }
                                }
                            #endregion

                            #region ata
                            if (dtATA != null && dtATA.Rows.Count > 0)
                                for (int i = 0; i < dtATA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtATA = Utility.ChangeColumnDataType(dtATA, ATA_OrgPOS, typeof(string));
                                        dtATA.Columns.Add("Status");
                                    }

                                    dtATA.Rows[i]["Status"] = "Draft";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtATA.Rows[i][ATA_OrgPOS]).Trim()))
                                    //    dtATA.Rows[i][ATA_OrgPOS] = "";
                                    //else
                                    //    dtATA.Rows[i][ATA_OrgPOS] = Convert.ToString(dtATA.Rows[i][ATA_OrgPOS]).Trim();

                                    if (Convert.ToString(dtATA.Rows[i][ATA_OrgPOS]).Trim() != "")
                                        dtATA.Rows[i][ATA_OrgPOS] = Utility.strValidStateName(Convert.ToString(dtATA.Rows[i][ATA_OrgPOS]).Trim());

                                    if (Convert.ToString(dtATA.Rows[i][ATA_FinYear]).Trim() == "2017-18")
                                        dtATA.Rows[i][ATA_FinYear] = "2017 - 2018";
                                    else if (Convert.ToString(dtATA.Rows[i][ATA_FinYear]).Trim() == "2018-19")
                                        dtATA.Rows[i][ATA_FinYear] = "2018 - 2019";
                                    else if (Convert.ToString(dtATA.Rows[i][ATA_FinYear]).Trim() == "2019-20")
                                        dtATA.Rows[i][ATA_FinYear] = "2019 - 2020";
                                    else
                                        dtATA.Rows[i][ATA_FinYear] = "";

                                    if (Convert.ToString(dtATA.Rows[i][ATA_OrgMonth]).Trim() != "")
                                    {
                                        dtATA.Rows[i][ATA_OrgMonth] = dtATA.Rows[i][ATA_OrgMonth].ToString().ToLower();
                                        dtATA.Rows[i][ATA_OrgMonth] = char.ToUpper(dtATA.Rows[i][ATA_OrgMonth].ToString()[0]) + dtATA.Rows[i][ATA_OrgMonth].ToString().Substring(1); ;
                                    }
                                    else
                                        dtATA.Rows[i][ATA_OrgMonth] = "";

                                }
                            #endregion

                            #region txpda
                            if (dtTXPDA != null && dtTXPDA.Rows.Count > 0)
                                for (int i = 0; i < dtTXPDA.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtTXPDA = Utility.ChangeColumnDataType(dtTXPDA, ATADJA_OrgPOS, typeof(string));
                                        dtTXPDA.Columns.Add("Status");
                                    }

                                    dtTXPDA.Rows[i]["Status"] = "Draft";

                                    //if (!CommonHelper.ValidateStateName(Convert.ToString(dtTXPDA.Rows[i][ATADJA_OrgPOS]).Trim()))
                                    //    dtTXPDA.Rows[i][ATADJA_OrgPOS] = "";
                                    //else
                                    //    dtTXPDA.Rows[i][ATADJA_OrgPOS] = Convert.ToString(dtTXPDA.Rows[i][ATADJA_OrgPOS]).Trim();

                                    if (Convert.ToString(dtTXPDA.Rows[i][ATADJA_OrgPOS]).Trim() != "")
                                        dtTXPDA.Rows[i][ATADJA_OrgPOS] = Utility.strValidStateName(Convert.ToString(dtTXPDA.Rows[i][ATADJA_OrgPOS]).Trim());


                                    if (Convert.ToString(dtTXPDA.Rows[i][ATADJA_FinYear]).Trim() == "2017-18")
                                        dtTXPDA.Rows[i][ATADJA_FinYear] = "2017 - 2018";
                                    else if (Convert.ToString(dtTXPDA.Rows[i][ATADJA_FinYear]).Trim() == "2018-19")
                                        dtTXPDA.Rows[i][ATADJA_FinYear] = "2018 - 2019";
                                    else if (Convert.ToString(dtTXPDA.Rows[i][ATADJA_FinYear]).Trim() == "2019-20")
                                        dtTXPDA.Rows[i][ATADJA_FinYear] = "2019 - 2020";
                                    else
                                        dtTXPDA.Rows[i][ATADJA_FinYear] = "";

                                    if (Convert.ToString(dtTXPDA.Rows[i][ATADJA_OrgMonth]).Trim() != "")
                                    {
                                        dtTXPDA.Rows[i][ATADJA_OrgMonth] = dtTXPDA.Rows[i][ATADJA_OrgMonth].ToString().ToLower();
                                        dtTXPDA.Rows[i][ATADJA_OrgMonth] = char.ToUpper(dtTXPDA.Rows[i][ATADJA_OrgMonth].ToString()[0]) + dtTXPDA.Rows[i][ATADJA_OrgMonth].ToString().Substring(1); ;
                                    }
                                    else
                                        dtTXPDA.Rows[i][ATADJA_OrgMonth] = "";
                                }
                            #endregion
                            #endregion

                            #endregion


                            #region Data Entry

                            Application.DoEvents();
                            #region Regular Data Entry
                            #region B2b
                            if (dtB2B != null && dtB2B.Rows.Count > 0)
                            {
                                dtB2B = dtColTypeChange(dtB2B);

                                DataRow dr = dtB2B.NewRow();
                                dr[b2bInvNo] = dtB2B.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2bInvNo]).Trim() != "").GroupBy(x => x[b2bInvNo]).Select(x => x.First()).Distinct().Count();
                                dr[b2bInvVal] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bInvVal] != null).Sum(x => x[b2bInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bInvVal])).ToString();
                                dr[b2bTax] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bTax] != null).Sum(x => x[b2bTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bTax])).ToString();
                                dr[b2bIGST] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bIGST] != null).Sum(x => x[b2bIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bIGST])).ToString();
                                dr[b2bCGST] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bCGST] != null).Sum(x => x[b2bCGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bCGST])).ToString();
                                dr[b2bSGST] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bSGST] != null).Sum(x => x[b2bSGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bSGST])).ToString();
                                dr[b2bCESS] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bCESS] != null).Sum(x => x[b2bCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bCESS])).ToString();
                                dr["Status"] = "Total";
                                dtB2B.Rows.Add(dr);

                                _result = objGSTR5.GSTR15ExcelBulkEntry(dtB2B, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2B error in importing..!\n"; }
                            }
                            #endregion

                            #region B2c
                            /*
                            if (dtB2C != null && dtB2C.Rows.Count > 0)
                            {
                                dtB2C = dtColTypeChange(dtB2C);

                                DataRow dr32 = dtB2C.NewRow();
                                dr32[b2cInvNo] = dtB2C.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2cInvNo]).Trim() != "").GroupBy(x => x[b2cInvNo]).Select(x => x.First()).Distinct().Count();
                                dr32[b2cInvVal] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2cInvVal] != null).Sum(x => x[b2cInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2cInvVal])).ToString();
                                dr32[b2cTax] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2cTax] != null).Sum(x => x[b2cTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2cTax])).ToString();
                                dr32[b2cIGST] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2cIGST] != null).Sum(x => x[b2cIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2cIGST])).ToString();
                                dr32[b2cCGST] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2cCGST] != null).Sum(x => x[b2cCGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2cCGST])).ToString();
                                dr32[b2cSGST] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2cSGST] != null).Sum(x => x[b2cSGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2cSGST])).ToString();
                                dr32[b2cCESS] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2cCESS] != null).Sum(x => x[b2cCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2cCESS])).ToString();
                                dr32["Status"] = "Total";
                                dtB2C.Rows.Add(dr32);

                                _result = 0;
                                _result = objGSTR5.GSTRB2CExcelBulkEntry(dtB2C, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2C data entry error..!\n"; }
                            }
                            */
                            #endregion

                            #region b2cl

                            if (dtB2CL != null && dtB2CL.Rows.Count > 0)
                            {
                                dtB2CL = dtColTypeChange(dtB2CL);

                                DataRow dr11 = dtB2CL.NewRow();
                                dr11[b2clInvoiceNo] = dtB2CL.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2clInvoiceNo]).Trim() != "").GroupBy(x => x[b2clInvoiceNo]).Select(x => x.First()).Distinct().Count();
                                dr11[b2clInvoiceValue] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clInvoiceValue] != null).Sum(x => x[b2clInvoiceValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clInvoiceValue])).ToString();
                                dr11[b2clTaxableValue] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clTaxableValue] != null).Sum(x => x[b2clTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clTaxableValue])).ToString();
                                dr11[b2clIGSTAmount] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clIGSTAmount] != null).Sum(x => x[b2clIGSTAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clIGSTAmount])).ToString();
                                dr11[b2clCESSAmount] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clCESSAmount] != null).Sum(x => x[b2clCESSAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESSAmount])).ToString();
                                dr11["Status"] = "Total";
                                dtB2CL.Rows.Add(dr11);

                                _result = 0;
                                _result = objGSTR5.GSTRB2CLargeExcelBulkEntry(dtB2CL, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CL data entry error..!\n"; }
                            }
                            #endregion

                            #region b2cs

                            if (dtB2CS != null && dtB2CS.Rows.Count > 0)
                            {
                                dtB2CS = dtColTypeChange(dtB2CS);

                                DataRow dr12 = dtB2CS.NewRow();

                                #region Rate Count
                                var result2 = (from row in dtB2CS.AsEnumerable()
                                               where row.Field<string>(b2csPlaceOfSupply) != "" && row.Field<string>(b2csRate) != ""
                                               group row by new { Fld_POS = row.Field<string>(b2csPlaceOfSupply), Fld_Rate = row.Field<string>(b2csRate) } into grp
                                               select new
                                               {
                                                   Fld_POS = grp.Key.Fld_POS,
                                                   Fld_Rate = grp.Key.Fld_Rate
                                               }).ToList();

                                if (result2.Count != null && result2.Count > 0)
                                    dr12[b2csRate] = result2.Count;
                                else
                                    dr12[b2csRate] = 0;
                                #endregion

                                dr12[b2csTaxableValue] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csTaxableValue] != null).Sum(x => x[b2csTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csTaxableValue])).ToString();
                                dr12[b2csIGSTAmount] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csIGSTAmount] != null).Sum(x => x[b2csIGSTAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csIGSTAmount])).ToString();
                                dr12[b2csCESSAmount] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csCESSAmount] != null).Sum(x => x[b2csCESSAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csCESSAmount])).ToString();
                                dr12[b2csCGSTAmount] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csCGSTAmount] != null).Sum(x => x[b2csCGSTAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csCGSTAmount])).ToString();
                                dr12[b2csSGSTAmount] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csSGSTAmount] != null).Sum(x => x[b2csSGSTAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csSGSTAmount])).ToString();
                                dr12["Status"] = "Total";
                                dtB2CS.Rows.Add(dr12);

                                _result = 0;
                                _result = objGSTR5.GSTR1B2CSmalllBulkEntry(dtB2CS, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CS data entry error..!\n"; }
                            }
                            #endregion

                            #region Export
                            if (dtEXP != null && dtEXP.Rows.Count > 0)
                            {
                                dtEXP = dtColTypeChange(dtEXP);

                                DataRow dr4 = dtEXP.NewRow();
                                dr4[expInvNo] = dtEXP.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[expInvNo]).Trim() != "").GroupBy(x => x[expInvNo]).Select(x => x.First()).Distinct().Count();
                                dr4[expInvVal] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvVal] != null).Sum(x => x[expInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvVal])).ToString();
                                dr4[expTax] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expTax] != null).Sum(x => x[expTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expTax])).ToString();
                                dr4[expIGST] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expIGST] != null).Sum(x => x[expIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expIGST])).ToString();
                                dr4[expCESS] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expCESS] != null).Sum(x => x[expCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expCESS])).ToString();
                                dr4["Status"] = "Total";
                                dtEXP.Rows.Add(dr4);

                                _result = 0;
                                _result = objGSTR5.GSTR16newExcelBulkEntry(dtEXP, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "EXP data entry error..!\n"; }
                            }
                            #endregion

                            #region cdn
                            if (dtCDNR != null && dtCDNR.Rows.Count > 0)
                            {
                                dtCDNR = dtColTypeChange(dtCDNR);

                                DataRow dr5 = dtCDNR.NewRow();
                                dr5[cdnInvNo] = dtCDNR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnInvNo]).Trim() != "").GroupBy(x => x[cdnInvNo]).Select(x => x.First()).Distinct().Count();
                                dr5[cdnInvVal] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnInvVal] != null).Sum(x => x[cdnInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnInvVal])).ToString();
                                dr5[cdnTax] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnTax] != null).Sum(x => x[cdnTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnTax])).ToString();
                                dr5[cdnIGST] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnIGST] != null).Sum(x => x[cdnIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnIGST])).ToString();
                                dr5[cdnCGST] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnCGST] != null).Sum(x => x[cdnCGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnCGST])).ToString();
                                dr5[cdnSGST] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnSGST] != null).Sum(x => x[cdnSGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnSGST])).ToString();
                                dr5[cdnCESS] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnCESS] != null).Sum(x => x[cdnCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnCESS])).ToString();
                                dr5["Status"] = "Total";
                                dtCDNR.Rows.Add(dr5);

                                _result = 0;
                                _result = objGSTR5.GSTR18OExcelBulkEntry(dtCDNR, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "CDNR data entry error..!\n"; }
                            }
                            #endregion

                            #region cdn-ur
                            if (dtCDNUR != null && dtCDNUR.Rows.Count > 0)
                            {
                                dtCDNUR = dtColTypeChange(dtCDNUR);

                                DataRow dr5 = dtCDNUR.NewRow();
                                dr5[cdnInvNo] = dtCDNUR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnInvNo]).Trim() != "").GroupBy(x => x[cdnInvNo]).Select(x => x.First()).Distinct().Count();
                                dr5[cdnInvVal] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnInvVal] != null).Sum(x => x[cdnInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnInvVal])).ToString();
                                dr5[cdnTax] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnTax] != null).Sum(x => x[cdnTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnTax])).ToString();
                                dr5[cdnIGST] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnIGST] != null).Sum(x => x[cdnIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnIGST])).ToString();
                                dr5[cdnCGST] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnCGST] != null).Sum(x => x[cdnCGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnCGST])).ToString();
                                dr5[cdnSGST] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnSGST] != null).Sum(x => x[cdnSGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnSGST])).ToString();
                                dr5[cdnCESS] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnCESS] != null).Sum(x => x[cdnCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnCESS])).ToString();
                                dr5["Status"] = "Total";
                                dtCDNUR.Rows.Add(dr5);

                                _result = 0;
                                _result = objGSTR5.GSTR1CDNURExcelBulkEntry(dtCDNUR, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "CDNR data entry error..!\n"; }
                            }
                            #endregion

                            #region nilrated
                            if (dtNIL != null && dtNIL.Rows.Count > 0)
                            {
                                DataRow drNil = dtNIL.NewRow();
                                drNil[nilInvNo] = dtNIL.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[nilInvNo]).Trim() != "").GroupBy(x => x[nilInvNo]).Select(x => x.First()).Distinct().Count();
                                drNil[nilInvVal] = dtNIL.Rows.Cast<DataRow>().Where(x => x[nilInvVal] != null).Sum(x => x[nilInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[nilInvVal])).ToString();
                                drNil["Status"] = "Total";
                                dtNIL.Rows.Add(drNil);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ExcelNilmaultiRated(dtNIL, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "NIL Maulti data entry error..!\n"; }

                                foreach (DataColumn col in dtNIL.Columns)
                                {
                                    if (col.ColumnName == nilType)
                                        col.ColumnName = "colType";
                                    if (col.ColumnName == nilGSTIN)
                                        col.ColumnName = "colGSTIN";
                                    if (col.ColumnName == nilInvVal)
                                        col.ColumnName = "colInvoiceValue";
                                    if (col.ColumnName == nilPOS)
                                        col.ColumnName = "colPlaceSupply";
                                }

                                DataTable dt = new DataTable();
                                dt = BindGridDataToMainGrid(dtNIL);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ExcelNilRated(dt, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "NIL data entry error..!\n"; }
                            }
                            #endregion

                            #region grossadvance
                            if (dtAT != null && dtAT.Rows.Count > 0)
                            {
                                dtAT = dtColTypeChange(dtAT);

                                DataRow dr6 = dtAT.NewRow();

                                #region POS Count
                                var result2 = (from row in dtAT.AsEnumerable()
                                               where row.Field<string>(atPOS) != ""
                                               group row by new { Fld_POS = row.Field<string>(atPOS) } into grp
                                               select new
                                               {
                                                   Fld_POS = grp.Key.Fld_POS,
                                               }).ToList();

                                if (result2.Count != null && result2.Count > 0)
                                    dr6[atPOS] = result2.Count;
                                else
                                    dr6[atPOS] = 0;
                                #endregion

                                dr6[atInvNo] = dtAT.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[atInvNo]).Trim() != "").GroupBy(x => x[atInvNo]).Select(x => x.First()).Distinct().Count();
                                dr6[atInvVal] = dtAT.Rows.Cast<DataRow>().Where(x => x[atInvVal] != null).Sum(x => x[atInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atInvVal])).ToString();
                                dr6[atIGST] = dtAT.Rows.Cast<DataRow>().Where(x => x[atIGST] != null).Sum(x => x[atIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atIGST])).ToString();
                                dr6[atCGST] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCGST] != null).Sum(x => x[atCGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCGST])).ToString();
                                dr6[atSGST] = dtAT.Rows.Cast<DataRow>().Where(x => x[atSGST] != null).Sum(x => x[atSGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atSGST])).ToString();
                                dr6[atCESS] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCESS] != null).Sum(x => x[atCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCESS])).ToString();
                                dr6["Status"] = "Total";
                                dtAT.Rows.Add(dr6);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ExcelGAdvance(dtAT, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "AT data entry error..!\n"; }
                            }
                            #endregion

                            #region netadvance
                            if (dtTXPD != null && dtTXPD.Rows.Count > 0)
                            {
                                dtTXPD = dtColTypeChange(dtTXPD);

                                DataRow dr7 = dtTXPD.NewRow();

                                #region POS Count
                                var result2 = (from row in dtTXPD.AsEnumerable()
                                               where row.Field<string>(txpdPOS) != ""
                                               group row by new { Fld_POS = row.Field<string>(txpdPOS) } into grp
                                               select new
                                               {
                                                   Fld_POS = grp.Key.Fld_POS,
                                               }).ToList();

                                if (result2.Count != null && result2.Count > 0)
                                    dr7[txpdPOS] = result2.Count;
                                else
                                    dr7[txpdPOS] = 0;
                                #endregion

                                dr7[txpdInvNo] = dtTXPD.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[txpdInvNo]).Trim() != "").GroupBy(x => x[txpdInvNo]).Select(x => x.First()).Distinct().Count();
                                dr7[txpdInvVal] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdInvVal] != null).Sum(x => x[txpdInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdInvVal])).ToString();
                                dr7[txpdIGST] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdIGST] != null).Sum(x => x[txpdIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdIGST])).ToString();
                                dr7[txpdCGST] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCGST] != null).Sum(x => x[txpdCGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCGST])).ToString();
                                dr7[txpdSGST] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdSGST] != null).Sum(x => x[txpdSGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdSGST])).ToString();
                                dr7[txpdCESS] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCESS] != null).Sum(x => x[txpdCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCESS])).ToString();
                                dr7["Status"] = "Total";
                                dtTXPD.Rows.Add(dr7);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ExcelNetAdvance(dtTXPD, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "TXPD data entry error..!\n"; }
                            }
                            #endregion

                            #region hsn
                            if (dtHSN != null && dtHSN.Rows.Count > 0)
                            {
                                dtHSN = dtColTypeChange(dtHSN);

                                DataRow dr8 = dtHSN.NewRow();
                                dr8[hsnInvVal] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnInvVal] != null).Sum(x => x[hsnInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnInvVal])).ToString();
                                dr8[hsnTax] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTax] != null).Sum(x => x[hsnTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTax])).ToString();
                                dr8[hsnIGST] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnIGST] != null).Sum(x => x[hsnIGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnIGST])).ToString();
                                dr8[hsnCGST] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCGST] != null).Sum(x => x[hsnCGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCGST])).ToString();
                                dr8[hsnSGST] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnSGST] != null).Sum(x => x[hsnSGST].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnSGST])).ToString();
                                dr8[hsnCESS] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCESS] != null).Sum(x => x[hsnCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCESS])).ToString();
                                dr8["Status"] = "Total";
                                dtHSN.Rows.Add(dr8);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ExcelHSNSummaryBulkEntry(dtHSN, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "HSN data entry error..!\n"; }
                            }
                            #endregion

                            #region numbering
                            if (dtDOC != null && dtDOC.Rows.Count > 0)
                            {
                                dtDOC = dtColTypeChange(dtDOC);

                                DataRow dr9 = dtDOC.NewRow();
                                dr9[docTotal] = dtDOC.Rows.Cast<DataRow>().Where(x => x[docTotal] != null).Sum(x => x[docTotal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[docTotal])).ToString();
                                dr9[docCancel] = dtDOC.Rows.Cast<DataRow>().Where(x => x[docCancel] != null).Sum(x => x[docCancel].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[docCancel])).ToString();
                                dr9[docNet] = dtDOC.Rows.Cast<DataRow>().Where(x => x[docNet] != null).Sum(x => x[docNet].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[docNet])).ToString();
                                dr9["Status"] = "Total";
                                dtDOC.Rows.Add(dr9);

                                _result = 0;
                                _result = objGSTR5.GSTR13ExcelBulkEntry(dtDOC, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "DOC data entry error..!\n"; }
                            }
                            #endregion
                            #endregion

                            Application.DoEvents();

                            #region Amedment Data Entry
                            #region B2BA

                            if (dtB2BA != null && dtB2BA.Rows.Count > 0)
                            {
                                DataRow drB2bA = dtB2BA.NewRow();
                                drB2bA[B2BA_OrgInvNo] = dtB2BA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2BA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_RevInvNo] = dtB2BA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_RevInvNo]).Trim() != "").GroupBy(x => x[B2BA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_InvVal] = dtB2BA.Rows.Cast<DataRow>().Where(x => x[B2BA_InvVal] != null).Sum(x => x[B2BA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_InvVal])).ToString();
                                drB2bA[B2BA_TaxVal] = dtB2BA.Rows.Cast<DataRow>().Where(x => x[B2BA_TaxVal] != null).Sum(x => x[B2BA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_TaxVal])).ToString();
                                drB2bA["IGST Amount"] = dtB2BA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drB2bA["CGST Amount"] = dtB2BA.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drB2bA["SGST Amount"] = dtB2BA.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drB2bA[B2BA_Cess] = dtB2BA.Rows.Cast<DataRow>().Where(x => x[B2BA_Cess] != null).Sum(x => x[B2BA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_Cess])).ToString();
                                drB2bA["Status"] = "Total";
                                dtB2BA.Rows.Add(drB2bA);

                                _result = objGSTR5.GSTR1_B2BA_ExcBulkEntry(dtB2BA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2BA data entry error..!\n"; }
                            }
                            #endregion

                            #region b2clA

                            if (dtB2CLA != null && dtB2CLA.Rows.Count > 0)
                            {
                                DataRow drb2CLA = dtB2CLA.NewRow();
                                drb2CLA[B2CLA_OrgInvNo] = dtB2CLA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2CLA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_RevInvNo] = dtB2CLA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_RevInvNo]).Trim() != "").GroupBy(x => x[B2CLA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_InvVal] = dtB2CLA.Rows.Cast<DataRow>().Where(x => x[B2CLA_InvVal] != null).Sum(x => x[B2CLA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_InvVal])).ToString();
                                drb2CLA[B2CLA_TaxVal] = dtB2CLA.Rows.Cast<DataRow>().Where(x => x[B2CLA_TaxVal] != null).Sum(x => x[B2CLA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_TaxVal])).ToString();
                                drb2CLA["IGST Amount"] = dtB2CLA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CLA[b2clCESSAmount] = dtB2CLA.Rows.Cast<DataRow>().Where(x => x[b2clCESSAmount] != null).Sum(x => x[b2clCESSAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESSAmount])).ToString();
                                drb2CLA["Status"] = "Total";
                                dtB2CLA.Rows.Add(drb2CLA);

                                _result = 0;

                                _result = objGSTR5.GSTR1_B2CLA_ExcBulkEntry(dtB2CLA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CLA data entry error..!\n"; }
                            }
                            #endregion

                            #region b2csA
                            if (dtB2CSA != null && dtB2CSA.Rows.Count > 0)
                            {
                                DataRow drb2CSA = dtB2CSA.NewRow();
                                drb2CSA[B2CSA_TaxVal] = dtB2CSA.Rows.Cast<DataRow>().Where(x => x[B2CSA_TaxVal] != null).Sum(x => x[B2CSA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_TaxVal])).ToString();
                                drb2CSA["IGST Amount"] = dtB2CSA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CSA["CGST Amount"] = dtB2CSA.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2CSA["SGST Amount"] = dtB2CSA.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2CSA[B2CSA_Cess] = dtB2CSA.Rows.Cast<DataRow>().Where(x => x[B2CSA_Cess] != null).Sum(x => x[B2CSA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_Cess])).ToString();
                                drb2CSA["Status"] = "Total";
                                dtB2CSA.Rows.Add(drb2CSA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_B2CSA_ExcBulkEntry(dtB2CSA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CSA data entry error..!\n"; }
                            }
                            #endregion

                            #region ExportA

                            if (dtEXPA != null && dtEXPA.Rows.Count > 0)
                            {
                                DataRow drExpA = dtEXPA.NewRow();
                                drExpA[EXPA_OrgInvNo] = dtEXPA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_OrgInvNo]).Trim() != "").GroupBy(x => x[EXPA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_RevInvNo] = dtEXPA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_RevInvNo]).Trim() != "").GroupBy(x => x[EXPA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_InvVal] = dtEXPA.Rows.Cast<DataRow>().Where(x => x[EXPA_InvVal] != null).Sum(x => x[EXPA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_InvVal])).ToString();
                                drExpA[EXPA_TaxVal] = dtEXPA.Rows.Cast<DataRow>().Where(x => x[EXPA_TaxVal] != null).Sum(x => x[EXPA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_TaxVal])).ToString();
                                drExpA["IGST Amount"] = dtEXPA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drExpA["Cess Amount"] = dtEXPA.Rows.Cast<DataRow>().Where(x => x["Cess Amount"] != null).Sum(x => x["Cess Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cess Amount"])).ToString();
                                drExpA["Status"] = "Total";
                                dtEXPA.Rows.Add(drExpA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_EXPA_ExcBulkEntry(dtEXPA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "EXPA data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnA

                            if (dtCDNA != null && dtCDNA.Rows.Count > 0)
                            {
                                DataRow drCDNRA = dtCDNA.NewRow();
                                drCDNRA[CDNRA_OrgRecNo] = dtCDNA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_OrgVouNo] = dtCDNA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgVouNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouNo] = dtCDNA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_RefVouNo]).Trim() != "").GroupBy(x => x[CDNRA_RefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouVal] = dtCDNA.Rows.Cast<DataRow>().Where(x => x[CDNRA_RefVouVal] != null).Sum(x => x[CDNRA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_RefVouVal])).ToString();
                                drCDNRA[CDNRA_TaxVal] = dtCDNA.Rows.Cast<DataRow>().Where(x => x[CDNRA_TaxVal] != null).Sum(x => x[CDNRA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_TaxVal])).ToString();
                                drCDNRA[CDNRA_Cess] = dtCDNA.Rows.Cast<DataRow>().Where(x => x[CDNRA_Cess] != null).Sum(x => x[CDNRA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_Cess])).ToString();
                                drCDNRA["CGST Amount"] = dtCDNA.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNRA["SGST Amount"] = dtCDNA.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNRA["IGST Amount"] = dtCDNA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNRA["Status"] = "Total";
                                dtCDNA.Rows.Add(drCDNRA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNRA_ExcBulkEntry(dtCDNA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "CDNR data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnurA

                            if (dtCDNURA != null && dtCDNURA.Rows.Count > 0)
                            {
                                DataRow drCDNURA = dtCDNURA.NewRow();
                                drCDNURA[CDNURA_OrgRecNo] = dtCDNURA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_OrgRefVouNo] = dtCDNURA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRefVouNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefNo] = dtCDNURA.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_RefNo]).Trim() != "").GroupBy(x => x[CDNURA_RefNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefVouVal] = dtCDNURA.Rows.Cast<DataRow>().Where(x => x[CDNURA_RefVouVal] != null).Sum(x => x[CDNURA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_RefVouVal])).ToString();
                                drCDNURA[CDNURA_TaxVal] = dtCDNURA.Rows.Cast<DataRow>().Where(x => x[CDNURA_TaxVal] != null).Sum(x => x[CDNURA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_TaxVal])).ToString();
                                drCDNURA[CDNURA_Cess] = dtCDNURA.Rows.Cast<DataRow>().Where(x => x[CDNURA_Cess] != null).Sum(x => x[CDNURA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_Cess])).ToString();
                                drCDNURA["CGST Amount"] = dtCDNURA.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNURA["SGST Amount"] = dtCDNURA.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNURA["IGST Amount"] = dtCDNURA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNURA["Status"] = "Total";
                                dtCDNURA.Rows.Add(drCDNURA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNURA_ExcBulkEntry(dtCDNURA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "cdnura data entry error..!\n"; }
                            }
                            #endregion

                            #region ATA

                            if (dtATA != null && dtATA.Rows.Count > 0)
                            {
                                DataRow drATA = dtATA.NewRow();
                                drATA["IGST Amount"] = dtATA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drATA["CGST Amount"] = dtATA.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drATA["SGST Amount"] = dtATA.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drATA[atCESS] = dtATA.Rows.Cast<DataRow>().Where(x => x[atCESS] != null).Sum(x => x[atCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCESS])).ToString();
                                drATA["Status"] = "Total";
                                dtATA.Rows.Add(drATA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATA_ExcBulkEntry(dtATA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "ATA data entry error..!\n"; }
                            }
                            #endregion

                            #region ATDA

                            if (dtTXPDA != null && dtTXPDA.Rows.Count > 0)
                            {
                                DataRow drATDA = dtTXPDA.NewRow();
                                drATDA["IGST Amount"] = dtTXPDA.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drATDA["CGST Amount"] = dtTXPDA.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drATDA["SGST Amount"] = dtTXPDA.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drATDA[ATADJA_Cess] = dtTXPDA.Rows.Cast<DataRow>().Where(x => x[ATADJA_Cess] != null).Sum(x => x[ATADJA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[ATADJA_Cess])).ToString();
                                drATDA["Status"] = "Total";
                                dtTXPDA.Rows.Add(drATDA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATADJA_ExcBulkEntry(dtTXPDA, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "atadja data entry error..!\n"; }
                            }
                            #endregion

                            #endregion

                            #endregion

                            pbGSTR1.Visible = false;

                            if (_str != "")
                            {
                                CommonHelper.ErrorList = Convert.ToString(_str);
                                SPQErrorList obj = new SPQErrorList();
                                obj.ShowDialog();
                            }
                            else
                            {
                                MessageBox.Show("Data imported successfully...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                Getdata();
                                GetGSTR1VsGSTR3B();
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Please choose .xls or .xlsx file only.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error); //custom messageBox to show error  
                    }
                }
            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
            finally
            {
                pbGSTR1.Visible = false;
            }
        }

        private void msImpTally_Click(object sender, EventArgs e)
        {
            try
            {
                pbGSTR1.Visible = true;
                string filePath = string.Empty; string fileExt = string.Empty;
                string conn = string.Empty, _str = string.Empty;

                //open dialog to choose file
                OpenFileDialog file = new OpenFileDialog();
                if (file.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    // get file name and extention of selected file
                    filePath = file.FileName;
                    fileExt = Path.GetExtension(filePath);

                    // check selected file extention
                    if (fileExt.CompareTo(".xls") == 0 || fileExt.CompareTo(".xlsx") == 0)
                    {
                        #region if impoted file is open then close open file
                        foreach (Process proc in System.Diagnostics.Process.GetProcessesByName("EXCEL"))
                        {
                            if (proc.MainWindowTitle == "Microsoft Excel - " + file.SafeFileName)
                                proc.Kill();
                        }
                        #endregion

                        #region connection string
                        if (fileExt.CompareTo(".xls") == 0)
                            conn = @"provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 8.0;TypeGuessRows=0;ImportMixedTypes=Text';"; //for below excel 2007  
                        else
                            conn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0 Xml;HDR=Yes;IMEX=1;TypeGuessRows=0;ImportMixedTypes=Text'"; //for above excel 2007  
                        #endregion

                        pbGSTR1.Visible = true;
                        using (OleDbConnection con = new OleDbConnection(conn))
                        {
                            #region Get Data
                            DataSet dsB2B = new DataSet();
                            DataSet dsB2C = new DataSet();
                            DataSet dsB2CL = new DataSet();
                            DataSet dsB2CS = new DataSet();
                            DataSet dsEXP = new DataSet();
                            DataSet dsNilRt = new DataSet();
                            DataSet dsCDNR = new DataSet();
                            DataSet dsCDNUR = new DataSet();
                            DataSet dsAT = new DataSet();
                            DataSet dsATD = new DataSet();
                            DataSet dsHSN = new DataSet();
                            DataSet dsDOC = new DataSet();

                            // For Amendment
                            //DataSet dsb2ba = new DataSet();
                            //DataSet dsb2cla = new DataSet();
                            //DataSet dsb2csa = new DataSet();
                            //DataSet dscdnra = new DataSet();
                            //DataSet dscdnura = new DataSet();
                            //DataSet dsexpa = new DataSet();
                            //DataSet dsata = new DataSet();
                            //DataSet dsatadja = new DataSet();

                            DataTable dtB2B = new DataTable();
                            DataTable dtB2C = new DataTable();
                            DataTable dtB2CL = new DataTable();
                            DataTable dtB2CS = new DataTable();
                            DataTable dtEXP = new DataTable();
                            DataTable dtCDNR = new DataTable();
                            DataTable dtAT = new DataTable();
                            DataTable dtTXPD = new DataTable();
                            DataTable dtHSN = new DataTable();
                            DataTable dtDOC = new DataTable();
                            DataTable dtATD = new DataTable();
                            DataTable dtNilRt = new DataTable();
                            DataTable dtCDNUR = new DataTable();

                            // For Amendment
                            //DataTable dtb2ba = new DataTable();
                            //DataTable dtb2cla = new DataTable();
                            //DataTable dtb2csa = new DataTable();
                            //DataTable dtcdnra = new DataTable();
                            //DataTable dtcdnura = new DataTable();
                            //DataTable dtexpa = new DataTable();
                            //DataTable dtata = new DataTable();
                            //DataTable dtatadja = new DataTable();



                            Application.DoEvents();

                            OleDbDataAdapter oleda = new OleDbDataAdapter("SELECT * FROM [b2b$]", conn);
                            try
                            { oleda.Fill(dsB2B, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda1 = new OleDbDataAdapter("SELECT * FROM [b2cl$]", conn);
                            try
                            { oleda1.Fill(dsB2CL, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda2 = new OleDbDataAdapter("SELECT * FROM [b2cs$]", conn);
                            try
                            { oleda2.Fill(dsB2CS, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda3 = new OleDbDataAdapter("SELECT * FROM [exp$]", conn);
                            try
                            { oleda3.Fill(dsEXP, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda4 = new OleDbDataAdapter("SELECT * FROM [cdnr$]", conn);
                            try
                            { oleda4.Fill(dsCDNR, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda5 = new OleDbDataAdapter("SELECT * FROM [at$]", conn);
                            try
                            { oleda5.Fill(dsAT, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda6 = new OleDbDataAdapter("SELECT * FROM [hsn$]", conn);
                            try
                            { oleda6.Fill(dsHSN, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda7 = new OleDbDataAdapter("SELECT * FROM [docs$]", conn);
                            try
                            { oleda7.Fill(dsDOC, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda8 = new OleDbDataAdapter("SELECT * FROM [atadj$]", conn);
                            try
                            { oleda8.Fill(dsATD, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda9 = new OleDbDataAdapter("SELECT * FROM [exemp$]", conn);
                            try
                            { oleda9.Fill(dsNilRt, "GSTR1"); }
                            catch (Exception)
                            { }

                            OleDbDataAdapter oleda10 = new OleDbDataAdapter("SELECT * FROM [cdnur$]", conn);
                            try
                            { oleda10.Fill(dsCDNUR, "GSTR1"); }
                            catch (Exception)
                            { }


                            // For Amendment
                            //Application.DoEvents();
                            //OleDbDataAdapter oleda11 = new OleDbDataAdapter("SELECT * FROM [b2ba$]", conn);
                            //oleda11.Fill(dsb2ba, "GSTR1");
                            //OleDbDataAdapter oleda12 = new OleDbDataAdapter("SELECT * FROM [b2cla$]", conn);
                            //oleda12.Fill(dsb2cla, "GSTR1");
                            //OleDbDataAdapter oleda13 = new OleDbDataAdapter("SELECT * FROM [b2csa$]", conn);
                            //oleda13.Fill(dsb2csa, "GSTR1");
                            //OleDbDataAdapter oleda14 = new OleDbDataAdapter("SELECT * FROM [cdnra$]", conn);
                            //oleda14.Fill(dscdnra, "GSTR1");
                            //OleDbDataAdapter oleda15 = new OleDbDataAdapter("SELECT * FROM [cdnura$]", conn);
                            //oleda15.Fill(dscdnura, "GSTR1");
                            //OleDbDataAdapter oleda16 = new OleDbDataAdapter("SELECT * FROM [expa$]", conn);
                            //oleda16.Fill(dsexpa, "GSTR1");
                            //OleDbDataAdapter oleda17 = new OleDbDataAdapter("SELECT * FROM [ata$]", conn);
                            //oleda17.Fill(dsata, "GSTR1");
                            //OleDbDataAdapter oleda18 = new OleDbDataAdapter("SELECT * FROM [atadja$]", conn);
                            //oleda18.Fill(dsatadja, "GSTR1");

                            Application.DoEvents();
                            if (dsB2B.Tables.Count != 0)
                            {
                                dtB2B = dsB2B.Tables["GSTR1"];
                            }
                            if (dsB2CL.Tables.Count != 0)
                            {
                                dtB2CL = dsB2CL.Tables["GSTR1"];
                            }
                            if (dsB2CS.Tables.Count != 0)
                            {
                                dtB2CS = dsB2CS.Tables["GSTR1"];
                            }
                            if (dsEXP.Tables.Count != 0)
                            {
                                dtEXP = dsEXP.Tables["GSTR1"];
                            }
                            if (dsCDNR.Tables.Count != 0)
                            {
                                dtCDNR = dsCDNR.Tables["GSTR1"];
                            }
                            if (dsAT.Tables.Count != 0)
                            {
                                dtAT = dsAT.Tables["GSTR1"];
                            }
                            if (dsHSN.Tables.Count != 0)
                            {
                                dtHSN = dsHSN.Tables["GSTR1"];
                            }
                            if (dsDOC.Tables.Count != 0)
                            {
                                dtDOC = dsDOC.Tables["GSTR1"];
                            }
                            if (dsATD.Tables.Count != 0)
                            {
                                dtATD = dsATD.Tables["GSTR1"];
                            }
                            if (dsNilRt.Tables.Count != 0)
                            {
                                dtNilRt = dsNilRt.Tables["GSTR1"];
                            }
                            if (dsCDNUR.Tables.Count != 0)
                            {
                                dtCDNUR = dsCDNUR.Tables["GSTR1"];
                            }

                            // For Amendment
                            //dtb2ba = dsb2ba.Tables["GSTR1"];
                            //dtb2cla = dsb2cla.Tables["GSTR1"];
                            //dtb2csa = dsb2csa.Tables["GSTR1"];
                            //dtcdnra = dscdnra.Tables["GSTR1"];
                            //dtcdnura = dscdnura.Tables["GSTR1"];
                            //dtexpa = dsexpa.Tables["GSTR1"];
                            //dtata = dsata.Tables["GSTR1"];
                            //dtatadja = dsatadja.Tables["GSTR1"];

                            Application.DoEvents();
                            dtB2B = Utility.RemoveEmptyRowsFromDataTable(dtB2B);
                            dtB2CL = Utility.RemoveEmptyRowsFromDataTable(dtB2CL);
                            dtB2CS = Utility.RemoveEmptyRowsFromDataTable(dtB2CS);
                            dtEXP = Utility.RemoveEmptyRowsFromDataTable(dtEXP);
                            dtCDNR = Utility.RemoveEmptyRowsFromDataTable(dtCDNR);
                            dtAT = Utility.RemoveEmptyRowsFromDataTable(dtAT);
                            dtHSN = Utility.RemoveEmptyRowsFromDataTable(dtHSN);
                            //dtDOC = Utility.RemoveEmptyRowsFromDataTable(dtDOC);
                            dtATD = Utility.RemoveEmptyRowsFromDataTable(dtATD);
                            dtNilRt = Utility.RemoveEmptyRowsFromDataTable(dtNilRt);
                            dtCDNUR = Utility.RemoveEmptyRowsFromDataTable(dtCDNUR);

                            // For Amendment
                            //dtb2ba = Utility.RemoveEmptyRowsFromDataTable(dtb2ba);
                            //dtb2cla = Utility.RemoveEmptyRowsFromDataTable(dtb2cla);
                            //dtb2csa = Utility.RemoveEmptyRowsFromDataTable(dtb2csa);
                            //dtcdnra = Utility.RemoveEmptyRowsFromDataTable(dtcdnra);
                            //dtcdnura = Utility.RemoveEmptyRowsFromDataTable(dtcdnura);
                            //dtexpa = Utility.RemoveEmptyRowsFromDataTable(dtexpa);
                            //dtata = Utility.RemoveEmptyRowsFromDataTable(dtata);
                            //dtatadja = Utility.RemoveEmptyRowsFromDataTable(dtatadja);
                            //Application.DoEvents();
                            #endregion

                            #region first delete old data from database
                            #region Regular Data Entry
                            int _Result = 0;
                            string Query = "Delete from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime - b2b!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            //Query = "Delete from SPQR1B2C where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            //_Result = objGSTR5.IUDData(Query);
                            //if (_Result != 1)
                            //{
                            //    pbGSTR1.Visible = false;
                            //    MessageBox.Show("System error.\nPlease try after sometime! - b2c", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            //    return;
                            //}
                            //_Result = 0;
                            Query = "Delete from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - b2cl", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - b2cs", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - exp", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - cdnr", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - cdnur", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - at", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - txpd", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1NilRatedMulti where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - exp", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - nil", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - hsn", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - doc", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            #endregion

                            #region For Amedment
                            Query = "Delete from SPQR1AmendB2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2BA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendB2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2CLA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendB2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2CSA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendEXPORT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - EXPA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendCDNR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - CDNRA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendCDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - CDNURA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendAT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - ATA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendTXP where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - TXPA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            #endregion
                            #endregion

                            #region Get Fild Name
                            #region Regular veriable
                            string b2clInvDate = "Invoice date", b2clInvVal = "Invoice Value", b2clInvNo = "Invoice Number", b2clPOS = "Place Of Supply", b2clRate = "Rate", b2clTax = "Taxable Value", b2clCESS = "Cess Amount", b2clEcom = "E-Commerce GSTIN";

                            string b2csType = "Type", b2csPOS = "Place Of Supply", b2csRate = "Rate", b2csTax = "Taxable Value", b2csCESS = "Cess Amount", b2csEcom = "E-Commerce GSTIN";
                            string b2bInvNo = "Invoice Number", b2bInvDate = "Invoice date", b2binvValue = "Invoice Value", b2bPOS = "Place Of Supply", b2bRevCharge = "Reverse Charge", b2bInvType = "Invoice Type", b2bRate = "Rate", b2bTaxValue = "Taxable Value", b2bCESSAmt = "CESS Amount";

                            string hsnNo = "HSN", hsnDescription = "Description", hsnUQC = "UQC", hsnTotalQuantity = "Total Quantity", hsnTotalValue = "Total Value", hsnTaxableValue = "Taxable Value", hsnIntegratedTaxAmount = "Integrated Tax Amount", hsnCentralTaxAmount = "Central Tax Amount", hsnStateUTTaxAmount = "State/UT Tax Amount", hsnCessAmount = "Cess Amount";

                            string docNatureofDocument = "Nature  of Document", docSrNoFrom = "Sr# No# From", docSrNoTo = "Sr# No# To", docTotalNumber = "Total Number", docCancelled = "Cancelled";

                            string expInvNo = "Invoice Number", expInvDate = "Invoice date", expShipDate = "Shipping Bill Date", expInvVal = "Invoice Value", expInvTax = "Taxable Value", expRate = "Rate", expType = "Export Type";

                            string cdnrGSTINUINofRecipient = "GSTIN/UIN of Recipient", cdnrInvoiceAdvanceReceiptNumber = "Invoice/Advance Receipt Number", cdnrInvoiceAdvanceReceiptdate = "Invoice/Advance Receipt date", cdnrNoteRefundVoucherNumber = "Note/Refund Voucher Number", cdnrNoteRefundVoucherdate = "Note/Refund Voucher date", cdnrDocumentType = "Document Type", cdnrReasonForIssuingdocument = "Reason For Issuing document", cdnrPlaceOfSupply = "Place Of Supply", cdnrNoteRefundVoucherValue = "Note/Refund Voucher Value", cdnrRate = "Rate", cdnrTaxableValue = "Taxable Value", cdnrCessAmount = "Cess Amount", cdnrPreGST = "Pre GST";

                            string cdnurURType = "UR Type", cdnurNoteRefundVoucherNumber = "Note/Refund Voucher Number", cdnurNoteRefundVoucherdate = "Note/Refund Voucher date", cdnurDocumentType = "Document Type", cdnurInvoiceAdvanceReceiptNumber = "Invoice/Advance Receipt Number", cdnurInvoiceAdvanceReceiptdate = "Invoice/Advance Receipt date", cdnurReasonForIssuingdocument = "Reason For Issuing document", cdnurPlaceOfSupply = "Place Of Supply", cdnurNoteRefundVoucherValue = "Note/Refund Voucher Value", cdnurRate = "Rate", cdnurTaxableValue = "Taxable Value", cdnurCessAmount = "Cess Amount", cdnurPreGST = "Pre GST";

                            string atPlaceOfSupply = "Place Of Supply", atRate = "Rate", atGrossAdvanceReceived = "Gross Advance Received", atCessAmount = "Cess Amount";

                            string atdPlaceOfSupply = "Place Of Supply", atdRate = "Rate", atdGrossAdvanceReceived = "Gross Advance Adjusted", atdCessAmount = "Cess Amount";
                            #endregion

                            Application.DoEvents();
                            #region Amedment veriable
                            /*
                            string B2BA_GST = "GSTIN/UIN of Recipient", B2BA_RecName = "Receiver Name", B2BA_OrgInvNo = "Original Invoice Number", B2BA_OrgInvDate = "Original Invoice date", B2BA_RevInvNo = "Revised Invoice Number", B2BA_RevInvDate = "Revised Invoice date", B2BA_InvVal = "Invoice Value", B2BA_POS = "Place Of Supply", B2BA_RevCharge = "Reverse Charge", B2BA_ApplTaxRate = "Applicable % of Tax Rate", B2BA_InvType = "Invoice Type", B2BA_EGST = "E-Commerce GSTIN", B2BA_Rate = "Rate", B2BA_TaxVal = "Taxable Value", B2BA_Cess = "Cess Amount";

                            string B2CLA_OrgInvNo = "Original Invoice Number", B2CLA_OrgInvDate = "Original Invoice date", B2CLA_OrgPOS = "Original Place Of Supply", B2CLA_RevInvNo = "Revised Invoice Number", B2CLA_RevInvDate = "Revised Invoice date", B2CLA_InvVal = "Invoice Value", B2CLA_AppTaxRate = "Applicable % of Tax Rate", B2CLA_Rate = "Rate", B2CLA_TaxVal = "Taxable Value", B2CLA_Cess = "Cess Amount", B2CLA_EGST = "E-Commerce GSTIN";

                            string B2CSA_FinYear = "Financial Year", B2CSA_OrgMonth = "Original Month", B2CSA_POS = "Place Of Supply", B2CSA_Type = "Type", B2CSA_AppTaxRate = "Applicable % of Tax Rate", B2CSA_Rate = "Rate", B2CSA_TaxVal = "Taxable Value", B2CSA_Cess = "Cess Amount", B2CSA_EGST = "E-Commerce GSTIN";

                            string CDNRA_GST = "GSTIN/UIN of Recipient", CDNRA_RecName = "Receiver Name", CDNRA_OrgVouNo = "Original Note/Refund Voucher Number", CDNRA_OrgVouDate = "Original Note/Refund Voucher date", CDNRA_OrgRecNo = "Original Invoice/Advance Receipt Number", CDNRA_OrgRecDate = "Original Invoice/Advance Receipt date", CDNRA_RefVouNo = "Revised Note/Refund Voucher Number", CDNRA_RefVouDate = "Revised Note/Refund Voucher date", CDNRA_DocType = "Document Type", CDNRA_SupType = "Supply Type", CDNRA_RefVouVal = "Note/Refund Voucher Value", CDNRA_AppTaxRate = "Applicable % of Tax Rate", CDNRA_Rate = "Rate", CDNRA_TaxVal = "Taxable Value", CDNRA_Cess = "Cess Amount", CDNRA_PreGST = "Pre GST";

                            string CDNURA_URType = "UR Type", CDNURA_OrgRefVouNo = "Original Note/Refund Voucher Number", CDNURA_OrgRefVouDate = "Original Note/Refund Voucher date", CDNURA_OrgRecNo = "Original Invoice/Advance Receipt Number", CDNURA_RecDate = "Original Invoice/Advance Receipt date", CDNURA_RefNo = "Revised Note/Refund Voucher Number", CDNURA_RefVouDate = "Revised Note/Refund Voucher date", CDNURA_DocType = "Document Type", CDNURA_SupType = "Supply Type", CDNURA_RefVouVal = "Note/Refund Voucher Value", CDNURA_AppTaxRate = "Applicable % of Tax Rate", CDNURA_Rate = "Rate", CDNURA_TaxVal = "Taxable Value", CDNURA_Cess = "Cess Amount", CDNURA_PreGST = "Pre GST";

                            string EXPA_ExpType = "Export Type", EXPA_OrgInvNo = "Original Invoice Number", EXPA_OrgInvDate = "Original Invoice date", EXPA_RevInvNo = "Revised Invoice Number", EXPA_RevInvDate = "Revised Invoice date", EXPA_InvVal = "Invoice Value", EXPA_PortCode = "Port Code", EXPA_ShipNo = "Shipping Bill Number", EXPA_ShipDate = "Shipping Bill Date", EXPA_AppTaxRate = "Applicable % of Tax Rate", EXPA_Rate = "Rate", EXPA_TaxVal = "Taxable Value", EXPA_Cess = "Cess Amount";

                            string ATA_FinYear = "Financial Year", ATA_OrgMonth = "Original Month", ATA_OrgPOS = "Original Place Of Supply", ATA_AppTaxRate = "Applicable % of Tax Rate", ATA_Rate = "Rate", ATA_GrossAdvRec = "Gross Advance Received", ATA_Cess = "Cess Amount";

                            string ATADJA_FinYear = "Financial Year", ATADJA_OrgMonth = "Original Month", ATADJA_OrgPOS = "Original Place Of Supply", ATADJA_AppTaxRate = "Applicable % of Tax Rate", ATADJA_Rate = "Rate", ATADJA_GrossAdvAdj = "Gross Advance Adjusted", ATADJA_Cess = "Cess Amount";
                            */
                            #endregion

                            decimal? colRate = null; int _result = 0;
                            #endregion

                            #region  Validation
                            Application.DoEvents();
                            bool Flg = false;
                            if (dtB2B != null && dtB2B.Rows.Count > 0)
                            {
                                string[] columnNames = dtB2B.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "GSTIN/UIN of Recipient")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtHSN != null && dtHSN.Rows.Count > 0)
                            {
                                string[] columnNames = dtHSN.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "HSN")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtDOC != null && dtDOC.Rows.Count > 0)
                            {
                                string[] columnNames = dtDOC.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "Nature of Document")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtB2CL != null && dtB2CL.Rows.Count > 0)
                            {
                                string[] columnNames = dtB2CL.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "Invoice Number")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtB2CS != null && dtB2CS.Rows.Count > 0)
                            {
                                string[] columnNames = dtB2CS.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "Type")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtEXP != null && dtEXP.Rows.Count > 0)
                            {
                                string[] columnNames = dtEXP.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "Export Type")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtCDNR != null && dtCDNR.Rows.Count > 0)
                            {
                                string[] columnNames = dtCDNR.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "GSTIN/UIN of Recipient")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtCDNUR != null && dtCDNUR.Rows.Count > 0)
                            {
                                string[] columnNames = dtCDNUR.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "Document Type")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtAT != null && dtAT.Rows.Count > 0)
                            {
                                string[] columnNames = dtAT.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "Place Of Supply")
                                    Flg = true;
                                else
                                    Flg = false;
                            }
                            else if (dtATD != null && dtATD.Rows.Count > 0)
                            {
                                string[] columnNames = dtATD.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToArray();
                                if (columnNames[0] != "Place Of Supply")
                                    Flg = true;
                                else
                                    Flg = false;
                            }


                            if (Flg == true)
                            {
                                #region  Regular Validation
                                #region B2B
                                if (dtB2B.Rows.Count > 0)
                                {
                                    if (dtB2B.Columns.Count > 12)
                                    {
                                        for (int i = 0; i < dtB2B.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtB2B.Columns.Count; j++)
                                            {
                                                if (dtB2B.Columns.Count > 12)
                                                {
                                                    dtB2B.Columns.RemoveAt(dtB2B.Columns.Count - 1);
                                                    dtB2B.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtB2B.Rows[0].Delete();
                                    dtB2B.Columns[0].ColumnName = "GSTIN/UIN of Recipient";
                                    dtB2B.Columns[1].ColumnName = "Invoice Number";
                                    dtB2B.Columns[2].ColumnName = "Invoice date";
                                    dtB2B.Columns[3].ColumnName = "Invoice Value";
                                    dtB2B.Columns[4].ColumnName = "Place Of Supply";
                                    dtB2B.Columns[5].ColumnName = "Reverse Charge";
                                    dtB2B.Columns[6].ColumnName = "Applicable % of Tax Rate";
                                    dtB2B.Columns[7].ColumnName = "Invoice Type";
                                    dtB2B.Columns[8].ColumnName = "E-Commerce GSTIN";
                                    dtB2B.Columns[9].ColumnName = "Rate";
                                    dtB2B.Columns[10].ColumnName = "Taxable Value";
                                    dtB2B.Columns[11].ColumnName = "Cess Amount";
                                    dtB2B.AcceptChanges();
                                }
                                for (int i = 0; i < dtB2B.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bPOS, typeof(string));
                                        dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bRevCharge, typeof(string));

                                        dtB2B.Columns.Add("Status");
                                        dtB2B.Columns.Add("b2bIGSTTAmt");
                                        dtB2B.Columns.Add("b2bCGSTTAmt");
                                        dtB2B.Columns.Add("b2bSGSTTAmt");
                                    }

                                    dtB2B.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim() != "")
                                        dtB2B.Rows[i][b2bPOS] = Utility.strValidStateName(Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim());

                                    if (Convert.ToString(dtB2B.Rows[i][b2bRevCharge]).Trim().ToLower() == "yes" || Convert.ToString(dtB2B.Rows[i][b2bRevCharge]).Trim().ToLower() == "y")
                                        dtB2B.Rows[i][b2bRevCharge] = "Yes";
                                    else
                                        dtB2B.Rows[i][b2bRevCharge] = "No";

                                    if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "regular")
                                        dtB2B.Rows[i][b2bInvType] = "Regular";
                                    else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports with payment" || Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez supplies with payment")
                                        dtB2B.Rows[i][b2bInvType] = "SEZ Exports with payment";
                                    else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports without payment" || Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez supplies without payment")
                                        dtB2B.Rows[i][b2bInvType] = "SEZ exports without payment";
                                    else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "deemed exports")
                                        dtB2B.Rows[i][b2bInvType] = "Deemed Exports";
                                    else
                                        dtB2B.Rows[i][b2bInvType] = "";


                                    int sj = dtB2B.Columns[b2bInvDate].Ordinal;
                                    dtB2B = Utility.ChangeColumnDataType(dtB2B, dtB2B.Columns[b2bInvDate].ColumnName, typeof(string));
                                    dtB2B.Columns[b2bInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2B.Rows[i][b2bInvDate]);
                                        dtB2B.Rows[i][b2bInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2B.Rows[i][b2bInvDate] = "";
                                    }

                                    if (Convert.ToString(dtB2B.Rows[i][b2bRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2B.Rows[i][b2bRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtB2B.Rows[i][b2bRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2B.Rows[i][b2bPOS]));
                                        if (Pos != "")
                                        {
                                            if (Pos.Length > 2)
                                                StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                            else
                                                StateId = Convert.ToInt16(Pos);
                                        }

                                        if (dtB2B.Rows[i][b2bInvType] == "Regular")
                                        {
                                            if (StateId == CompanyGSTNState)
                                            {
                                                decimal Amount = Convert.ToDecimal(dtB2B.Rows[i][b2bRate].ToString()) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;

                                                decimal Amt = Math.Round((Amount / 2), 2, MidpointRounding.AwayFromZero);
                                                //Amt = Math.Truncate(Amt * 100) / 100;

                                                dtB2B.Rows[i]["b2bCGSTTAmt"] = Amt.ToString();
                                                dtB2B.Rows[i]["b2bSGSTTAmt"] = Amt.ToString();
                                            }
                                            else
                                            {
                                                decimal IGSTAmt = Convert.ToDecimal(dtB2B.Rows[i][b2bRate].ToString()) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;
                                                IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                                //IGSTAmt = Math.Truncate(IGSTAmt * 100) / 100;
                                                dtB2B.Rows[i]["b2bIGSTTAmt"] = IGSTAmt.ToString();
                                            }
                                        }
                                        else if (dtB2B.Rows[i][b2bInvType] == "SEZ Exports with payment" || dtB2B.Rows[i][b2bInvType] == "Deemed Exports")
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtB2B.Rows[i][b2bRate].ToString()) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            //IGSTAmt = Math.Truncate(IGSTAmt * 100) / 100;
                                            dtB2B.Rows[i]["b2bIGSTTAmt"] = IGSTAmt.ToString();
                                        }
                                        else if (dtB2B.Rows[i][b2bInvType] == "SEZ exports without payment")
                                        {
                                            dtB2B.Rows[i]["b2bCGSTTAmt"] = "";
                                            dtB2B.Rows[i]["b2bSGSTTAmt"] = "";
                                            dtB2B.Rows[i]["b2bIGSTTAmt"] = "";
                                        }

                                    }


                                    if (colRate != null)
                                        dtB2B.Rows[i][b2bRate] = colRate;
                                }
                                #endregion

                                #region HSN
                                if (dtHSN.Rows.Count > 0)
                                {
                                    if (dtHSN.Columns.Count > 10)
                                    {
                                        for (int i = 0; i < dtHSN.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtHSN.Columns.Count; j++)
                                            {
                                                if (dtHSN.Columns.Count > 10)
                                                {
                                                    dtHSN.Columns.RemoveAt(dtHSN.Columns.Count - 1);
                                                    dtHSN.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtHSN.Rows[0].Delete();
                                    dtHSN.Columns[0].ColumnName = "HSN";
                                    dtHSN.Columns[1].ColumnName = "Description";
                                    dtHSN.Columns[2].ColumnName = "UQC";
                                    dtHSN.Columns[3].ColumnName = "Total Quantity";
                                    dtHSN.Columns[4].ColumnName = "Total Value";
                                    dtHSN.Columns[5].ColumnName = "Taxable Value";
                                    dtHSN.Columns[6].ColumnName = "Integrated Tax Amount";
                                    dtHSN.Columns[7].ColumnName = "Central Tax Amount";
                                    dtHSN.Columns[8].ColumnName = "State/UT Tax Amount";
                                    dtHSN.Columns[9].ColumnName = "Cess Amount";
                                    dtHSN.AcceptChanges();
                                }
                                for (int i = 0; i < dtHSN.Rows.Count; i++)
                                {
                                    if (i == 0)
                                        dtHSN.Columns.Add("Status");

                                    dtHSN.Rows[i]["Status"] = "Draft";

                                    if (!chkHSNQOC(Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim()))
                                        dtHSN.Rows[i][hsnUQC] = "";
                                    else
                                        dtHSN.Rows[i][hsnUQC] = Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim();
                                }
                                #endregion

                                #region DOC
                                if (dtDOC.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dtDOC.Columns.Count; i++)
                                    {
                                        if (dtDOC.Columns.Count > 5)
                                        {
                                            for (int j = 0; j < dtDOC.Columns.Count; j++)
                                            {
                                                if (dtDOC.Columns.Count > 5)
                                                {
                                                    dtDOC.Columns.RemoveAt(dtDOC.Columns.Count - 1);
                                                    dtDOC.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtDOC.Rows[0].Delete();
                                    dtDOC.Rows[1].Delete();
                                    dtDOC.Rows[2].Delete();
                                    dtDOC.Columns[0].ColumnName = "Nature of Document";
                                    dtDOC.Columns[1].ColumnName = "Sr. No. From";
                                    dtDOC.Columns[2].ColumnName = "Sr. No. To";
                                    dtDOC.Columns[3].ColumnName = "Total Number";
                                    dtDOC.Columns[4].ColumnName = "Cancelled";
                                    dtDOC.AcceptChanges();
                                }
                                for (int i = 0; i < dtDOC.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtDOC.Columns.Add("Status");
                                        dtDOC.Columns.Add("Net Issued");
                                    }
                                    dtDOC.Rows[i]["Status"] = "Draft";

                                    if (Utility.NatureOfDocument(dtDOC.Rows[i]["Nature of Document"].ToString()))
                                    {
                                        dtDOC.Rows[i]["Nature of Document"] = Utility.StrNatureOfDocument(dtDOC.Rows[i]["Nature of Document"].ToString());
                                    }
                                    else
                                    {
                                        dtDOC.Rows[i]["Nature of Document"] = "";
                                    }


                                    if (Convert.ToString(dtDOC.Rows[i][docTotalNumber]) != "" && Convert.ToString(dtDOC.Rows[i][docCancelled]) != "")
                                    {
                                        decimal NetIssued = Convert.ToDecimal(dtDOC.Rows[i][docTotalNumber]) - Convert.ToDecimal(dtDOC.Rows[i][docCancelled]);
                                        NetIssued = Math.Round(NetIssued, 2);
                                        dtDOC.Rows[i]["Net Issued"] = NetIssued;
                                    }
                                }
                                #endregion

                                #region b2cl
                                if (dtB2CL.Rows.Count > 0)
                                {
                                    if (dtB2CL.Columns.Count > 9)
                                    {
                                        for (int i = 0; i < dtB2CL.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtB2CL.Columns.Count; j++)
                                            {
                                                if (dtB2CL.Columns.Count > 9)
                                                {
                                                    dtB2CL.Columns.RemoveAt(dtB2CL.Columns.Count - 1);
                                                    dtB2CL.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtB2CL.Rows[0].Delete();
                                    dtB2CL.Columns[0].ColumnName = "Invoice Number";
                                    dtB2CL.Columns[1].ColumnName = "Invoice date";
                                    dtB2CL.Columns[2].ColumnName = "Invoice Value";
                                    dtB2CL.Columns[3].ColumnName = "Place Of Supply";
                                    dtB2CL.Columns[4].ColumnName = "Applicable % of Tax Rate";
                                    dtB2CL.Columns[5].ColumnName = "Rate";
                                    dtB2CL.Columns[6].ColumnName = "Taxable Value";
                                    dtB2CL.Columns[7].ColumnName = "Cess Amount";
                                    dtB2CL.Columns[8].ColumnName = "E-Commerce GSTIN";
                                    dtB2CL.AcceptChanges();
                                }
                                for (int i = 0; i < dtB2CL.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CL = Utility.ChangeColumnDataType(dtB2CL, b2clPOS, typeof(string));
                                        dtB2CL.Columns.Add("Status");
                                        dtB2CL.Columns.Add("IGST Amount");
                                    }

                                    dtB2CL.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2CL.Rows[i][b2clPOS]).Trim() != "")
                                        dtB2CL.Rows[i][b2clPOS] = Utility.strValidStateName(Convert.ToString(dtB2CL.Rows[i][b2clPOS]).Split('-')[0]);

                                    int sj = dtB2CL.Columns[b2clInvDate].Ordinal;
                                    dtB2CL = Utility.ChangeColumnDataType(dtB2CL, dtB2CL.Columns[b2clInvDate].ColumnName, typeof(string));
                                    dtB2CL.Columns[b2clInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2CL.Rows[i][b2clInvDate]);
                                        dtB2CL.Rows[i][b2clInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2CL.Rows[i][b2clInvDate] = "";
                                    }

                                    if (Convert.ToString(dtB2CL.Rows[i][b2clRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2CL.Rows[i][b2clRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtB2CL.Rows[i][b2clRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2CL.Rows[i][b2clPOS]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtB2CL.Rows[i][b2clRate].ToString()) * Convert.ToDecimal(dtB2CL.Rows[i][b2clTax].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CL.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtB2CL.Rows[i][b2clRate].ToString()) * Convert.ToDecimal(dtB2CL.Rows[i][b2clTax].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CL.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }

                                #endregion

                                #region b2cs
                                if (dtB2CS.Rows.Count > 0)
                                {
                                    if (dtB2CS.Columns.Count > 6)
                                    {
                                        for (int i = 0; i < dtB2CS.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtB2CS.Columns.Count; j++)
                                            {
                                                if (dtB2CS.Columns.Count > 6)
                                                {
                                                    dtB2CS.Columns.RemoveAt(dtB2CS.Columns.Count - 1);
                                                    dtB2CS.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtB2CS.Rows[0].Delete();
                                    dtB2CS.Columns[0].ColumnName = "Type";
                                    dtB2CS.Columns[1].ColumnName = "Place Of Supply";
                                    dtB2CS.Columns[2].ColumnName = "Rate";
                                    dtB2CS.Columns[3].ColumnName = "Taxable Value";
                                    dtB2CS.Columns[4].ColumnName = "Cess Amount";
                                    dtB2CS.Columns[5].ColumnName = "E-Commerce GSTIN";
                                    dtB2CS.AcceptChanges();
                                }
                                for (int i = 0; i < dtB2CS.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csPOS, typeof(string));
                                        dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csType, typeof(string));
                                        dtB2CS.Columns.Add("Status");
                                        dtB2CS.Columns.Add("IGST Amount");
                                        dtB2CS.Columns.Add("CGST Amount");
                                        dtB2CS.Columns.Add("SGST Amount");
                                    }

                                    dtB2CS.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2CS.Rows[i][b2csPOS]).Trim() != "")
                                        dtB2CS.Rows[i][b2csPOS] = Utility.strValidStateName(Convert.ToString(dtB2CS.Rows[i][b2csPOS]).Split('-')[0]);


                                    if (Convert.ToString(dtB2CS.Rows[i][b2csRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2CS.Rows[i][b2csRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtB2CS.Rows[i][b2csRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2CS.Rows[i][b2csPOS]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(dtB2CS.Rows[i][b2csRate].ToString()) * Convert.ToDecimal(dtB2CS.Rows[i][b2csTax].ToString()) / 100;
                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CS.Rows[i]["CGST Amount"] = Amt.ToString();
                                            dtB2CS.Rows[i]["SGST Amount"] = Amt.ToString();
                                            dtB2CS.Rows[i][b2csType] = "Intra";
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtB2CS.Rows[i][b2csRate].ToString()) * Convert.ToDecimal(dtB2CS.Rows[i][b2csTax].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CS.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                            dtB2CS.Rows[i][b2csType] = "Inter";
                                        }
                                    }
                                }

                                #endregion

                                #region EXP
                                if (dtEXP.Rows.Count > 0)
                                {
                                    if (dtEXP.Columns.Count > 11)
                                    {
                                        for (int i = 0; i < dtEXP.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtEXP.Columns.Count; j++)
                                            {
                                                if (dtEXP.Columns.Count > 11)
                                                {
                                                    dtEXP.Columns.RemoveAt(dtEXP.Columns.Count - 1);
                                                    dtEXP.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtEXP.Rows[0].Delete();
                                    dtEXP.Columns[0].ColumnName = "Export Type";
                                    dtEXP.Columns[1].ColumnName = "Invoice Number";
                                    dtEXP.Columns[2].ColumnName = "Invoice date";
                                    dtEXP.Columns[3].ColumnName = "Invoice Value";
                                    dtEXP.Columns[4].ColumnName = "Port Code";
                                    dtEXP.Columns[5].ColumnName = "Shipping Bill Number";
                                    dtEXP.Columns[6].ColumnName = "Shipping Bill Date";
                                    dtEXP.Columns[7].ColumnName = "Applicable % of Tax Rate";
                                    dtEXP.Columns[8].ColumnName = "Rate";
                                    dtEXP.Columns[9].ColumnName = "Taxable Value";
                                    dtEXP.Columns[10].ColumnName = "Cess Amount";
                                    dtEXP.AcceptChanges();
                                }
                                for (int i = 0; i < dtEXP.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtEXP.Columns.Add("Status");
                                        dtEXP.Columns.Add("IGST Amount");
                                    }
                                    dtEXP.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtEXP.Rows[i][expType]).Trim() != "")
                                        dtEXP.Rows[i][expType] = GetExportType(Convert.ToString(dtEXP.Rows[i][expType]).Trim(), "exp");

                                    int sj = dtEXP.Columns[expInvDate].Ordinal;
                                    dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expInvDate].ColumnName, typeof(string));
                                    dtEXP.Columns[expInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expInvDate]);
                                        dtEXP.Rows[i][expInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXP.Rows[i][expInvDate] = "";
                                    }

                                    sj = dtEXP.Columns[expShipDate].Ordinal;
                                    dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expShipDate].ColumnName, typeof(string));
                                    dtEXP.Columns[expShipDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expShipDate]);
                                        dtEXP.Rows[i][expShipDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXP.Rows[i][expShipDate] = "";
                                    }

                                    if (Convert.ToString(dtEXP.Rows[i][expRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtEXP.Rows[i][expRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtEXP.Rows[i][expRate]);

                                    if (colRate != null)
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtEXP.Rows[i][expRate].ToString()) * Convert.ToDecimal(dtEXP.Rows[i][expInvTax].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtEXP.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                    else
                                    {
                                        dtEXP.Rows[i]["IGST Amount"] = "";
                                    }
                                }

                                #endregion

                                #region CDNR
                                if (dtCDNR.Rows.Count > 0)
                                {
                                    if (dtCDNR.Columns.Count > 13)
                                    {
                                        for (int i = 0; i < dtCDNR.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtCDNR.Columns.Count; j++)
                                            {
                                                if (dtCDNR.Columns.Count > 13)
                                                {
                                                    dtCDNR.Columns.RemoveAt(dtCDNR.Columns.Count - 1);
                                                    dtCDNR.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtCDNR.Rows[0].Delete();
                                    dtCDNR.Columns[0].ColumnName = "GSTIN/UIN of Recipient";
                                    dtCDNR.Columns[1].ColumnName = "Invoice/Advance Receipt Number";
                                    dtCDNR.Columns[2].ColumnName = "Invoice/Advance Receipt date";
                                    dtCDNR.Columns[3].ColumnName = "Note/Refund Voucher Number";
                                    dtCDNR.Columns[4].ColumnName = "Note/Refund Voucher date";
                                    dtCDNR.Columns[5].ColumnName = "Document Type";
                                    //dtCDNR.Columns[6].ColumnName = "Reason For Issuing document";
                                    dtCDNR.Columns[6].ColumnName = "Place Of Supply";
                                    dtCDNR.Columns[7].ColumnName = "Note/Refund Voucher Value";
                                    dtCDNR.Columns[8].ColumnName = "Applicable % of Tax Rate";
                                    dtCDNR.Columns[9].ColumnName = "Rate";
                                    dtCDNR.Columns[10].ColumnName = "Taxable Value";
                                    dtCDNR.Columns[11].ColumnName = "Cess Amount";
                                    dtCDNR.Columns[12].ColumnName = "Pre GST";
                                    dtCDNR.AcceptChanges();
                                }
                                for (int i = 0; i < dtCDNR.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtCDNR.Columns.Add("Status");
                                        dtCDNR.Columns.Add("IGST Amount");
                                        dtCDNR.Columns.Add("CGST Amount");
                                        dtCDNR.Columns.Add("SGST Amount");
                                        dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrPlaceOfSupply, typeof(string));
                                        dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrPreGST, typeof(string));
                                        dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrDocumentType, typeof(string));
                                        //dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrReasonForIssuingdocument, typeof(string));
                                    }

                                    dtCDNR.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]).Trim() != "")
                                        dtCDNR.Rows[i][cdnrPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrPreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtCDNR.Rows[i][cdnrPreGST]).Trim().ToLower() == "y")
                                        dtCDNR.Rows[i][cdnrPreGST] = "Yes";
                                    else
                                        dtCDNR.Rows[i][cdnrPreGST] = "No";

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrDocumentType]).Trim() != "")
                                        dtCDNR.Rows[i][cdnrDocumentType] = GetExportType(Convert.ToString(dtCDNR.Rows[i][cdnrDocumentType]), "cdnr");

                                    //if (!ValidateData(Convert.ToString(dtCDNR.Rows[i][cdnrReasonForIssuingdocument]).Trim(), "cdnReason"))
                                    //    dtCDNR.Rows[i][cdnrReasonForIssuingdocument] = "";
                                    //else
                                    //    dtCDNR.Rows[i][cdnrReasonForIssuingdocument] = Convert.ToString(dtCDNR.Rows[i][cdnrReasonForIssuingdocument]).Trim();

                                    int sj = dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].Ordinal;
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].ColumnName, typeof(string));
                                    dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate]);
                                        dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate] = "";
                                    }

                                    sj = dtCDNR.Columns[cdnrNoteRefundVoucherdate].Ordinal;
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnrNoteRefundVoucherdate].ColumnName, typeof(string));
                                    dtCDNR.Columns[cdnrNoteRefundVoucherdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnrNoteRefundVoucherdate]);
                                        dtCDNR.Rows[i][cdnrNoteRefundVoucherdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNR.Rows[i][cdnrNoteRefundVoucherdate] = "";
                                    }

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtCDNR.Rows[i][cdnrRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtCDNR.Rows[i][cdnrRate]);

                                    if (colRate != null)
                                    {

                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(dtCDNR.Rows[i][cdnrRate].ToString()) * Convert.ToDecimal(dtCDNR.Rows[i][cdnrTaxableValue].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNR.Rows[i]["CGST Amount"] = Amt.ToString();
                                            dtCDNR.Rows[i]["SGST Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtCDNR.Rows[i][cdnrRate].ToString()) * Convert.ToDecimal(dtCDNR.Rows[i][cdnrTaxableValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                    }

                                }

                                #endregion

                                #region CDNUR
                                if (dtCDNUR.Rows.Count > 0)
                                {
                                    if (dtCDNUR.Columns.Count > 13)
                                    {
                                        for (int i = 0; i < dtCDNUR.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtCDNUR.Columns.Count; j++)
                                            {
                                                if (dtCDNUR.Columns.Count > 13)
                                                {
                                                    dtCDNUR.Columns.RemoveAt(dtCDNUR.Columns.Count - 1);
                                                    dtCDNUR.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtCDNUR.Rows[0].Delete();
                                    dtCDNUR.Columns[0].ColumnName = "UR Type";
                                    dtCDNUR.Columns[1].ColumnName = "Note/Refund Voucher Number";
                                    dtCDNUR.Columns[2].ColumnName = "Note/Refund Voucher date";
                                    dtCDNUR.Columns[3].ColumnName = "Document Type";
                                    dtCDNUR.Columns[4].ColumnName = "Invoice/Advance Receipt Number";
                                    dtCDNUR.Columns[5].ColumnName = "Invoice/Advance Receipt date";
                                    //dtCDNUR.Columns[6].ColumnName = "Reason For Issuing document";
                                    dtCDNUR.Columns[6].ColumnName = "Place Of Supply";
                                    dtCDNUR.Columns[7].ColumnName = "Note/Refund Voucher Value";
                                    dtCDNUR.Columns[8].ColumnName = "Applicable % of Tax Rate";
                                    dtCDNUR.Columns[9].ColumnName = "Rate";
                                    dtCDNUR.Columns[10].ColumnName = "Taxable Value";
                                    dtCDNUR.Columns[11].ColumnName = "Cess Amount";
                                    dtCDNUR.Columns[12].ColumnName = "Pre GST";
                                    dtCDNUR.AcceptChanges();
                                }
                                for (int i = 0; i < dtCDNUR.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtCDNUR.Columns.Add("Status");
                                        dtCDNUR.Columns.Add("IGST Amount");
                                        dtCDNUR.Columns.Add("CGST Amount");
                                        dtCDNUR.Columns.Add("SGST Amount");
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurPlaceOfSupply, typeof(string));
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurPreGST, typeof(string));
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurDocumentType, typeof(string));
                                        //dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurReasonForIssuingdocument, typeof(string));
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurURType, typeof(string));
                                    }

                                    dtCDNUR.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]).Trim() != "")
                                        dtCDNUR.Rows[i][cdnurPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurPreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtCDNUR.Rows[i][cdnurPreGST]).Trim().ToLower() == "y")
                                        dtCDNUR.Rows[i][cdnurPreGST] = "Yes";
                                    else
                                        dtCDNUR.Rows[i][cdnurPreGST] = "No";

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "b2cl")
                                        dtCDNUR.Rows[i][cdnurURType] = "B2C Large";
                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "expwp")
                                        dtCDNUR.Rows[i][cdnurURType] = "Export with payment of GST";
                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "expwop")
                                        dtCDNUR.Rows[i][cdnurURType] = "Export without payment of GST";

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurDocumentType]).Trim() != "")
                                        dtCDNUR.Rows[i][cdnurDocumentType] = GetExportType(Convert.ToString(dtCDNUR.Rows[i][cdnurDocumentType]), "cdnr");

                                    //if (!ValidateData(Convert.ToString(dtCDNUR.Rows[i][cdnurReasonForIssuingdocument]).Trim(), "cdnReason"))
                                    //    dtCDNUR.Rows[i][cdnurReasonForIssuingdocument] = "";
                                    //else
                                    //    dtCDNUR.Rows[i][cdnurReasonForIssuingdocument] = Convert.ToString(dtCDNUR.Rows[i][cdnurReasonForIssuingdocument]).Trim();

                                    int sj = dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].Ordinal;
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].ColumnName, typeof(string));
                                    dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate]);
                                        dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate] = "";
                                    }

                                    sj = dtCDNUR.Columns[cdnurNoteRefundVoucherdate].Ordinal;
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnurNoteRefundVoucherdate].ColumnName, typeof(string));
                                    dtCDNUR.Columns[cdnurNoteRefundVoucherdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate]);
                                        dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate] = "";
                                    }

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtCDNUR.Rows[i][cdnurRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtCDNUR.Rows[i][cdnurRate]);

                                    if (colRate != null)
                                    {

                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]));

                                        if (Pos.Length > 0)
                                        {
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                            if (StateId == CompanyGSTNState)
                                            {
                                                decimal Amount = Convert.ToDecimal(dtCDNUR.Rows[i][cdnurRate].ToString()) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;

                                                decimal Amt = Amount / 2;
                                                Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                                dtCDNUR.Rows[i]["CGST Amount"] = Amt.ToString();
                                                dtCDNUR.Rows[i]["SGST Amount"] = Amt.ToString();
                                            }
                                            else
                                            {
                                                decimal IGSTAmt = Convert.ToDecimal(dtCDNUR.Rows[i][cdnurRate].ToString()) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;
                                                IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                                dtCDNUR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                            }
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtCDNUR.Rows[i][cdnurRate].ToString()) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNUR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                    }

                                }

                                #endregion

                                #region At
                                if (dtAT.Rows.Count > 0)
                                {
                                    if (dtAT.Columns.Count > 4)
                                    {
                                        for (int i = 0; i < dtAT.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtAT.Columns.Count; j++)
                                            {
                                                if (dtAT.Columns.Count > 4)
                                                {
                                                    dtAT.Columns.RemoveAt(dtAT.Columns.Count - 1);
                                                    dtAT.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtAT.Rows[0].Delete();
                                    dtAT.Columns[0].ColumnName = "Place Of Supply";
                                    dtAT.Columns[1].ColumnName = "Rate";
                                    dtAT.Columns[2].ColumnName = "Gross Advance Received";
                                    dtAT.Columns[3].ColumnName = "Cess Amount";
                                    dtAT.AcceptChanges();
                                }
                                for (int i = 0; i < dtAT.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtAT = Utility.ChangeColumnDataType(dtAT, atPlaceOfSupply, typeof(string));
                                        dtAT.Columns.Add("Status");
                                        dtAT.Columns.Add("IGSTT Amount");
                                        dtAT.Columns.Add("CGSTT Amount");
                                        dtAT.Columns.Add("SGSTT Amount");
                                    }

                                    dtAT.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]).Trim() != "")
                                        dtAT.Rows[i][atPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtAT.Rows[i][atRate]).Trim() != "")
                                        colRate = 0;

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtAT.Rows[i][atRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtAT.Rows[i][atRate]);

                                    if (colRate != null)
                                    {

                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(dtAT.Rows[i][atRate].ToString()) * Convert.ToDecimal(dtAT.Rows[i][atGrossAdvanceReceived].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtAT.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                            dtAT.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtAT.Rows[i][atRate].ToString()) * Convert.ToDecimal(dtAT.Rows[i][atGrossAdvanceReceived].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtAT.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }
                                #endregion

                                #region Atd
                                if (dtATD.Rows.Count > 0)
                                {
                                    if (dtATD.Columns.Count > 4)
                                    {
                                        for (int i = 0; i < dtATD.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtATD.Columns.Count; j++)
                                            {
                                                if (dtATD.Columns.Count > 4)
                                                {
                                                    dtATD.Columns.RemoveAt(dtATD.Columns.Count - 1);
                                                    dtATD.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtATD.Rows[0].Delete();
                                    dtATD.Columns[0].ColumnName = "Place Of Supply";
                                    dtATD.Columns[1].ColumnName = "Rate";
                                    dtATD.Columns[2].ColumnName = "Gross Advance Adjusted";
                                    dtATD.Columns[3].ColumnName = "Cess Amount";
                                    dtATD.AcceptChanges();
                                }
                                for (int i = 0; i < dtATD.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtATD = Utility.ChangeColumnDataType(dtATD, atPlaceOfSupply, typeof(string));
                                        dtATD.Columns.Add("Status");
                                        dtATD.Columns.Add("IGSTT Amount");
                                        dtATD.Columns.Add("CGSTT Amount");
                                        dtATD.Columns.Add("SGSTT Amount");
                                    }

                                    dtATD.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]).Trim() != "")
                                        dtATD.Rows[i][atdPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtATD.Rows[i][atdRate]).Trim() != "")
                                        colRate = 0;

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtATD.Rows[i][atdRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtATD.Rows[i][atdRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(dtATD.Rows[i][atdRate].ToString()) * Convert.ToDecimal(dtATD.Rows[i][atdGrossAdvanceReceived].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtATD.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                            dtATD.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtATD.Rows[i][atdRate].ToString()) * Convert.ToDecimal(dtATD.Rows[i][atdGrossAdvanceReceived].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtATD.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }
                                #endregion

                                #region Nil
                                if (dtNilRt.Rows.Count > 0)
                                {
                                    if (dtNilRt.Columns.Count > 4)
                                    {
                                        for (int i = 0; i < dtNilRt.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtNilRt.Columns.Count; j++)
                                            {
                                                if (dtNilRt.Columns.Count > 4)
                                                {
                                                    dtNilRt.Columns.RemoveAt(dtNilRt.Columns.Count - 1);
                                                    dtNilRt.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    dtNilRt.Rows[0].Delete();
                                    dtNilRt.Columns[0].ColumnName = "Description";
                                    dtNilRt.Columns[1].ColumnName = "Nil Rated Supplies";
                                    dtNilRt.Columns[2].ColumnName = "Exempted (other than nil rated/non GST supply )";
                                    dtNilRt.Columns[3].ColumnName = "Non-GST supplies";
                                    dtNilRt.AcceptChanges();
                                }
                                for (int i = 0; i < dtNilRt.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtNilRt.Columns.Add("Status");
                                    }
                                    dtNilRt.Rows[i]["Status"] = "Draft";
                                }
                                #endregion
                                #endregion

                                #region Data Entry

                                Application.DoEvents();
                                #region Regular Data Entry
                                #region B2b

                                if (dtB2B != null && dtB2B.Rows.Count > 0)
                                {
                                    DataRow drB2b = dtB2B.NewRow();
                                    drB2b[b2bInvNo] = dtB2B.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2bInvNo]).Trim() != "").GroupBy(x => x[b2bInvNo]).Select(x => x.First()).Distinct().Count();
                                    drB2b[b2binvValue] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2binvValue] != null).Sum(x => x[b2binvValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2binvValue])).ToString();
                                    drB2b["Taxable Value"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["Taxable Value"] != null).Sum(x => x["Taxable Value"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Taxable Value"])).ToString();
                                    drB2b["b2bIGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bIGSTTAmt"] != null).Sum(x => x["b2bIGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bIGSTTAmt"])).ToString();
                                    drB2b["b2bCGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bCGSTTAmt"] != null).Sum(x => x["b2bCGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bCGSTTAmt"])).ToString();
                                    drB2b["b2bSGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bSGSTTAmt"] != null).Sum(x => x["b2bSGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bSGSTTAmt"])).ToString();
                                    drB2b[b2bCESSAmt] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bCESSAmt] != null).Sum(x => x[b2bCESSAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bCESSAmt])).ToString();
                                    drB2b["Status"] = "Total";
                                    dtB2B.Rows.Add(drB2b);

                                    _result = objGSTR5.GSTR1b2bTallyBulkEntry(dtB2B, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "B2B data entry error..!\n"; }
                                }


                                #endregion

                                #region HSN

                                if (dtHSN != null && dtHSN.Rows.Count > 0)
                                {
                                    DataRow drHSN = dtHSN.NewRow();
                                    drHSN[hsnTotalQuantity] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTotalQuantity] != null).Sum(x => x[hsnTotalQuantity].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTotalQuantity])).ToString();
                                    drHSN[hsnTotalValue] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTotalValue] != null).Sum(x => x[hsnTotalValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTotalValue])).ToString();
                                    drHSN[hsnTaxableValue] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTaxableValue] != null).Sum(x => x[hsnTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTaxableValue])).ToString();
                                    drHSN[hsnIntegratedTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnIntegratedTaxAmount] != null).Sum(x => x[hsnIntegratedTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnIntegratedTaxAmount])).ToString();
                                    drHSN[hsnCentralTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCentralTaxAmount] != null).Sum(x => x[hsnCentralTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCentralTaxAmount])).ToString();
                                    drHSN[hsnStateUTTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnStateUTTaxAmount] != null).Sum(x => x[hsnStateUTTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnStateUTTaxAmount])).ToString();
                                    drHSN[hsnCessAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCessAmount] != null).Sum(x => x[hsnCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCessAmount])).ToString();
                                    drHSN["Status"] = "Total";
                                    dtHSN.Rows.Add(drHSN);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1_HSNSummaryTallyBulkEntry(dtHSN, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "hsn data entry error..!\n"; }
                                }
                                #endregion

                                #region DOC

                                if (dtDOC != null && dtDOC.Rows.Count > 0)
                                {
                                    DataRow drDOC = dtDOC.NewRow();
                                    drDOC["Total Number"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Total Number"] != null).Sum(x => x["Total Number"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Total Number"])).ToString();
                                    drDOC["Cancelled"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Cancelled"] != null).Sum(x => x["Cancelled"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cancelled"])).ToString();
                                    drDOC["Net Issued"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Net Issued"] != null).Sum(x => x["Net Issued"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Net Issued"])).ToString();
                                    drDOC["Status"] = "Total";
                                    dtDOC.Rows.Add(drDOC);

                                    _result = 0;
                                    _result = objGSTR5.GSTR13TallBulkEntry(dtDOC, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "docs data entry error..!\n"; }
                                }
                                #endregion

                                #region B2c
                                /*
                            if (dtB2C != null && dtB2C.Rows.Count > 0)
                            {
                                DataRow drb2C = dtB2C.NewRow();
                                drb2C[b2clInvNo] = dtB2C.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2clInvNo]).Trim() != "").GroupBy(x => x[b2clInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2C[b2clInvVal] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clInvVal] != null).Sum(x => x[b2clInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clInvVal])).ToString();
                                drb2C[b2clTax] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clTax] != null).Sum(x => x[b2clTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clTax])).ToString();
                                drb2C["IGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2C["CGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2C["SGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2C[b2clCESS] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                drb2C["Status"] = "Total";
                                dtB2C.Rows.Add(drb2C);

                                _result = 0;
                                _result = objGSTR5.GSTR1b2cTallyBulkEntry(dtB2C, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2C data entry error..!\n"; }
                            }
                            */
                                #endregion

                                #region b2cl

                                if (dtB2CL != null && dtB2CL.Rows.Count > 0)
                                {
                                    DataRow drB2CL = dtB2CL.NewRow();
                                    drB2CL[b2clInvNo] = dtB2CL.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2clInvNo]).Trim() != "").GroupBy(x => x[b2clInvNo]).Select(x => x.First()).Distinct().Count();
                                    drB2CL[b2clInvVal] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clInvVal] != null).Sum(x => x[b2clInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clInvVal])).ToString();
                                    drB2CL[b2clTax] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clTax] != null).Sum(x => x[b2clTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clTax])).ToString();
                                    drB2CL[b2clCESS] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                    drB2CL["Status"] = "Total";
                                    dtB2CL.Rows.Add(drB2CL);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1b2clargeTallyBulkEntry(dtB2CL, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "B2CL data entry error..!\n"; }
                                }
                                #endregion

                                #region b2cs

                                if (dtB2CS != null && dtB2CS.Rows.Count > 0)
                                {
                                    dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csRate, typeof(string));
                                    dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csPOS, typeof(string));
                                    DataRow drB2CS = dtB2CS.NewRow();

                                    #region Rate Count
                                    var result2 = (from row in dtB2CS.AsEnumerable()
                                                   where row.Field<string>(b2csPOS) != "" && row.Field<string>(b2csRate) != ""
                                                   group row by new { Fld_POS = row.Field<string>(b2csPOS), Fld_Rate = row.Field<string>(b2csRate) } into grp
                                                   select new
                                                   {
                                                       Fld_POS = grp.Key.Fld_POS,
                                                       Fld_Rate = grp.Key.Fld_Rate
                                                   }).ToList();

                                    if (result2.Count != null && result2.Count > 0)
                                        drB2CS[b2csRate] = result2.Count;
                                    else
                                        drB2CS[b2csRate] = 0;
                                    #endregion

                                    drB2CS[b2csTax] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csTax] != null).Sum(x => x[b2csTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csTax])).ToString();
                                    drB2CS["IGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drB2CS["CGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                    drB2CS["SGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                    drB2CS[b2csCESS] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csCESS] != null).Sum(x => x[b2csCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csCESS])).ToString();

                                    drB2CS["Status"] = "Total";
                                    dtB2CS.Rows.Add(drB2CS);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1b2csamllBulkEntry(dtB2CS, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "B2CS data entry error..!\n"; }
                                }
                                #endregion

                                #region Export

                                if (dtEXP != null && dtEXP.Rows.Count > 0)
                                {
                                    DataRow drExp = dtEXP.NewRow();
                                    drExp[expInvNo] = dtEXP.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[expInvNo]).Trim() != "").GroupBy(x => x[expInvNo]).Select(x => x.First()).Distinct().Count();
                                    drExp[expInvVal] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvVal] != null).Sum(x => x[expInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvVal])).ToString();
                                    drExp[expInvTax] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvTax] != null).Sum(x => x[expInvTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvTax])).ToString();
                                    drExp["IGST Amount"] = dtEXP.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drExp["Cess Amount"] = dtEXP.Rows.Cast<DataRow>().Where(x => x["Cess Amount"] != null).Sum(x => x["Cess Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cess Amount"])).ToString();
                                    drExp["Status"] = "Total";
                                    dtEXP.Rows.Add(drExp);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1expTallyBulkEntry(dtEXP, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "EXP data entry error..!\n"; }
                                }
                                #endregion

                                #region cdn

                                if (dtCDNR != null && dtCDNR.Rows.Count > 0)
                                {
                                    DataRow drCDNR = dtCDNR.NewRow();
                                    drCDNR[cdnrInvoiceAdvanceReceiptNumber] = dtCDNR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnrInvoiceAdvanceReceiptNumber]).Trim() != "").GroupBy(x => x[cdnrInvoiceAdvanceReceiptNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNR[cdnrNoteRefundVoucherNumber] = dtCDNR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnrNoteRefundVoucherNumber]).Trim() != "").GroupBy(x => x[cdnrNoteRefundVoucherNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNR[cdnrNoteRefundVoucherValue] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrNoteRefundVoucherValue] != null).Sum(x => x[cdnrNoteRefundVoucherValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrNoteRefundVoucherValue])).ToString();
                                    drCDNR[cdnrTaxableValue] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrTaxableValue] != null).Sum(x => x[cdnrTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrTaxableValue])).ToString();
                                    drCDNR[cdnrCessAmount] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrCessAmount] != null).Sum(x => x[cdnrCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrCessAmount])).ToString();
                                    drCDNR["CGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                    drCDNR["SGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                    drCDNR["IGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drCDNR["Status"] = "Total";
                                    dtCDNR.Rows.Add(drCDNR);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1cdnrTallyBulkEntry(dtCDNR, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "CDNR data entry error..!\n"; }
                                }
                                #endregion

                                #region cdnur

                                if (dtCDNUR != null && dtCDNUR.Rows.Count > 0)
                                {
                                    DataRow drCDNUR = dtCDNUR.NewRow();
                                    drCDNUR[cdnurInvoiceAdvanceReceiptNumber] = dtCDNUR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnurInvoiceAdvanceReceiptNumber]).Trim() != "").GroupBy(x => x[cdnurInvoiceAdvanceReceiptNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNUR[cdnurNoteRefundVoucherNumber] = dtCDNUR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnurNoteRefundVoucherNumber]).Trim() != "").GroupBy(x => x[cdnurNoteRefundVoucherNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNUR[cdnurNoteRefundVoucherValue] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurNoteRefundVoucherValue] != null).Sum(x => x[cdnurNoteRefundVoucherValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurNoteRefundVoucherValue])).ToString();
                                    drCDNUR[cdnurTaxableValue] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurTaxableValue] != null).Sum(x => x[cdnurTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurTaxableValue])).ToString();
                                    drCDNUR[cdnurCessAmount] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurCessAmount] != null).Sum(x => x[cdnurCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurCessAmount])).ToString();
                                    drCDNUR["CGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                    drCDNUR["SGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                    drCDNUR["IGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drCDNUR["Status"] = "Total";
                                    dtCDNUR.Rows.Add(drCDNUR);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1cdnurTallyBulkEntry(dtCDNUR, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "cdnur data entry error..!\n"; }
                                }
                                #endregion

                                #region AT

                                if (dtAT != null && dtAT.Rows.Count > 0)
                                {
                                    dtAT = Utility.ChangeColumnDataType(dtAT, atPlaceOfSupply, typeof(string));
                                    DataRow drAT = dtAT.NewRow();

                                    #region POS Count
                                    var result2 = (from row in dtAT.AsEnumerable()
                                                   where row.Field<string>(atPlaceOfSupply) != ""
                                                   group row by new
                                                   {
                                                       Fld_POS = row.Field<string>(atPlaceOfSupply)
                                                   } into grp
                                                   select new
                                                   {
                                                       Fld_POS = grp.Key.Fld_POS,
                                                   }).ToList();

                                    if (result2.Count != null && result2.Count > 0)
                                        drAT[atPlaceOfSupply] = result2.Count;
                                    else
                                        drAT[atPlaceOfSupply] = 0;
                                    #endregion

                                    drAT["IGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                    drAT["CGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                    drAT["SGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                    drAT[atCessAmount] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                    drAT["Status"] = "Total";
                                    dtAT.Rows.Add(drAT);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1atTallyBulkEntry(dtAT, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "AT data entry error..!\n"; }
                                }
                                #endregion

                                #region ATD

                                if (dtATD != null && dtATD.Rows.Count > 0)
                                {
                                    dtATD = Utility.ChangeColumnDataType(dtATD, atdPlaceOfSupply, typeof(string));
                                    DataRow drATD = dtATD.NewRow();

                                    #region POS Count
                                    var result2 = (from row in dtATD.AsEnumerable()
                                                   where row.Field<string>(atdPlaceOfSupply) != ""
                                                   group row by new { Fld_POS = row.Field<string>(atdPlaceOfSupply) } into grp
                                                   select new
                                                   {
                                                       Fld_POS = grp.Key.Fld_POS,
                                                   }).ToList();

                                    if (result2.Count != null && result2.Count > 0)
                                        drATD[atdPlaceOfSupply] = result2.Count;
                                    else
                                        drATD[atdPlaceOfSupply] = 0;
                                    #endregion

                                    drATD["IGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                    drATD["CGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                    drATD["SGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                    drATD[atCessAmount] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                    drATD["Status"] = "Total";
                                    dtATD.Rows.Add(drATD);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1atdTallyBulkEntry(dtATD, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "atadj data entry error..!\n"; }
                                }
                                #endregion

                                #region TXPD
                                /*
                            if (dtTXPD != null && dtTXPD.Rows.Count > 0)
                            {
                                DataRow drTXPD = dtTXPD.NewRow();
                                drTXPD[txpdInvNo] = dtTXPD.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[txpdInvNo]).Trim() != "").GroupBy(x => x[txpdInvNo]).Select(x => x.First()).Distinct().Count();
                                drTXPD[txpdInvVal] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdInvVal] != null).Sum(x => x[txpdInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdInvVal])).ToString();
                                drTXPD[txpdIGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdIGSTAmt] != null).Sum(x => x[txpdIGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdIGSTAmt])).ToString();
                                drTXPD[txpdCGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCGSTAmt] != null).Sum(x => x[txpdCGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCGSTAmt])).ToString();
                                drTXPD[txpdSGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdSGSTAmt] != null).Sum(x => x[txpdSGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdSGSTAmt])).ToString();
                                drTXPD[txpdCESSAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCESSAmt] != null).Sum(x => x[txpdCESSAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCESSAmt])).ToString();
                                drTXPD["Status"] = "Total";
                                dtTXPD.Rows.Add(drTXPD);
                             * 
                             * _result = 0;
                            _result = objGSTR5.GSTR1txpdTallyBulkEntry(dtTXPD, Convert.ToString(CommonHelper.StatusText));
                            if (_result != 1)
                            { _str += "TXPD data entry error..!\n"; }
                            }                            
                             */
                                #endregion

                                #region Nil

                                if (dtNilRt != null && dtNilRt.Rows.Count > 0)
                                {
                                    _result = 0;
                                    _result = objGSTR5.GSTR1NilTallyBulkEntry(dtNilRt, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "exemp data entry error..!\n"; }
                                }
                                #endregion
                                #endregion
                                Application.DoEvents();
                                #region Amedment Data Entry
                                /*
                            #region B2BA

                            if (dtb2ba != null && dtb2ba.Rows.Count > 0)
                            {
                                DataRow drB2bA = dtb2ba.NewRow();
                                drB2bA[B2BA_OrgInvNo] = dtb2ba.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2BA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_RevInvNo] = dtb2ba.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_RevInvNo]).Trim() != "").GroupBy(x => x[B2BA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_InvVal] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_InvVal] != null).Sum(x => x[B2BA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_InvVal])).ToString();
                                drB2bA[B2BA_TaxVal] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_TaxVal] != null).Sum(x => x[B2BA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_TaxVal])).ToString();
                                drB2bA["b2baIGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baIGSTTAmt"] != null).Sum(x => x["b2baIGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baIGSTTAmt"])).ToString();
                                drB2bA["b2baCGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baCGSTTAmt"] != null).Sum(x => x["b2baCGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baCGSTTAmt"])).ToString();
                                drB2bA["b2baSGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baSGSTTAmt"] != null).Sum(x => x["b2baSGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baSGSTTAmt"])).ToString();
                                drB2bA[B2BA_Cess] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_Cess] != null).Sum(x => x[B2BA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_Cess])).ToString();
                                drB2bA["Status"] = "Total";
                                dtb2ba.Rows.Add(drB2bA);

                                _result = objGSTR5.GSTR1_B2BA_GovBulkEntry(dtb2ba, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2BA data entry error..!\n"; }
                            }


                            #endregion

                            #region b2clA

                            if (dtb2cla != null && dtb2cla.Rows.Count > 0)
                            {
                                DataRow drb2CLA = dtb2cla.NewRow();
                                drb2CLA[B2CLA_OrgInvNo] = dtb2cla.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2CLA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_RevInvNo] = dtb2cla.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_RevInvNo]).Trim() != "").GroupBy(x => x[B2CLA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_InvVal] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[B2CLA_InvVal] != null).Sum(x => x[B2CLA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_InvVal])).ToString();
                                drb2CLA[B2CLA_TaxVal] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[B2CLA_TaxVal] != null).Sum(x => x[B2CLA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_TaxVal])).ToString();
                                drb2CLA["IGST Amount"] = dtb2cla.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CLA[b2clCESS] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                drb2CLA["Status"] = "Total";
                                dtb2cla.Rows.Add(drb2CLA);

                                _result = 0;

                                _result = objGSTR5.GSTR1_B2CLA_GovBulkEntry(dtb2cla, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2CLA data entry error..!\n"; }
                            }
                            #endregion

                            #region b2csA

                            if (dtb2csa != null && dtb2csa.Rows.Count > 0)
                            {
                                DataRow drb2CSA = dtb2csa.NewRow();
                                drb2CSA[B2CSA_TaxVal] = dtb2csa.Rows.Cast<DataRow>().Where(x => x[B2CSA_TaxVal] != null).Sum(x => x[B2CSA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_TaxVal])).ToString();
                                drb2CSA["IGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CSA["CGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2CSA["SGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2CSA[B2CSA_Cess] = dtb2csa.Rows.Cast<DataRow>().Where(x => x[B2CSA_Cess] != null).Sum(x => x[B2CSA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_Cess])).ToString();
                                drb2CSA["Status"] = "Total";
                                dtb2csa.Rows.Add(drb2CSA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_B2CSA_GovBulkEntry(dtb2csa, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2CSA data entry error..!\n"; }
                            }
                            #endregion

                            #region ExportA

                            if (dtexpa != null && dtexpa.Rows.Count > 0)
                            {
                                DataRow drExpA = dtexpa.NewRow();
                                drExpA[EXPA_OrgInvNo] = dtexpa.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_OrgInvNo]).Trim() != "").GroupBy(x => x[EXPA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_RevInvNo] = dtexpa.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_RevInvNo]).Trim() != "").GroupBy(x => x[EXPA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_InvVal] = dtexpa.Rows.Cast<DataRow>().Where(x => x[EXPA_InvVal] != null).Sum(x => x[EXPA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_InvVal])).ToString();
                                drExpA[EXPA_TaxVal] = dtexpa.Rows.Cast<DataRow>().Where(x => x[EXPA_TaxVal] != null).Sum(x => x[EXPA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_TaxVal])).ToString();
                                drExpA["IGST Amount"] = dtexpa.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drExpA["Cess Amount"] = dtexpa.Rows.Cast<DataRow>().Where(x => x["Cess Amount"] != null).Sum(x => x["Cess Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cess Amount"])).ToString();
                                drExpA["Status"] = "Total";
                                dtexpa.Rows.Add(drExpA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_EXPA_GovBulkEntry(dtexpa, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "EXPA data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnA

                            if (dtcdnra != null && dtcdnra.Rows.Count > 0)
                            {
                                DataRow drCDNRA = dtcdnra.NewRow();
                                drCDNRA[CDNRA_OrgRecNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_OrgVouNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgVouNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_RefVouNo]).Trim() != "").GroupBy(x => x[CDNRA_RefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouVal] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_RefVouVal] != null).Sum(x => x[CDNRA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_RefVouVal])).ToString();
                                drCDNRA[CDNRA_TaxVal] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_TaxVal] != null).Sum(x => x[CDNRA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_TaxVal])).ToString();
                                drCDNRA[CDNRA_Cess] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_Cess] != null).Sum(x => x[CDNRA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_Cess])).ToString();
                                drCDNRA["CGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNRA["SGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNRA["IGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNRA["Status"] = "Total";
                                dtcdnra.Rows.Add(drCDNRA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNRA_GovBulkEntry(dtcdnra, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "CDNR data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnurA

                            if (dtcdnura != null && dtcdnura.Rows.Count > 0)
                            {
                                DataRow drCDNURA = dtcdnura.NewRow();
                                drCDNURA[CDNURA_OrgRecNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_OrgRefVouNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRefVouNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_RefNo]).Trim() != "").GroupBy(x => x[CDNURA_RefNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefVouVal] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_RefVouVal] != null).Sum(x => x[CDNURA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_RefVouVal])).ToString();
                                drCDNURA[CDNURA_TaxVal] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_TaxVal] != null).Sum(x => x[CDNURA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_TaxVal])).ToString();
                                drCDNURA[CDNURA_Cess] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_Cess] != null).Sum(x => x[CDNURA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_Cess])).ToString();
                                drCDNURA["CGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNURA["SGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNURA["IGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNURA["Status"] = "Total";
                                dtcdnura.Rows.Add(drCDNURA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNURA_GovBulkEntry(dtcdnura, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "cdnura data entry error..!\n"; }
                            }
                            #endregion

                            #region ATA

                            if (dtata != null && dtata.Rows.Count > 0)
                            {
                                DataRow drATA = dtata.NewRow();
                                drATA["IGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drATA["CGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drATA["SGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drATA[atCessAmount] = dtata.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                drATA["Status"] = "Total";
                                dtata.Rows.Add(drATA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATA_GovBulkEntry(dtata, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "ATA data entry error..!\n"; }
                            }
                            #endregion

                            #region ATDA

                            if (dtatadja != null && dtatadja.Rows.Count > 0)
                            {
                                DataRow drATDA = dtatadja.NewRow();
                                drATDA["IGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drATDA["CGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drATDA["SGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drATDA[ATADJA_Cess] = dtatadja.Rows.Cast<DataRow>().Where(x => x[ATADJA_Cess] != null).Sum(x => x[ATADJA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[ATADJA_Cess])).ToString();
                                drATDA["Status"] = "Total";
                                dtatadja.Rows.Add(drATDA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATADJA_GovBulkEntry(dtatadja, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "atadja data entry error..!\n"; }
                            }
                            #endregion
                            */
                                #endregion

                                pbGSTR1.Visible = false;

                                if (_str != "")
                                {
                                    CommonHelper.ErrorList = Convert.ToString(_str);
                                    SPQErrorList obj = new SPQErrorList();
                                    obj.ShowDialog();
                                }
                                else
                                {
                                    MessageBox.Show("Tally data imported successfully...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    Getdata();
                                    GetGSTR1VsGSTR3B();
                                }
                                #endregion
                            }
                            else
                            {
                                #region  Regular Validation
                                #region B2B
                                if (dtB2B.Rows.Count > 0)
                                {
                                    if (dtB2B.Columns.Count > 13)
                                    {
                                        for (int i = 0; i < dtB2B.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtB2B.Columns.Count; j++)
                                            {
                                                if (dtB2B.Columns.Count > 13)
                                                {
                                                    dtB2B.Columns.RemoveAt(dtB2B.Columns.Count - 1);
                                                    dtB2B.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtB2B.Rows[0].Delete();
                                    //dtB2B.Columns[0].ColumnName = "GSTIN/UIN of Recipient";
                                    //dtB2B.Columns[1].ColumnName = "Invoice Number";
                                    //dtB2B.Columns[2].ColumnName = "Invoice date";
                                    //dtB2B.Columns[3].ColumnName = "Invoice Value";
                                    //dtB2B.Columns[4].ColumnName = "Place Of Supply";
                                    //dtB2B.Columns[5].ColumnName = "Reverse Charge";
                                    //dtB2B.Columns[6].ColumnName = "Applicable % of Tax Rate";
                                    //dtB2B.Columns[7].ColumnName = "Invoice Type";
                                    //dtB2B.Columns[8].ColumnName = "E-Commerce GSTIN";
                                    //dtB2B.Columns[9].ColumnName = "Rate";
                                    //dtB2B.Columns[10].ColumnName = "Taxable Value";
                                    //dtB2B.Columns[11].ColumnName = "Cess Amount";
                                    //dtB2B.AcceptChanges();
                                }
                                for (int i = 0; i < dtB2B.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bPOS, typeof(string));
                                        dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bRevCharge, typeof(string));

                                        dtB2B.Columns.Add("Status");
                                        dtB2B.Columns.Add("b2bIGSTTAmt");
                                        dtB2B.Columns.Add("b2bCGSTTAmt");
                                        dtB2B.Columns.Add("b2bSGSTTAmt");
                                    }

                                    dtB2B.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim() != "")
                                        dtB2B.Rows[i][b2bPOS] = Utility.strValidStateName(Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim());

                                    if (Convert.ToString(dtB2B.Rows[i][b2bRevCharge]).Trim().ToLower() == "yes" || Convert.ToString(dtB2B.Rows[i][b2bRevCharge]).Trim().ToLower() == "y")
                                        dtB2B.Rows[i][b2bRevCharge] = "Yes";
                                    else
                                        dtB2B.Rows[i][b2bRevCharge] = "No";

                                    //if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "regular")
                                    //    dtB2B.Rows[i][b2bInvType] = "Regular";
                                    //else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports with payment")
                                    //    dtB2B.Rows[i][b2bInvType] = "SEZ Exports with payment";
                                    //else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports without payment")
                                    //    dtB2B.Rows[i][b2bInvType] = "SEZ exports without payment";
                                    //else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "deemed exports")
                                    //    dtB2B.Rows[i][b2bInvType] = "Deemed Exports";
                                    //else
                                    //    dtB2B.Rows[i][b2bInvType] = "";


                                    if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "regular")
                                        dtB2B.Rows[i][b2bInvType] = "Regular";
                                    else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports with payment" || Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez supplies with payment")
                                        dtB2B.Rows[i][b2bInvType] = "SEZ Exports with payment";
                                    else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports without payment" || Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez supplies without payment")
                                        dtB2B.Rows[i][b2bInvType] = "SEZ exports without payment";
                                    else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "deemed exports")
                                        dtB2B.Rows[i][b2bInvType] = "Deemed Exports";
                                    else
                                        dtB2B.Rows[i][b2bInvType] = "";


                                    int sj = dtB2B.Columns[b2bInvDate].Ordinal;
                                    dtB2B = Utility.ChangeColumnDataType(dtB2B, dtB2B.Columns[b2bInvDate].ColumnName, typeof(string));
                                    dtB2B.Columns[b2bInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2B.Rows[i][b2bInvDate]);
                                        dtB2B.Rows[i][b2bInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2B.Rows[i][b2bInvDate] = "";
                                    }

                                    if (Convert.ToString(dtB2B.Rows[i][b2bRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2B.Rows[i][b2bRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtB2B.Rows[i][b2bRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2B.Rows[i][b2bPOS]));
                                        if (Pos != "")
                                        {
                                            if (Pos.Length > 2)
                                                StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                            else
                                                StateId = Convert.ToInt16(Pos);
                                        }

                                        if (dtB2B.Rows[i][b2bInvType] == "Regular")
                                        {
                                            if (StateId == CompanyGSTNState)
                                            {
                                                decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;

                                                decimal Amt = Math.Round((Amount / 2), 2, MidpointRounding.AwayFromZero);
                                                //Amt = Math.Truncate(Amt * 100) / 100;

                                                dtB2B.Rows[i]["b2bCGSTTAmt"] = Amt.ToString();
                                                dtB2B.Rows[i]["b2bSGSTTAmt"] = Amt.ToString();
                                            }
                                            else
                                            {
                                                decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;
                                                IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                                //IGSTAmt = Math.Truncate(IGSTAmt * 100) / 100;
                                                dtB2B.Rows[i]["b2bIGSTTAmt"] = IGSTAmt.ToString();
                                            }
                                        }
                                        else if (dtB2B.Rows[i][b2bInvType] == "SEZ Exports with payment" || dtB2B.Rows[i][b2bInvType] == "Deemed Exports")
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtB2B.Rows[i][b2bRate].ToString()) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            //IGSTAmt = Math.Truncate(IGSTAmt * 100) / 100;
                                            dtB2B.Rows[i]["b2bIGSTTAmt"] = IGSTAmt.ToString();
                                        }
                                        else if (dtB2B.Rows[i][b2bInvType] == "SEZ exports without payment")
                                        {
                                            dtB2B.Rows[i]["b2bCGSTTAmt"] = "";
                                            dtB2B.Rows[i]["b2bSGSTTAmt"] = "";
                                            dtB2B.Rows[i]["b2bIGSTTAmt"] = "";
                                        }
                                    }


                                    if (colRate != null)
                                        dtB2B.Rows[i][b2bRate] = colRate;
                                }
                                #endregion

                                #region HSN
                                if (dtHSN.Rows.Count > 0)
                                {
                                    if (dtHSN.Columns.Count > 10)
                                    {
                                        for (int i = 0; i < dtHSN.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtHSN.Columns.Count; j++)
                                            {
                                                if (dtHSN.Columns.Count > 10)
                                                {
                                                    dtHSN.Columns.RemoveAt(dtHSN.Columns.Count - 1);
                                                    dtHSN.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtHSN.Rows[0].Delete();
                                    //dtHSN.Columns[0].ColumnName = "HSN";
                                    //dtHSN.Columns[1].ColumnName = "Description";
                                    //dtHSN.Columns[2].ColumnName = "UQC";
                                    //dtHSN.Columns[3].ColumnName = "Total Quantity";
                                    //dtHSN.Columns[4].ColumnName = "Total Value";
                                    //dtHSN.Columns[5].ColumnName = "Taxable Value";
                                    //dtHSN.Columns[6].ColumnName = "Integrated Tax Amount";
                                    //dtHSN.Columns[7].ColumnName = "Central Tax Amount";
                                    //dtHSN.Columns[8].ColumnName = "State/UT Tax Amount";
                                    //dtHSN.Columns[9].ColumnName = "Cess Amount";
                                    //dtHSN.AcceptChanges();
                                }
                                for (int i = 0; i < dtHSN.Rows.Count; i++)
                                {
                                    if (i == 0)
                                        dtHSN.Columns.Add("Status");

                                    dtHSN.Rows[i]["Status"] = "Draft";

                                    if (!chkHSNQOC(Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim()))
                                        dtHSN.Rows[i][hsnUQC] = "";
                                    else
                                        dtHSN.Rows[i][hsnUQC] = Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim();
                                }
                                #endregion

                                #region DOC
                                if (dtDOC.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dtDOC.Columns.Count; i++)
                                    {
                                        if (dtDOC.Columns.Count > 5)
                                        {
                                            for (int j = 0; j < dtDOC.Columns.Count; j++)
                                            {
                                                if (dtDOC.Columns.Count > 5)
                                                {
                                                    dtDOC.Columns.RemoveAt(dtDOC.Columns.Count - 1);
                                                    dtDOC.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtDOC.Rows[0].Delete();
                                    //dtDOC.Rows[1].Delete();
                                    //dtDOC.Rows[2].Delete();

                                }

                                dtDOC.Columns[0].ColumnName = "Nature of Document";
                                dtDOC.Columns[1].ColumnName = "Sr. No. From";
                                dtDOC.Columns[2].ColumnName = "Sr. No. To";
                                dtDOC.Columns[3].ColumnName = "Total Number";
                                dtDOC.Columns[4].ColumnName = "Cancelled";
                                dtDOC.AcceptChanges();

                                for (int i = 0; i < dtDOC.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtDOC.Columns.Add("Status");
                                        dtDOC.Columns.Add("Net Issued");
                                    }
                                    dtDOC.Rows[i]["Status"] = "Draft";

                                    if (Utility.NatureOfDocument(dtDOC.Rows[i]["Nature of Document"].ToString()))
                                    {
                                        dtDOC.Rows[i]["Nature of Document"] = Utility.StrNatureOfDocument(dtDOC.Rows[i]["Nature of Document"].ToString());
                                    }
                                    else
                                    {
                                        dtDOC.Rows[i]["Nature of Document"] = "";
                                    }


                                    if (Convert.ToString(dtDOC.Rows[i][docTotalNumber]) != "" && Convert.ToString(dtDOC.Rows[i][docCancelled]) != "")
                                    {
                                        decimal NetIssued = Convert.ToDecimal(dtDOC.Rows[i][docTotalNumber]) - Convert.ToDecimal(dtDOC.Rows[i][docCancelled]);
                                        NetIssued = Math.Round(NetIssued, 2);
                                        dtDOC.Rows[i]["Net Issued"] = NetIssued;
                                    }
                                }
                                #endregion

                                #region b2cl
                                if (dtB2CL.Rows.Count > 0)
                                {
                                    if (dtB2CL.Columns.Count > 10)
                                    {
                                        for (int i = 0; i < dtB2CL.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtB2CL.Columns.Count; j++)
                                            {
                                                if (dtB2CL.Columns.Count > 10)
                                                {
                                                    dtB2CL.Columns.RemoveAt(dtB2CL.Columns.Count - 1);
                                                    dtB2CL.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtB2CL.Rows[0].Delete();
                                    //dtB2CL.Columns[0].ColumnName = "Invoice Number";
                                    //dtB2CL.Columns[1].ColumnName = "Invoice date";
                                    //dtB2CL.Columns[2].ColumnName = "Invoice Value";
                                    //dtB2CL.Columns[3].ColumnName = "Place Of Supply";
                                    //dtB2CL.Columns[4].ColumnName = "Applicable % of Tax Rate";
                                    //dtB2CL.Columns[5].ColumnName = "Rate";
                                    //dtB2CL.Columns[6].ColumnName = "Taxable Value";
                                    //dtB2CL.Columns[7].ColumnName = "Cess Amount";
                                    //dtB2CL.Columns[8].ColumnName = "E-Commerce GSTIN";
                                    //dtB2CL.AcceptChanges();
                                }
                                for (int i = 0; i < dtB2CL.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CL = Utility.ChangeColumnDataType(dtB2CL, b2clPOS, typeof(string));
                                        dtB2CL.Columns.Add("Status");
                                        dtB2CL.Columns.Add("IGST Amount");
                                    }

                                    dtB2CL.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2CL.Rows[i][b2clPOS]).Trim() != "")
                                        dtB2CL.Rows[i][b2clPOS] = Utility.strValidStateName(Convert.ToString(dtB2CL.Rows[i][b2clPOS]).Split('-')[0]);

                                    int sj = dtB2CL.Columns[b2clInvDate].Ordinal;
                                    dtB2CL = Utility.ChangeColumnDataType(dtB2CL, dtB2CL.Columns[b2clInvDate].ColumnName, typeof(string));
                                    dtB2CL.Columns[b2clInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtB2CL.Rows[i][b2clInvDate]);
                                        dtB2CL.Rows[i][b2clInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtB2CL.Rows[i][b2clInvDate] = "";
                                    }

                                    if (Convert.ToString(dtB2CL.Rows[i][b2clRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2CL.Rows[i][b2clRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtB2CL.Rows[i][b2clRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2CL.Rows[i][b2clPOS]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CL.Rows[i][b2clTax].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CL.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CL.Rows[i][b2clTax].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CL.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }

                                #endregion

                                #region b2cs
                                if (dtB2CS.Rows.Count > 0)
                                {
                                    if (dtB2CS.Columns.Count > 7)
                                    {
                                        for (int i = 0; i < dtB2CS.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtB2CS.Columns.Count; j++)
                                            {
                                                if (dtB2CS.Columns.Count > 7)
                                                {
                                                    dtB2CS.Columns.RemoveAt(dtB2CS.Columns.Count - 1);
                                                    dtB2CS.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtB2CS.Rows[0].Delete();
                                    //dtB2CS.Columns[0].ColumnName = "Type";
                                    //dtB2CS.Columns[1].ColumnName = "Place Of Supply";
                                    //dtB2CS.Columns[2].ColumnName = "Rate";
                                    //dtB2CS.Columns[3].ColumnName = "Taxable Value";
                                    //dtB2CS.Columns[4].ColumnName = "Cess Amount";
                                    //dtB2CS.Columns[5].ColumnName = "E-Commerce GSTIN";
                                    //dtB2CS.AcceptChanges();
                                }
                                for (int i = 0; i < dtB2CS.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csPOS, typeof(string));
                                        dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csType, typeof(string));
                                        dtB2CS.Columns.Add("Status");
                                        dtB2CS.Columns.Add("IGST Amount");
                                        dtB2CS.Columns.Add("CGST Amount");
                                        dtB2CS.Columns.Add("SGST Amount");
                                    }

                                    dtB2CS.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtB2CS.Rows[i][b2csPOS]).Trim() != "")
                                        dtB2CS.Rows[i][b2csPOS] = Utility.strValidStateName(Convert.ToString(dtB2CS.Rows[i][b2csPOS]).Split('-')[0]);


                                    if (Convert.ToString(dtB2CS.Rows[i][b2csRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2CS.Rows[i][b2csRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtB2CS.Rows[i][b2csRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2CS.Rows[i][b2csPOS]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CS.Rows[i][b2csTax].ToString()) / 100;
                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CS.Rows[i]["CGST Amount"] = Amt.ToString();
                                            dtB2CS.Rows[i]["SGST Amount"] = Amt.ToString();
                                            dtB2CS.Rows[i][b2csType] = "Intra";
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CS.Rows[i][b2csTax].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtB2CS.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                            dtB2CS.Rows[i][b2csType] = "Inter";
                                        }
                                    }
                                }

                                #endregion

                                #region EXP
                                if (dtEXP.Rows.Count > 0)
                                {
                                    if (dtEXP.Columns.Count > 11)
                                    {
                                        for (int i = 0; i < dtEXP.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtEXP.Columns.Count; j++)
                                            {
                                                if (dtEXP.Columns.Count > 11)
                                                {
                                                    dtEXP.Columns.RemoveAt(dtEXP.Columns.Count - 1);
                                                    dtEXP.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtEXP.Rows[0].Delete();
                                    //dtEXP.Columns[0].ColumnName = "Export Type";
                                    //dtEXP.Columns[1].ColumnName = "Invoice Number";
                                    //dtEXP.Columns[2].ColumnName = "Invoice date";
                                    //dtEXP.Columns[3].ColumnName = "Invoice Value";
                                    //dtEXP.Columns[4].ColumnName = "Port Code";
                                    //dtEXP.Columns[5].ColumnName = "Shipping Bill Number";
                                    //dtEXP.Columns[6].ColumnName = "Shipping Bill Date";
                                    //dtEXP.Columns[7].ColumnName = "Applicable % of Tax Rate";
                                    //dtEXP.Columns[8].ColumnName = "Rate";
                                    //dtEXP.Columns[9].ColumnName = "Taxable Value";
                                    //dtEXP.Columns[10].ColumnName = "Cess Amount";
                                    //dtEXP.AcceptChanges();
                                }
                                for (int i = 0; i < dtEXP.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtEXP.Columns.Add("Status");
                                        dtEXP.Columns.Add("IGST Amount");
                                    }
                                    dtEXP.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtEXP.Rows[i][expType]).Trim() != "")
                                        dtEXP.Rows[i][expType] = GetExportType(Convert.ToString(dtEXP.Rows[i][expType]).Trim(), "exp");

                                    int sj = dtEXP.Columns[expInvDate].Ordinal;
                                    dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expInvDate].ColumnName, typeof(string));
                                    dtEXP.Columns[expInvDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expInvDate]);
                                        dtEXP.Rows[i][expInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXP.Rows[i][expInvDate] = "";
                                    }

                                    sj = dtEXP.Columns[expShipDate].Ordinal;
                                    dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expShipDate].ColumnName, typeof(string));
                                    dtEXP.Columns[expShipDate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expShipDate]);
                                        dtEXP.Rows[i][expShipDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtEXP.Rows[i][expShipDate] = "";
                                    }

                                    if (Convert.ToString(dtEXP.Rows[i][expRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtEXP.Rows[i][expRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtEXP.Rows[i][expRate]);

                                    if (colRate != null)
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtEXP.Rows[i][expInvTax].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtEXP.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                    else
                                    {
                                        dtEXP.Rows[i]["IGST Amount"] = "";
                                    }
                                }

                                #endregion

                                #region CDNR
                                if (dtCDNR.Rows.Count > 0)
                                {
                                    if (dtCDNR.Columns.Count > 14)
                                    {
                                        for (int i = 0; i < dtCDNR.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtCDNR.Columns.Count; j++)
                                            {
                                                if (dtCDNR.Columns.Count > 14)
                                                {
                                                    dtCDNR.Columns.RemoveAt(dtCDNR.Columns.Count - 1);
                                                    dtCDNR.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    ////dtCDNR.Rows[0].Delete();
                                    //dtCDNR.Columns[0].ColumnName = "GSTIN/UIN of Recipient";
                                    //dtCDNR.Columns[1].ColumnName = "Invoice/Advance Receipt Number";
                                    //dtCDNR.Columns[2].ColumnName = "Invoice/Advance Receipt date";
                                    //dtCDNR.Columns[3].ColumnName = "Note/Refund Voucher Number";
                                    //dtCDNR.Columns[4].ColumnName = "Note/Refund Voucher date";
                                    //dtCDNR.Columns[5].ColumnName = "Document Type";
                                    ////dtCDNR.Columns[6].ColumnName = "Reason For Issuing document";
                                    //dtCDNR.Columns[6].ColumnName = "Place Of Supply";
                                    //dtCDNR.Columns[7].ColumnName = "Note/Refund Voucher Value";
                                    //dtCDNR.Columns[8].ColumnName = "Applicable % of Tax Rate";
                                    //dtCDNR.Columns[9].ColumnName = "Rate";
                                    //dtCDNR.Columns[10].ColumnName = "Taxable Value";
                                    //dtCDNR.Columns[11].ColumnName = "Cess Amount";
                                    //dtCDNR.Columns[12].ColumnName = "Pre GST";
                                    //dtCDNR.AcceptChanges();
                                }
                                for (int i = 0; i < dtCDNR.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtCDNR.Columns.Add("Status");
                                        dtCDNR.Columns.Add("IGST Amount");
                                        dtCDNR.Columns.Add("CGST Amount");
                                        dtCDNR.Columns.Add("SGST Amount");
                                        dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrPlaceOfSupply, typeof(string));
                                        dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrPreGST, typeof(string));
                                        dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrDocumentType, typeof(string));
                                        //dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrReasonForIssuingdocument, typeof(string));
                                    }

                                    dtCDNR.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]).Trim() != "")
                                        dtCDNR.Rows[i][cdnrPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrPreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtCDNR.Rows[i][cdnrPreGST]).Trim().ToLower() == "y")
                                        dtCDNR.Rows[i][cdnrPreGST] = "Yes";
                                    else
                                        dtCDNR.Rows[i][cdnrPreGST] = "No";

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrDocumentType]).Trim() != "")
                                        dtCDNR.Rows[i][cdnrDocumentType] = GetExportType(Convert.ToString(dtCDNR.Rows[i][cdnrDocumentType]), "cdnr");

                                    //if (!ValidateData(Convert.ToString(dtCDNR.Rows[i][cdnrReasonForIssuingdocument]).Trim(), "cdnReason"))
                                    //    dtCDNR.Rows[i][cdnrReasonForIssuingdocument] = "";
                                    //else
                                    //    dtCDNR.Rows[i][cdnrReasonForIssuingdocument] = Convert.ToString(dtCDNR.Rows[i][cdnrReasonForIssuingdocument]).Trim();

                                    int sj = dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].Ordinal;
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].ColumnName, typeof(string));
                                    dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate]);
                                        dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate] = "";
                                    }

                                    sj = dtCDNR.Columns[cdnrNoteRefundVoucherdate].Ordinal;
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnrNoteRefundVoucherdate].ColumnName, typeof(string));
                                    dtCDNR.Columns[cdnrNoteRefundVoucherdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnrNoteRefundVoucherdate]);
                                        dtCDNR.Rows[i][cdnrNoteRefundVoucherdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNR.Rows[i][cdnrNoteRefundVoucherdate] = "";
                                    }

                                    if (Convert.ToString(dtCDNR.Rows[i][cdnrRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtCDNR.Rows[i][cdnrRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtCDNR.Rows[i][cdnrRate]);

                                    if (colRate != null)
                                    {

                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNR.Rows[i][cdnrTaxableValue].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNR.Rows[i]["CGST Amount"] = Amt.ToString();
                                            dtCDNR.Rows[i]["SGST Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNR.Rows[i][cdnrTaxableValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                    }

                                }

                                #endregion

                                #region CDNUR
                                if (dtCDNUR.Rows.Count > 0)
                                {
                                    if (dtCDNUR.Columns.Count > 13)
                                    {
                                        for (int i = 0; i < dtCDNUR.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtCDNUR.Columns.Count; j++)
                                            {
                                                if (dtCDNUR.Columns.Count > 13)
                                                {
                                                    dtCDNUR.Columns.RemoveAt(dtCDNUR.Columns.Count - 1);
                                                    dtCDNUR.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    ////dtCDNUR.Rows[0].Delete();
                                    //dtCDNUR.Columns[0].ColumnName = "UR Type";
                                    //dtCDNUR.Columns[1].ColumnName = "Note/Refund Voucher Number";
                                    //dtCDNUR.Columns[2].ColumnName = "Note/Refund Voucher date";
                                    //dtCDNUR.Columns[3].ColumnName = "Document Type";
                                    //dtCDNUR.Columns[4].ColumnName = "Invoice/Advance Receipt Number";
                                    //dtCDNUR.Columns[5].ColumnName = "Invoice/Advance Receipt date";
                                    ////dtCDNUR.Columns[6].ColumnName = "Reason For Issuing document";
                                    //dtCDNUR.Columns[6].ColumnName = "Place Of Supply";
                                    //dtCDNUR.Columns[7].ColumnName = "Note/Refund Voucher Value";
                                    //dtCDNUR.Columns[8].ColumnName = "Applicable % of Tax Rate";
                                    //dtCDNUR.Columns[9].ColumnName = "Rate";
                                    //dtCDNUR.Columns[10].ColumnName = "Taxable Value";
                                    //dtCDNUR.Columns[11].ColumnName = "Cess Amount";
                                    //dtCDNUR.Columns[12].ColumnName = "Pre GST";
                                    //dtCDNUR.AcceptChanges();
                                }
                                for (int i = 0; i < dtCDNUR.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtCDNUR.Columns.Add("Status");
                                        dtCDNUR.Columns.Add("IGST Amount");
                                        dtCDNUR.Columns.Add("CGST Amount");
                                        dtCDNUR.Columns.Add("SGST Amount");
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurPlaceOfSupply, typeof(string));
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurPreGST, typeof(string));
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurDocumentType, typeof(string));
                                        //dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurReasonForIssuingdocument, typeof(string));
                                        dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurURType, typeof(string));
                                    }

                                    dtCDNUR.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]).Trim() != "")
                                        dtCDNUR.Rows[i][cdnurPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurPreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtCDNUR.Rows[i][cdnurPreGST]).Trim().ToLower() == "y")
                                        dtCDNUR.Rows[i][cdnurPreGST] = "Yes";
                                    else
                                        dtCDNUR.Rows[i][cdnurPreGST] = "No";

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "b2cl")
                                        dtCDNUR.Rows[i][cdnurURType] = "B2C Large";
                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "expwp")
                                        dtCDNUR.Rows[i][cdnurURType] = "Export with payment of GST";
                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "expwop")
                                        dtCDNUR.Rows[i][cdnurURType] = "Export without payment of GST";

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurDocumentType]).Trim() != "")
                                        dtCDNUR.Rows[i][cdnurDocumentType] = GetExportType(Convert.ToString(dtCDNUR.Rows[i][cdnurDocumentType]), "cdnr");

                                    //if (!ValidateData(Convert.ToString(dtCDNUR.Rows[i][cdnurReasonForIssuingdocument]).Trim(), "cdnReason"))
                                    //    dtCDNUR.Rows[i][cdnurReasonForIssuingdocument] = "";
                                    //else
                                    //    dtCDNUR.Rows[i][cdnurReasonForIssuingdocument] = Convert.ToString(dtCDNUR.Rows[i][cdnurReasonForIssuingdocument]).Trim();

                                    int sj = dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].Ordinal;
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].ColumnName, typeof(string));
                                    dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate]);
                                        dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate] = "";
                                    }

                                    sj = dtCDNUR.Columns[cdnurNoteRefundVoucherdate].Ordinal;
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnurNoteRefundVoucherdate].ColumnName, typeof(string));
                                    dtCDNUR.Columns[cdnurNoteRefundVoucherdate].SetOrdinal(sj);

                                    try
                                    {
                                        DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate]);
                                        dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                    }
                                    catch (Exception)
                                    {
                                        dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate] = "";
                                    }

                                    if (Convert.ToString(dtCDNUR.Rows[i][cdnurRate]).Trim() != "")
                                    {
                                        colRate = 0;
                                    }

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtCDNUR.Rows[i][cdnurRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtCDNUR.Rows[i][cdnurRate]);

                                    if (colRate != null)
                                    {

                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]));

                                        if (Pos.Length > 0)
                                        {
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                            if (StateId == CompanyGSTNState)
                                            {
                                                decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;

                                                decimal Amt = Amount / 2;
                                                Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                                dtCDNUR.Rows[i]["CGST Amount"] = Amt.ToString();
                                                dtCDNUR.Rows[i]["SGST Amount"] = Amt.ToString();
                                            }
                                            else
                                            {
                                                decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;
                                                IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                                dtCDNUR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                            }
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNUR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                    }

                                }

                                #endregion

                                #region At
                                if (dtAT.Rows.Count > 0)
                                {
                                    if (dtAT.Columns.Count > 5)
                                    {
                                        for (int i = 0; i < dtAT.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtAT.Columns.Count; j++)
                                            {
                                                if (dtAT.Columns.Count > 5)
                                                {
                                                    dtAT.Columns.RemoveAt(dtAT.Columns.Count - 1);
                                                    dtAT.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtAT.Rows[0].Delete();
                                    //dtAT.Columns[0].ColumnName = "Place Of Supply";
                                    //dtAT.Columns[1].ColumnName = "Rate";
                                    //dtAT.Columns[2].ColumnName = "Gross Advance Received";
                                    //dtAT.Columns[3].ColumnName = "Cess Amount";
                                    //dtAT.AcceptChanges();
                                }
                                for (int i = 0; i < dtAT.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtAT = Utility.ChangeColumnDataType(dtAT, atPlaceOfSupply, typeof(string));
                                        dtAT.Columns.Add("Status");
                                        dtAT.Columns.Add("IGSTT Amount");
                                        dtAT.Columns.Add("CGSTT Amount");
                                        dtAT.Columns.Add("SGSTT Amount");
                                    }

                                    dtAT.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]).Trim() != "")
                                        dtAT.Rows[i][atPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtAT.Rows[i][atRate]).Trim() != "")
                                        colRate = 0;

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtAT.Rows[i][atRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtAT.Rows[i][atRate]);

                                    if (colRate != null)
                                    {

                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtAT.Rows[i][atGrossAdvanceReceived].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtAT.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                            dtAT.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtAT.Rows[i][atGrossAdvanceReceived].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtAT.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }
                                #endregion

                                #region Atd
                                if (dtATD.Rows.Count > 0)
                                {
                                    if (dtATD.Columns.Count > 5)
                                    {
                                        for (int i = 0; i < dtATD.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtATD.Columns.Count; j++)
                                            {
                                                if (dtATD.Columns.Count > 5)
                                                {
                                                    dtATD.Columns.RemoveAt(dtATD.Columns.Count - 1);
                                                    dtATD.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtATD.Rows[0].Delete();
                                    //dtATD.Columns[0].ColumnName = "Place Of Supply";
                                    //dtATD.Columns[1].ColumnName = "Rate";
                                    //dtATD.Columns[2].ColumnName = "Gross Advance Adjusted";
                                    //dtATD.Columns[3].ColumnName = "Cess Amount";
                                    //dtATD.AcceptChanges();
                                }
                                for (int i = 0; i < dtATD.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtATD = Utility.ChangeColumnDataType(dtATD, atPlaceOfSupply, typeof(string));
                                        dtATD.Columns.Add("Status");
                                        dtATD.Columns.Add("IGSTT Amount");
                                        dtATD.Columns.Add("CGSTT Amount");
                                        dtATD.Columns.Add("SGSTT Amount");
                                    }

                                    dtATD.Rows[i]["Status"] = "Draft";

                                    if (Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]).Trim() != "")
                                        dtATD.Rows[i][atdPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]).Split('-')[0]);

                                    if (Convert.ToString(dtATD.Rows[i][atdRate]).Trim() != "")
                                        colRate = 0;

                                    if (Utility.IsDecimalOrNumber(Convert.ToString(dtATD.Rows[i][atdRate]).Trim()))
                                        colRate += Convert.ToDecimal(dtATD.Rows[i][atdRate]);

                                    if (colRate != null)
                                    {
                                        int StateId = 0;
                                        int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                        string Pos = CommonHelper.GetStateCode(Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]));
                                        if (Pos != "")
                                            StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtATD.Rows[i][atdGrossAdvanceReceived].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtATD.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                            dtATD.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtATD.Rows[i][atdGrossAdvanceReceived].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtATD.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }
                                #endregion

                                #region Nil
                                if (dtNilRt.Rows.Count > 0)
                                {
                                    if (dtNilRt.Columns.Count > 4)
                                    {
                                        for (int i = 0; i < dtNilRt.Columns.Count; i++)
                                        {
                                            for (int j = 0; j < dtNilRt.Columns.Count; j++)
                                            {
                                                if (dtNilRt.Columns.Count > 4)
                                                {
                                                    dtNilRt.Columns.RemoveAt(dtNilRt.Columns.Count - 1);
                                                    dtNilRt.AcceptChanges();
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    //dtNilRt.Rows[0].Delete();
                                    //dtNilRt.Columns[0].ColumnName = "Description";
                                    //dtNilRt.Columns[1].ColumnName = "Nil Rated Supplies";
                                    //dtNilRt.Columns[2].ColumnName = "Exempted (other than nil rated/non GST supply )";
                                    //dtNilRt.Columns[3].ColumnName = "Non-GST supplies";
                                    //dtNilRt.AcceptChanges();
                                }
                                for (int i = 0; i < dtNilRt.Rows.Count; i++)
                                {
                                    if (i == 0)
                                    {
                                        dtNilRt.Columns.Add("Status");
                                    }
                                    dtNilRt.Rows[i]["Status"] = "Draft";
                                }
                                #endregion
                                #endregion

                                #region Data Entry

                                Application.DoEvents();
                                #region Regular Data Entry
                                #region B2b

                                if (dtB2B != null && dtB2B.Rows.Count > 0)
                                {
                                    DataRow drB2b = dtB2B.NewRow();
                                    drB2b[b2bInvNo] = dtB2B.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2bInvNo]).Trim() != "").GroupBy(x => x[b2bInvNo]).Select(x => x.First()).Distinct().Count();
                                    drB2b[b2binvValue] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2binvValue] != null).Sum(x => x[b2binvValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2binvValue])).ToString();
                                    drB2b["Taxable Value"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["Taxable Value"] != null).Sum(x => x["Taxable Value"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Taxable Value"])).ToString();
                                    drB2b["b2bIGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bIGSTTAmt"] != null).Sum(x => x["b2bIGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bIGSTTAmt"])).ToString();
                                    drB2b["b2bCGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bCGSTTAmt"] != null).Sum(x => x["b2bCGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bCGSTTAmt"])).ToString();
                                    drB2b["b2bSGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bSGSTTAmt"] != null).Sum(x => x["b2bSGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bSGSTTAmt"])).ToString();
                                    drB2b[b2bCESSAmt] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bCESSAmt] != null).Sum(x => x[b2bCESSAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bCESSAmt])).ToString();
                                    drB2b["Status"] = "Total";
                                    dtB2B.Rows.Add(drB2b);

                                    _result = objGSTR5.GSTR1b2bTallyBulkEntry(dtB2B, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "B2B data entry error..!\n"; }
                                }


                                #endregion

                                #region HSN

                                if (dtHSN != null && dtHSN.Rows.Count > 0)
                                {
                                    DataRow drHSN = dtHSN.NewRow();
                                    drHSN[hsnTotalQuantity] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTotalQuantity] != null).Sum(x => x[hsnTotalQuantity].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTotalQuantity])).ToString();
                                    drHSN[hsnTotalValue] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTotalValue] != null).Sum(x => x[hsnTotalValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTotalValue])).ToString();
                                    drHSN[hsnTaxableValue] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTaxableValue] != null).Sum(x => x[hsnTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTaxableValue])).ToString();
                                    drHSN[hsnIntegratedTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnIntegratedTaxAmount] != null).Sum(x => x[hsnIntegratedTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnIntegratedTaxAmount])).ToString();
                                    drHSN[hsnCentralTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCentralTaxAmount] != null).Sum(x => x[hsnCentralTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCentralTaxAmount])).ToString();
                                    drHSN[hsnStateUTTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnStateUTTaxAmount] != null).Sum(x => x[hsnStateUTTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnStateUTTaxAmount])).ToString();
                                    drHSN[hsnCessAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCessAmount] != null).Sum(x => x[hsnCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCessAmount])).ToString();
                                    drHSN["Status"] = "Total";
                                    dtHSN.Rows.Add(drHSN);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1_HSNSummaryTallyBulkEntry(dtHSN, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "hsn data entry error..!\n"; }
                                }
                                #endregion

                                #region DOC

                                if (dtDOC != null && dtDOC.Rows.Count > 0)
                                {
                                    DataRow drDOC = dtDOC.NewRow();
                                    drDOC["Total Number"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Total Number"] != null).Sum(x => x["Total Number"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Total Number"])).ToString();
                                    drDOC["Cancelled"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Cancelled"] != null).Sum(x => x["Cancelled"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cancelled"])).ToString();
                                    drDOC["Net Issued"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Net Issued"] != null).Sum(x => x["Net Issued"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Net Issued"])).ToString();
                                    drDOC["Status"] = "Total";
                                    dtDOC.Rows.Add(drDOC);

                                    _result = 0;
                                    _result = objGSTR5.GSTR13TallBulkEntry(dtDOC, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "docs data entry error..!\n"; }
                                }
                                #endregion

                                #region B2c
                                /*
                            if (dtB2C != null && dtB2C.Rows.Count > 0)
                            {
                                DataRow drb2C = dtB2C.NewRow();
                                drb2C[b2clInvNo] = dtB2C.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2clInvNo]).Trim() != "").GroupBy(x => x[b2clInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2C[b2clInvVal] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clInvVal] != null).Sum(x => x[b2clInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clInvVal])).ToString();
                                drb2C[b2clTax] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clTax] != null).Sum(x => x[b2clTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clTax])).ToString();
                                drb2C["IGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2C["CGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2C["SGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2C[b2clCESS] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                drb2C["Status"] = "Total";
                                dtB2C.Rows.Add(drb2C);

                                _result = 0;
                                _result = objGSTR5.GSTR1b2cTallyBulkEntry(dtB2C, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2C data entry error..!\n"; }
                            }
                            */
                                #endregion

                                #region b2cl

                                if (dtB2CL != null && dtB2CL.Rows.Count > 0)
                                {
                                    DataRow drB2CL = dtB2CL.NewRow();
                                    drB2CL[b2clInvNo] = dtB2CL.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2clInvNo]).Trim() != "").GroupBy(x => x[b2clInvNo]).Select(x => x.First()).Distinct().Count();
                                    drB2CL[b2clInvVal] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clInvVal] != null).Sum(x => x[b2clInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clInvVal])).ToString();
                                    drB2CL[b2clTax] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clTax] != null).Sum(x => x[b2clTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clTax])).ToString();
                                    drB2CL[b2clCESS] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                    drB2CL["Status"] = "Total";
                                    dtB2CL.Rows.Add(drB2CL);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1b2clargeTallyBulkEntry(dtB2CL, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "B2CL data entry error..!\n"; }
                                }
                                #endregion

                                #region b2cs

                                if (dtB2CS != null && dtB2CS.Rows.Count > 0)
                                {
                                    dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csPOS, typeof(string));
                                    dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csRate, typeof(string));
                                    DataRow drB2CS = dtB2CS.NewRow();

                                    #region Rate Count
                                    var result2 = (from row in dtB2CS.AsEnumerable()
                                                   where row.Field<string>(b2csPOS) != "" && row.Field<string>(b2csRate) != ""
                                                   group row by new { Fld_POS = row.Field<string>(b2csPOS), Fld_Rate = row.Field<string>(b2csRate) } into grp
                                                   select new
                                                   {
                                                       Fld_POS = grp.Key.Fld_POS,
                                                       Fld_Rate = grp.Key.Fld_Rate
                                                   }).ToList();

                                    if (result2.Count != null && result2.Count > 0)
                                        drB2CS[b2csRate] = result2.Count;
                                    else
                                        drB2CS[b2csRate] = 0;
                                    #endregion

                                    drB2CS[b2csTax] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csTax] != null).Sum(x => x[b2csTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csTax])).ToString();
                                    drB2CS["IGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drB2CS["CGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                    drB2CS["SGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                    drB2CS[b2csCESS] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csCESS] != null).Sum(x => x[b2csCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csCESS])).ToString();

                                    drB2CS["Status"] = "Total";
                                    dtB2CS.Rows.Add(drB2CS);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1b2csamllBulkEntry(dtB2CS, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "B2CS data entry error..!\n"; }
                                }
                                #endregion

                                #region Export

                                if (dtEXP != null && dtEXP.Rows.Count > 0)
                                {
                                    DataRow drExp = dtEXP.NewRow();
                                    drExp[expInvNo] = dtEXP.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[expInvNo]).Trim() != "").GroupBy(x => x[expInvNo]).Select(x => x.First()).Distinct().Count();
                                    drExp[expInvVal] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvVal] != null).Sum(x => x[expInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvVal])).ToString();
                                    drExp[expInvTax] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvTax] != null).Sum(x => x[expInvTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvTax])).ToString();
                                    drExp["IGST Amount"] = dtEXP.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drExp["Cess Amount"] = dtEXP.Rows.Cast<DataRow>().Where(x => x["Cess Amount"] != null).Sum(x => x["Cess Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cess Amount"])).ToString();
                                    drExp["Status"] = "Total";
                                    dtEXP.Rows.Add(drExp);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1expTallyBulkEntry(dtEXP, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "EXP data entry error..!\n"; }
                                }
                                #endregion

                                #region cdn

                                if (dtCDNR != null && dtCDNR.Rows.Count > 0)
                                {
                                    DataRow drCDNR = dtCDNR.NewRow();
                                    drCDNR[cdnrInvoiceAdvanceReceiptNumber] = dtCDNR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnrInvoiceAdvanceReceiptNumber]).Trim() != "").GroupBy(x => x[cdnrInvoiceAdvanceReceiptNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNR[cdnrNoteRefundVoucherNumber] = dtCDNR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnrNoteRefundVoucherNumber]).Trim() != "").GroupBy(x => x[cdnrNoteRefundVoucherNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNR[cdnrNoteRefundVoucherValue] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrNoteRefundVoucherValue] != null).Sum(x => x[cdnrNoteRefundVoucherValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrNoteRefundVoucherValue])).ToString();
                                    drCDNR[cdnrTaxableValue] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrTaxableValue] != null).Sum(x => x[cdnrTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrTaxableValue])).ToString();
                                    drCDNR[cdnrCessAmount] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrCessAmount] != null).Sum(x => x[cdnrCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrCessAmount])).ToString();
                                    drCDNR["CGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                    drCDNR["SGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                    drCDNR["IGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drCDNR["Status"] = "Total";
                                    dtCDNR.Rows.Add(drCDNR);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1cdnrTallyBulkEntry(dtCDNR, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "CDNR data entry error..!\n"; }
                                }
                                #endregion

                                #region cdnur

                                if (dtCDNUR != null && dtCDNUR.Rows.Count > 0)
                                {
                                    DataRow drCDNUR = dtCDNUR.NewRow();
                                    drCDNUR[cdnurInvoiceAdvanceReceiptNumber] = dtCDNUR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnurInvoiceAdvanceReceiptNumber]).Trim() != "").GroupBy(x => x[cdnurInvoiceAdvanceReceiptNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNUR[cdnurNoteRefundVoucherNumber] = dtCDNUR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnurNoteRefundVoucherNumber]).Trim() != "").GroupBy(x => x[cdnurNoteRefundVoucherNumber]).Select(x => x.First()).Distinct().Count();
                                    drCDNUR[cdnurNoteRefundVoucherValue] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurNoteRefundVoucherValue] != null).Sum(x => x[cdnurNoteRefundVoucherValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurNoteRefundVoucherValue])).ToString();
                                    drCDNUR[cdnurTaxableValue] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurTaxableValue] != null).Sum(x => x[cdnurTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurTaxableValue])).ToString();
                                    drCDNUR[cdnurCessAmount] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurCessAmount] != null).Sum(x => x[cdnurCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurCessAmount])).ToString();
                                    drCDNUR["CGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                    drCDNUR["SGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                    drCDNUR["IGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                    drCDNUR["Status"] = "Total";
                                    dtCDNUR.Rows.Add(drCDNUR);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1cdnurTallyBulkEntry(dtCDNUR, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "cdnur data entry error..!\n"; }
                                }
                                #endregion

                                #region AT

                                if (dtAT != null && dtAT.Rows.Count > 0)
                                {
                                    dtAT = Utility.ChangeColumnDataType(dtAT, atPlaceOfSupply, typeof(string));
                                    DataRow drAT = dtAT.NewRow();

                                    #region POS Count
                                    var result2 = (from row in dtAT.AsEnumerable()
                                                   where row.Field<string>(atPlaceOfSupply) != ""
                                                   group row by new
                                                   {
                                                       Fld_POS = row.Field<string>(atPlaceOfSupply)
                                                   } into grp
                                                   select new
                                                   {
                                                       Fld_POS = grp.Key.Fld_POS,
                                                   }).ToList();

                                    if (result2.Count != null && result2.Count > 0)
                                        drAT[atPlaceOfSupply] = result2.Count;
                                    else
                                        drAT[atPlaceOfSupply] = 0;
                                    #endregion

                                    drAT["IGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                    drAT["CGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                    drAT["SGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                    drAT[atCessAmount] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                    drAT["Status"] = "Total";
                                    dtAT.Rows.Add(drAT);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1atTallyBulkEntry(dtAT, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "AT data entry error..!\n"; }
                                }
                                #endregion

                                #region ATD

                                if (dtATD != null && dtATD.Rows.Count > 0)
                                {
                                    dtATD = Utility.ChangeColumnDataType(dtATD, atdPlaceOfSupply, typeof(string));
                                    DataRow drATD = dtATD.NewRow();

                                    #region POS Count
                                    var result2 = (from row in dtATD.AsEnumerable()
                                                   where row.Field<string>(atdPlaceOfSupply) != ""
                                                   group row by new { Fld_POS = row.Field<string>(atdPlaceOfSupply) } into grp
                                                   select new
                                                   {
                                                       Fld_POS = grp.Key.Fld_POS,
                                                   }).ToList();

                                    if (result2.Count != null && result2.Count > 0)
                                        drATD[atdPlaceOfSupply] = result2.Count;
                                    else
                                        drATD[atdPlaceOfSupply] = 0;
                                    #endregion

                                    drATD["IGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                    drATD["CGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                    drATD["SGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                    drATD[atCessAmount] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                    drATD["Status"] = "Total";
                                    dtATD.Rows.Add(drATD);

                                    _result = 0;
                                    _result = objGSTR5.GSTR1atdTallyBulkEntry(dtATD, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "atadj data entry error..!\n"; }
                                }
                                #endregion

                                #region TXPD
                                /*
                            if (dtTXPD != null && dtTXPD.Rows.Count > 0)
                            {
                                DataRow drTXPD = dtTXPD.NewRow();
                                drTXPD[txpdInvNo] = dtTXPD.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[txpdInvNo]).Trim() != "").GroupBy(x => x[txpdInvNo]).Select(x => x.First()).Distinct().Count();
                                drTXPD[txpdInvVal] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdInvVal] != null).Sum(x => x[txpdInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdInvVal])).ToString();
                                drTXPD[txpdIGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdIGSTAmt] != null).Sum(x => x[txpdIGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdIGSTAmt])).ToString();
                                drTXPD[txpdCGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCGSTAmt] != null).Sum(x => x[txpdCGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCGSTAmt])).ToString();
                                drTXPD[txpdSGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdSGSTAmt] != null).Sum(x => x[txpdSGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdSGSTAmt])).ToString();
                                drTXPD[txpdCESSAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCESSAmt] != null).Sum(x => x[txpdCESSAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCESSAmt])).ToString();
                                drTXPD["Status"] = "Total";
                                dtTXPD.Rows.Add(drTXPD);
                             * 
                             * _result = 0;
                            _result = objGSTR5.GSTR1txpdTallyBulkEntry(dtTXPD, Convert.ToString(CommonHelper.StatusText));
                            if (_result != 1)
                            { _str += "TXPD data entry error..!\n"; }
                            }                            
                             */
                                #endregion

                                #region Nil

                                if (dtNilRt != null && dtNilRt.Rows.Count > 0)
                                {
                                    _result = 0;
                                    _result = objGSTR5.GSTR1NilTallyBulkEntry(dtNilRt, Convert.ToString("Draft"));
                                    if (_result != 1)
                                    { _str += "exemp data entry error..!\n"; }
                                }
                                #endregion
                                #endregion
                                Application.DoEvents();
                                #region Amedment Data Entry
                                /*
                            #region B2BA

                            if (dtb2ba != null && dtb2ba.Rows.Count > 0)
                            {
                                DataRow drB2bA = dtb2ba.NewRow();
                                drB2bA[B2BA_OrgInvNo] = dtb2ba.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2BA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_RevInvNo] = dtb2ba.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_RevInvNo]).Trim() != "").GroupBy(x => x[B2BA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_InvVal] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_InvVal] != null).Sum(x => x[B2BA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_InvVal])).ToString();
                                drB2bA[B2BA_TaxVal] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_TaxVal] != null).Sum(x => x[B2BA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_TaxVal])).ToString();
                                drB2bA["b2baIGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baIGSTTAmt"] != null).Sum(x => x["b2baIGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baIGSTTAmt"])).ToString();
                                drB2bA["b2baCGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baCGSTTAmt"] != null).Sum(x => x["b2baCGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baCGSTTAmt"])).ToString();
                                drB2bA["b2baSGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baSGSTTAmt"] != null).Sum(x => x["b2baSGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baSGSTTAmt"])).ToString();
                                drB2bA[B2BA_Cess] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_Cess] != null).Sum(x => x[B2BA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_Cess])).ToString();
                                drB2bA["Status"] = "Total";
                                dtb2ba.Rows.Add(drB2bA);

                                _result = objGSTR5.GSTR1_B2BA_GovBulkEntry(dtb2ba, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2BA data entry error..!\n"; }
                            }


                            #endregion

                            #region b2clA

                            if (dtb2cla != null && dtb2cla.Rows.Count > 0)
                            {
                                DataRow drb2CLA = dtb2cla.NewRow();
                                drb2CLA[B2CLA_OrgInvNo] = dtb2cla.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2CLA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_RevInvNo] = dtb2cla.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_RevInvNo]).Trim() != "").GroupBy(x => x[B2CLA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_InvVal] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[B2CLA_InvVal] != null).Sum(x => x[B2CLA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_InvVal])).ToString();
                                drb2CLA[B2CLA_TaxVal] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[B2CLA_TaxVal] != null).Sum(x => x[B2CLA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_TaxVal])).ToString();
                                drb2CLA["IGST Amount"] = dtb2cla.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CLA[b2clCESS] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                drb2CLA["Status"] = "Total";
                                dtb2cla.Rows.Add(drb2CLA);

                                _result = 0;

                                _result = objGSTR5.GSTR1_B2CLA_GovBulkEntry(dtb2cla, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2CLA data entry error..!\n"; }
                            }
                            #endregion

                            #region b2csA

                            if (dtb2csa != null && dtb2csa.Rows.Count > 0)
                            {
                                DataRow drb2CSA = dtb2csa.NewRow();
                                drb2CSA[B2CSA_TaxVal] = dtb2csa.Rows.Cast<DataRow>().Where(x => x[B2CSA_TaxVal] != null).Sum(x => x[B2CSA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_TaxVal])).ToString();
                                drb2CSA["IGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CSA["CGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2CSA["SGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2CSA[B2CSA_Cess] = dtb2csa.Rows.Cast<DataRow>().Where(x => x[B2CSA_Cess] != null).Sum(x => x[B2CSA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_Cess])).ToString();
                                drb2CSA["Status"] = "Total";
                                dtb2csa.Rows.Add(drb2CSA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_B2CSA_GovBulkEntry(dtb2csa, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2CSA data entry error..!\n"; }
                            }
                            #endregion

                            #region ExportA

                            if (dtexpa != null && dtexpa.Rows.Count > 0)
                            {
                                DataRow drExpA = dtexpa.NewRow();
                                drExpA[EXPA_OrgInvNo] = dtexpa.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_OrgInvNo]).Trim() != "").GroupBy(x => x[EXPA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_RevInvNo] = dtexpa.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_RevInvNo]).Trim() != "").GroupBy(x => x[EXPA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_InvVal] = dtexpa.Rows.Cast<DataRow>().Where(x => x[EXPA_InvVal] != null).Sum(x => x[EXPA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_InvVal])).ToString();
                                drExpA[EXPA_TaxVal] = dtexpa.Rows.Cast<DataRow>().Where(x => x[EXPA_TaxVal] != null).Sum(x => x[EXPA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_TaxVal])).ToString();
                                drExpA["IGST Amount"] = dtexpa.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drExpA["Cess Amount"] = dtexpa.Rows.Cast<DataRow>().Where(x => x["Cess Amount"] != null).Sum(x => x["Cess Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cess Amount"])).ToString();
                                drExpA["Status"] = "Total";
                                dtexpa.Rows.Add(drExpA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_EXPA_GovBulkEntry(dtexpa, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "EXPA data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnA

                            if (dtcdnra != null && dtcdnra.Rows.Count > 0)
                            {
                                DataRow drCDNRA = dtcdnra.NewRow();
                                drCDNRA[CDNRA_OrgRecNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_OrgVouNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgVouNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_RefVouNo]).Trim() != "").GroupBy(x => x[CDNRA_RefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouVal] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_RefVouVal] != null).Sum(x => x[CDNRA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_RefVouVal])).ToString();
                                drCDNRA[CDNRA_TaxVal] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_TaxVal] != null).Sum(x => x[CDNRA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_TaxVal])).ToString();
                                drCDNRA[CDNRA_Cess] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_Cess] != null).Sum(x => x[CDNRA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_Cess])).ToString();
                                drCDNRA["CGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNRA["SGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNRA["IGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNRA["Status"] = "Total";
                                dtcdnra.Rows.Add(drCDNRA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNRA_GovBulkEntry(dtcdnra, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "CDNR data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnurA

                            if (dtcdnura != null && dtcdnura.Rows.Count > 0)
                            {
                                DataRow drCDNURA = dtcdnura.NewRow();
                                drCDNURA[CDNURA_OrgRecNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_OrgRefVouNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRefVouNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_RefNo]).Trim() != "").GroupBy(x => x[CDNURA_RefNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefVouVal] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_RefVouVal] != null).Sum(x => x[CDNURA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_RefVouVal])).ToString();
                                drCDNURA[CDNURA_TaxVal] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_TaxVal] != null).Sum(x => x[CDNURA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_TaxVal])).ToString();
                                drCDNURA[CDNURA_Cess] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_Cess] != null).Sum(x => x[CDNURA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_Cess])).ToString();
                                drCDNURA["CGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNURA["SGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNURA["IGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNURA["Status"] = "Total";
                                dtcdnura.Rows.Add(drCDNURA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNURA_GovBulkEntry(dtcdnura, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "cdnura data entry error..!\n"; }
                            }
                            #endregion

                            #region ATA

                            if (dtata != null && dtata.Rows.Count > 0)
                            {
                                DataRow drATA = dtata.NewRow();
                                drATA["IGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drATA["CGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drATA["SGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drATA[atCessAmount] = dtata.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                drATA["Status"] = "Total";
                                dtata.Rows.Add(drATA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATA_GovBulkEntry(dtata, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "ATA data entry error..!\n"; }
                            }
                            #endregion

                            #region ATDA

                            if (dtatadja != null && dtatadja.Rows.Count > 0)
                            {
                                DataRow drATDA = dtatadja.NewRow();
                                drATDA["IGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drATDA["CGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drATDA["SGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drATDA[ATADJA_Cess] = dtatadja.Rows.Cast<DataRow>().Where(x => x[ATADJA_Cess] != null).Sum(x => x[ATADJA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[ATADJA_Cess])).ToString();
                                drATDA["Status"] = "Total";
                                dtatadja.Rows.Add(drATDA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATADJA_GovBulkEntry(dtatadja, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "atadja data entry error..!\n"; }
                            }
                            #endregion
                            */
                                #endregion

                                pbGSTR1.Visible = false;

                                if (_str != "")
                                {
                                    CommonHelper.ErrorList = Convert.ToString(_str);
                                    SPQErrorList obj = new SPQErrorList();
                                    obj.ShowDialog();
                                }
                                else
                                {
                                    MessageBox.Show("Tally data imported successfully...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    Getdata();
                                    GetGSTR1VsGSTR3B();
                                }
                                #endregion
                            }
                            #region  Amendmet Validation
                            /*
                            Application.DoEvents();
                            #region B2BA
                            if (dtb2ba.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtb2ba.Columns.Count; i++)
                                {
                                    if (dtb2ba.Columns.Count > 15)
                                    {
                                        for (int j = 0; j < dtb2ba.Columns.Count; j++)
                                        {
                                            if (dtb2ba.Columns.Count > 15)
                                            {
                                                dtb2ba.Columns.RemoveAt(dtb2ba.Columns.Count - 1);
                                                dtb2ba.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtb2ba.Columns[i].ColumnName = dtb2ba.Rows[2][i].ToString();
                                }

                                dtb2ba.Rows[0].Delete();
                                dtb2ba.Rows[1].Delete();
                                dtb2ba.Rows[2].Delete();
                                dtb2ba.AcceptChanges();
                            }
                            for (int i = 0; i < dtb2ba.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtb2ba = Utility.ChangeColumnDataType(dtb2ba, B2BA_POS, typeof(string));
                                    dtb2ba = Utility.ChangeColumnDataType(dtb2ba, B2BA_RevCharge, typeof(string));

                                    dtb2ba.Columns.Add("Status");
                                    dtb2ba.Columns.Add("b2baIGSTTAmt");
                                    dtb2ba.Columns.Add("b2baCGSTTAmt");
                                    dtb2ba.Columns.Add("b2baSGSTTAmt");
                                }

                                dtb2ba.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_POS]).Trim() != "")
                                    dtb2ba.Rows[i][B2BA_POS] = Utility.strValidStateName(Convert.ToString(dtb2ba.Rows[i][B2BA_POS]).Trim());

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_RevCharge]).Trim().ToLower() == "yes" || Convert.ToString(dtb2ba.Rows[i][B2BA_RevCharge]).Trim().ToLower() == "y")
                                    dtb2ba.Rows[i][B2BA_RevCharge] = "Yes";
                                else
                                    dtb2ba.Rows[i][B2BA_RevCharge] = "No";

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "regular")
                                    dtb2ba.Rows[i][B2BA_InvType] = "Regular";
                                else if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "sez exports with payment")
                                    dtb2ba.Rows[i][B2BA_InvType] = "SEZ Exports with payment";
                                else if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "sez exports without payment")
                                    dtb2ba.Rows[i][B2BA_InvType] = "SEZ exports without payment";
                                else if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "deemed exports")
                                    dtb2ba.Rows[i][B2BA_InvType] = "Deemed Exports";
                                else
                                    dtb2ba.Rows[i][B2BA_InvType] = "";


                                int sj = dtb2ba.Columns[B2BA_OrgInvDate].Ordinal;
                                dtb2ba = Utility.ChangeColumnDataType(dtb2ba, dtb2ba.Columns[B2BA_OrgInvDate].ColumnName, typeof(string));
                                dtb2ba.Columns[B2BA_OrgInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2ba.Rows[i][B2BA_OrgInvDate]);
                                    dtb2ba.Rows[i][B2BA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2ba.Rows[i][B2BA_OrgInvDate] = "";
                                }

                                sj = dtb2ba.Columns[B2BA_RevInvDate].Ordinal;
                                dtb2ba = Utility.ChangeColumnDataType(dtb2ba, dtb2ba.Columns[B2BA_RevInvDate].ColumnName, typeof(string));
                                dtb2ba.Columns[B2BA_RevInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2ba.Rows[i][B2BA_RevInvDate]);
                                    dtb2ba.Rows[i][B2BA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2ba.Rows[i][B2BA_RevInvDate] = "";
                                }

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_Rate]).Trim() != "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtb2ba.Rows[i][B2BA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtb2ba.Rows[i][B2BA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtb2ba.Rows[i][B2BA_POS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(dtb2ba.Rows[i][B2BA_Rate].ToString()) * Convert.ToDecimal(dtb2ba.Rows[i][B2BA_TaxVal].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtb2ba.Rows[i]["b2baCGSTTAmt"] = Amt.ToString();
                                        dtb2ba.Rows[i]["b2baSGSTTAmt"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtb2ba.Rows[i][B2BA_Rate].ToString()) * Convert.ToDecimal(dtb2ba.Rows[i][B2BA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2ba.Rows[i]["b2baIGSTTAmt"] = IGSTAmt.ToString();
                                    }
                                }

                                if (colRate != null)
                                    dtb2ba.Rows[i][B2BA_Rate] = colRate;
                            }
                            #endregion

                            #region B2CLA
                            if (dtb2cla.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtb2cla.Columns.Count; i++)
                                {
                                    if (dtb2cla.Columns.Count > 11)
                                    {
                                        for (int j = 0; j < dtb2cla.Columns.Count; j++)
                                        {
                                            if (dtb2cla.Columns.Count > 11)
                                            {
                                                dtb2cla.Columns.RemoveAt(dtb2cla.Columns.Count - 1);
                                                dtb2cla.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtb2cla.Columns[i].ColumnName = dtb2cla.Rows[2][i].ToString();
                                }

                                dtb2cla.Rows[0].Delete();
                                dtb2cla.Rows[1].Delete();
                                dtb2cla.Rows[2].Delete();
                                dtb2cla.AcceptChanges();
                            }
                            for (int i = 0; i < dtb2cla.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtb2cla = Utility.ChangeColumnDataType(dtb2cla, B2CLA_OrgPOS, typeof(string));
                                    dtb2cla.Columns.Add("Status");
                                    dtb2cla.Columns.Add("IGST Amount");
                                }

                                dtb2cla.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtb2cla.Rows[i][B2CLA_OrgPOS]).Trim() != "")
                                    dtb2cla.Rows[i][B2CLA_OrgPOS] = CommonHelper.GetStateName(Convert.ToString(dtb2cla.Rows[i][B2CLA_OrgPOS]).Split('-')[0]);

                                int sj = dtb2cla.Columns[B2CLA_OrgInvDate].Ordinal;
                                dtb2cla = Utility.ChangeColumnDataType(dtb2cla, dtb2cla.Columns[B2CLA_OrgInvDate].ColumnName, typeof(string));
                                dtb2cla.Columns[B2CLA_OrgInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2cla.Rows[i][B2CLA_OrgInvDate]);
                                    dtb2cla.Rows[i][B2CLA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2cla.Rows[i][B2CLA_OrgInvDate] = "";
                                }

                                sj = dtb2cla.Columns[B2CLA_RevInvDate].Ordinal;
                                dtb2cla = Utility.ChangeColumnDataType(dtb2cla, dtb2cla.Columns[B2CLA_RevInvDate].ColumnName, typeof(string));
                                dtb2cla.Columns[B2CLA_RevInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2cla.Rows[i][B2CLA_RevInvDate]);
                                    dtb2cla.Rows[i][B2CLA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2cla.Rows[i][B2CLA_RevInvDate] = "";
                                }

                                if (Convert.ToString(dtb2cla.Rows[i][B2CLA_Rate]).Trim() != "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtb2cla.Rows[i][B2CLA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtb2cla.Rows[i][B2CLA_OrgPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_Rate].ToString()) * Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2cla.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_Rate].ToString()) * Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2cla.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }

                            #endregion

                            #region B2CSA
                            if (dtb2csa.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtb2csa.Columns.Count; i++)
                                {
                                    if (dtb2csa.Columns.Count > 9)
                                    {
                                        for (int j = 0; j < dtb2csa.Columns.Count; j++)
                                        {
                                            if (dtb2csa.Columns.Count > 9)
                                            {
                                                dtb2csa.Columns.RemoveAt(dtb2csa.Columns.Count - 1);
                                                dtb2csa.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtb2csa.Columns[i].ColumnName = dtb2csa.Rows[2][i].ToString();
                                }

                                dtb2csa.Rows[0].Delete();
                                dtb2csa.Rows[1].Delete();
                                dtb2csa.Rows[2].Delete();
                                dtb2csa.AcceptChanges();
                            }

                            for (int i = 0; i < dtb2csa.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_POS, typeof(string));
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_Type, typeof(string));
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_FinYear, typeof(string));
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_OrgMonth, typeof(string));
                                    dtb2csa.Columns.Add("Status");
                                    dtb2csa.Columns.Add("IGST Amount");
                                    dtb2csa.Columns.Add("CGST Amount");
                                    dtb2csa.Columns.Add("SGST Amount");
                                }

                                dtb2csa.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_POS]).Trim() != "")
                                    dtb2csa.Rows[i][B2CSA_POS] = CommonHelper.GetStateName(Convert.ToString(dtb2csa.Rows[i][B2CSA_POS]).Split('-')[0]);

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_Rate]).Trim() != "")
                                    colRate = 0;

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_FinYear]).Trim() == "2017-18")
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "2017 - 2018";
                                else if (Convert.ToString(dtb2csa.Rows[i][B2CSA_FinYear]).Trim() == "2018-19")
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "2018 - 2019";
                                else if (Convert.ToString(dtb2csa.Rows[i][B2CSA_FinYear]).Trim() == "2019-20")
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "2019 - 2020";
                                else
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "";

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_OrgMonth]).Trim() != "")
                                {
                                    dtb2csa.Rows[i][B2CSA_OrgMonth] = dtb2csa.Rows[i][B2CSA_OrgMonth].ToString().ToLower();
                                    dtb2csa.Rows[i][B2CSA_OrgMonth] = char.ToUpper(dtb2csa.Rows[i][B2CSA_OrgMonth].ToString()[0]) + dtb2csa.Rows[i][B2CSA_OrgMonth].ToString().Substring(1); ;
                                }
                                else
                                    dtb2csa.Rows[i][B2CSA_OrgMonth] = "";

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_Type]).Trim().ToLower() == "e")
                                    dtb2csa.Rows[i][B2CSA_Type] = "Ecom";
                                else if (Convert.ToString(dtb2csa.Rows[i][B2CSA_Type]).Trim().ToLower() == "oe")
                                    dtb2csa.Rows[i][B2CSA_Type] = "Other than Ecom";

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtb2csa.Rows[i][B2CSA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtb2csa.Rows[i][B2CSA_POS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_Rate].ToString()) * Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_TaxVal].ToString()) / 100;
                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtb2csa.Rows[i]["CGST Amount"] = Amt.ToString();
                                        dtb2csa.Rows[i]["SGST Amount"] = Amt.ToString();
                                        //dtb2csa.Rows[i][B2CSA_Type] = "Intra";
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_Rate].ToString()) * Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2csa.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        //dtb2csa.Rows[i][B2CSA_Type] = "Inter";
                                    }
                                }
                            }

                            #endregion

                            #region EXEMPA
                            if (dtexpa.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtexpa.Columns.Count; i++)
                                {
                                    if (dtexpa.Columns.Count > 13)
                                    {
                                        for (int j = 0; j < dtexpa.Columns.Count; j++)
                                        {
                                            if (dtexpa.Columns.Count > 13)
                                            {
                                                dtexpa.Columns.RemoveAt(dtexpa.Columns.Count - 1);
                                                dtexpa.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtexpa.Columns[i].ColumnName = dtexpa.Rows[2][i].ToString();
                                }

                                dtexpa.Rows[0].Delete();
                                dtexpa.Rows[1].Delete();
                                dtexpa.Rows[2].Delete();
                                dtexpa.AcceptChanges();
                            }
                            for (int i = 0; i < dtexpa.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtexpa.Columns.Add("Status");
                                    dtexpa.Columns.Add("IGST Amount");
                                }
                                dtexpa.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtexpa.Rows[i][EXPA_ExpType]).Trim() != "")
                                    dtexpa.Rows[i][EXPA_ExpType] = GetExportType(Convert.ToString(dtexpa.Rows[i][EXPA_ExpType]).Trim(), "exp");

                                int sj = dtexpa.Columns[EXPA_OrgInvDate].Ordinal;
                                dtexpa = Utility.ChangeColumnDataType(dtexpa, dtexpa.Columns[EXPA_OrgInvDate].ColumnName, typeof(string));
                                dtexpa.Columns[EXPA_OrgInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtexpa.Rows[i][EXPA_OrgInvDate]);
                                    dtexpa.Rows[i][EXPA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtexpa.Rows[i][EXPA_OrgInvDate] = "";
                                }

                                sj = dtexpa.Columns[EXPA_RevInvDate].Ordinal;
                                dtexpa = Utility.ChangeColumnDataType(dtexpa, dtexpa.Columns[EXPA_RevInvDate].ColumnName, typeof(string));
                                dtexpa.Columns[EXPA_RevInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtexpa.Rows[i][EXPA_RevInvDate]);
                                    dtexpa.Rows[i][EXPA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtexpa.Rows[i][EXPA_RevInvDate] = "";
                                }

                                sj = dtexpa.Columns[EXPA_ShipDate].Ordinal;
                                dtexpa = Utility.ChangeColumnDataType(dtexpa, dtexpa.Columns[EXPA_ShipDate].ColumnName, typeof(string));
                                dtexpa.Columns[EXPA_ShipDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtexpa.Rows[i][EXPA_ShipDate]);
                                    dtexpa.Rows[i][EXPA_ShipDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtexpa.Rows[i][EXPA_ShipDate] = "";
                                }

                                if (Convert.ToString(dtexpa.Rows[i][EXPA_Rate]).Trim() != "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtexpa.Rows[i][EXPA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtexpa.Rows[i][EXPA_Rate]);

                                if (colRate != null)
                                {
                                    decimal IGSTAmt = Convert.ToDecimal(dtexpa.Rows[i][EXPA_Rate].ToString()) * Convert.ToDecimal(dtexpa.Rows[i][EXPA_TaxVal].ToString()) / 100;
                                    IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                    dtexpa.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                }
                                else
                                    dtexpa.Rows[i]["IGST Amount"] = "";
                            }

                            #endregion

                            #region CDNRA
                            if (dtcdnra.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtcdnra.Columns.Count; i++)
                                {
                                    if (dtcdnra.Columns.Count > 16)
                                    {
                                        for (int j = 0; j < dtcdnra.Columns.Count; j++)
                                        {
                                            if (dtcdnra.Columns.Count > 16)
                                            {
                                                dtcdnra.Columns.RemoveAt(dtcdnra.Columns.Count - 1);
                                                dtcdnra.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtcdnra.Columns[i].ColumnName = dtcdnra.Rows[2][i].ToString();
                                }

                                dtcdnra.Rows[0].Delete();
                                dtcdnra.Rows[1].Delete();
                                dtcdnra.Rows[2].Delete();
                                dtcdnra.AcceptChanges();
                            }
                            for (int i = 0; i < dtcdnra.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtcdnra.Columns.Add("Status");
                                    dtcdnra.Columns.Add("IGST Amount");
                                    dtcdnra.Columns.Add("CGST Amount");
                                    dtcdnra.Columns.Add("SGST Amount");
                                    //dtcdnra = Utility.ChangeColumnDataType(dtcdnra, cdnrPlaceOfSupply, typeof(string));
                                    dtcdnra = Utility.ChangeColumnDataType(dtcdnra, CDNRA_PreGST, typeof(string));
                                    dtcdnra = Utility.ChangeColumnDataType(dtcdnra, CDNRA_DocType, typeof(string));
                                    //dtcdnra = Utility.ChangeColumnDataType(dtcdnra, cdnrReasonForIssuingdocument, typeof(string));
                                }

                                dtcdnra.Rows[i]["Status"] = "Draft";

                                //if (Convert.ToString(dtcdnra.Rows[i][cdnrPlaceOfSupply]).Trim() != "")
                                //    dtcdnra.Rows[i][cdnrPlaceOfSupply] = CommonHelper.GetStateName(Convert.ToString(dtcdnra.Rows[i][cdnrPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_PreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtcdnra.Rows[i][CDNRA_PreGST]).Trim().ToLower() == "y")
                                    dtcdnra.Rows[i][CDNRA_PreGST] = "Yes";
                                else
                                    dtcdnra.Rows[i][CDNRA_PreGST] = "No";

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "inter state" || Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "inter")
                                    dtcdnra.Rows[i][CDNRA_SupType] = "Inter";
                                else if (Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "intra state" || Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "intra")
                                    dtcdnra.Rows[i][CDNRA_SupType] = "Intra";

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_DocType]).Trim() != "")
                                    dtcdnra.Rows[i][CDNRA_DocType] = GetExportType(Convert.ToString(dtcdnra.Rows[i][CDNRA_DocType]), "cdnr");

                                int sj = dtcdnra.Columns[CDNRA_OrgVouDate].Ordinal;
                                dtcdnra = Utility.ChangeColumnDataType(dtcdnra, dtcdnra.Columns[CDNRA_OrgVouDate].ColumnName, typeof(string));
                                dtcdnra.Columns[CDNRA_OrgVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnra.Rows[i][CDNRA_OrgVouDate]);
                                    dtcdnra.Rows[i][CDNRA_OrgVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnra.Rows[i][CDNRA_OrgVouDate] = "";
                                }



                                sj = dtcdnra.Columns[CDNRA_OrgRecDate].Ordinal;
                                dtcdnra = Utility.ChangeColumnDataType(dtcdnra, dtcdnra.Columns[CDNRA_OrgRecDate].ColumnName, typeof(string));
                                dtcdnra.Columns[CDNRA_OrgRecDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnra.Rows[i][CDNRA_OrgRecDate]);
                                    dtcdnra.Rows[i][CDNRA_OrgRecDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnra.Rows[i][CDNRA_OrgRecDate] = "";
                                }



                                sj = dtcdnra.Columns[CDNRA_RefVouDate].Ordinal;
                                dtcdnra = Utility.ChangeColumnDataType(dtcdnra, dtcdnra.Columns[CDNRA_RefVouDate].ColumnName, typeof(string));
                                dtcdnra.Columns[CDNRA_RefVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnra.Rows[i][CDNRA_RefVouDate]);
                                    dtcdnra.Rows[i][CDNRA_RefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnra.Rows[i][CDNRA_RefVouDate] = "";
                                }

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_Rate]).Trim() != "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtcdnra.Rows[i][CDNRA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_Rate]);

                                if (colRate != null)
                                {

                                    //int StateId = 0;
                                    //int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    //string Pos = CommonHelper.GetStateCode(Convert.ToString(dtcdnra.Rows[i][cdnrPlaceOfSupply]));
                                    //if (Pos != "")
                                    //    StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if ("Intra" == Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim())
                                    {
                                        decimal Amount = Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_Rate].ToString()) * Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_TaxVal].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtcdnra.Rows[i]["CGST Amount"] = Amt.ToString();
                                        dtcdnra.Rows[i]["SGST Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_Rate].ToString()) * Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtcdnra.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }

                            #endregion

                            #region CDNURA
                            if (dtcdnura.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtcdnura.Columns.Count; i++)
                                {
                                    if (dtcdnura.Columns.Count > 15)
                                    {
                                        for (int j = 0; j < dtcdnura.Columns.Count; j++)
                                        {
                                            if (dtcdnura.Columns.Count > 15)
                                            {
                                                dtcdnura.Columns.RemoveAt(dtcdnura.Columns.Count - 1);
                                                dtcdnura.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtcdnura.Columns[i].ColumnName = dtcdnura.Rows[2][i].ToString();
                                }

                                dtcdnura.Rows[0].Delete();
                                dtcdnura.Rows[1].Delete();
                                dtcdnura.Rows[2].Delete();
                                dtcdnura.AcceptChanges();
                            }
                            for (int i = 0; i < dtcdnura.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtcdnura.Columns.Add("Status");
                                    dtcdnura.Columns.Add("IGST Amount");
                                    dtcdnura.Columns.Add("CGST Amount");
                                    dtcdnura.Columns.Add("SGST Amount");
                                    //dtcdnura = Utility.ChangeColumnDataType(dtcdnura, cdnurPlaceOfSupply, typeof(string));
                                    dtcdnura = Utility.ChangeColumnDataType(dtcdnura, CDNURA_PreGST, typeof(string));
                                    dtcdnura = Utility.ChangeColumnDataType(dtcdnura, CDNURA_DocType, typeof(string));
                                    //dtcdnura = Utility.ChangeColumnDataType(dtcdnura, cdnurReasonForIssuingdocument, typeof(string));
                                    dtcdnura = Utility.ChangeColumnDataType(dtcdnura, CDNURA_URType, typeof(string));
                                }

                                dtcdnura.Rows[i]["Status"] = "Draft";

                                //if (Convert.ToString(dtcdnura.Rows[i][cdnurPlaceOfSupply]).Trim() != "")
                                //    dtcdnura.Rows[i][cdnurPlaceOfSupply] = CommonHelper.GetStateName(Convert.ToString(dtcdnura.Rows[i][cdnurPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_PreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtcdnura.Rows[i][CDNURA_PreGST]).Trim().ToLower() == "y")
                                    dtcdnura.Rows[i][CDNURA_PreGST] = "Yes";
                                else
                                    dtcdnura.Rows[i][CDNURA_PreGST] = "No";

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "inter state" || Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "inter")
                                    dtcdnura.Rows[i][CDNURA_SupType] = "Inter";
                                else if (Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "intra state" || Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "intra")
                                    dtcdnura.Rows[i][CDNURA_SupType] = "Intra";

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_URType]).Trim().ToLower() == "b2cl")
                                    dtcdnura.Rows[i][CDNURA_URType] = "B2C Large";
                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_URType]).Trim().ToLower() == "expwp")
                                    dtcdnura.Rows[i][CDNURA_URType] = "Export with payment of GST";
                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_URType]).Trim().ToLower() == "expwop")
                                    dtcdnura.Rows[i][CDNURA_URType] = "Export without payment of GST";

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_DocType]).Trim() != "")
                                    dtcdnura.Rows[i][CDNURA_DocType] = GetExportType(Convert.ToString(dtcdnura.Rows[i][CDNURA_DocType]), "cdnr");

                                //if (!ValidateData(Convert.ToString(dtcdnura.Rows[i][cdnurReasonForIssuingdocument]).Trim(), "cdnReason"))
                                //    dtcdnura.Rows[i][cdnurReasonForIssuingdocument] = "";
                                //else
                                //    dtcdnura.Rows[i][cdnurReasonForIssuingdocument] = Convert.ToString(dtcdnura.Rows[i][cdnurReasonForIssuingdocument]).Trim();

                                int sj = dtcdnura.Columns[CDNURA_OrgRefVouDate].Ordinal;
                                dtcdnura = Utility.ChangeColumnDataType(dtcdnura, dtcdnura.Columns[CDNURA_OrgRefVouDate].ColumnName, typeof(string));
                                dtcdnura.Columns[CDNURA_OrgRefVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnura.Rows[i][CDNURA_OrgRefVouDate]);
                                    dtcdnura.Rows[i][CDNURA_OrgRefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnura.Rows[i][CDNURA_OrgRefVouDate] = "";
                                }

                                sj = dtcdnura.Columns[CDNURA_RecDate].Ordinal;
                                dtcdnura = Utility.ChangeColumnDataType(dtcdnura, dtcdnura.Columns[CDNURA_RecDate].ColumnName, typeof(string));
                                dtcdnura.Columns[CDNURA_RecDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnura.Rows[i][CDNURA_RecDate]);
                                    dtcdnura.Rows[i][CDNURA_RecDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnura.Rows[i][CDNURA_RecDate] = "";
                                }

                                sj = dtcdnura.Columns[CDNURA_RefVouDate].Ordinal;
                                dtcdnura = Utility.ChangeColumnDataType(dtcdnura, dtcdnura.Columns[CDNURA_RefVouDate].ColumnName, typeof(string));
                                dtcdnura.Columns[CDNURA_RefVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnura.Rows[i][CDNURA_RefVouDate]);
                                    dtcdnura.Rows[i][CDNURA_RefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnura.Rows[i][CDNURA_RefVouDate] = "";
                                }

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_Rate]).Trim() != "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtcdnura.Rows[i][CDNURA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_Rate]);

                                if (colRate != null)
                                {
                                    //int StateId = 0;
                                    //int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    //string Pos = CommonHelper.GetStateCode(Convert.ToString(dtcdnura.Rows[i][cdnurPlaceOfSupply]));
                                    //if (Pos.Length > 0)
                                    //{
                                    //    StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if ("Intra" == Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim())
                                    {
                                        decimal Amount = Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_Rate].ToString()) * Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_TaxVal].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtcdnura.Rows[i]["CGST Amount"] = Amt.ToString();
                                        dtcdnura.Rows[i]["SGST Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_Rate].ToString()) * Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtcdnura.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                    //}
                                    //else
                                    //{
                                    //    decimal IGSTAmt = Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_Rate].ToString()) * Convert.ToDecimal(dtcdnura.Rows[i][cdnurTaxableValue].ToString()) / 100;
                                    //    IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                    //    dtcdnura.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    //}
                                }

                            }

                            #endregion

                            #region ATA
                            if (dtata.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtata.Columns.Count; i++)
                                {
                                    if (dtata.Columns.Count > 7)
                                    {
                                        for (int j = 0; j < dtata.Columns.Count; j++)
                                        {
                                            if (dtata.Columns.Count > 7)
                                            {
                                                dtata.Columns.RemoveAt(dtata.Columns.Count - 1);
                                                dtata.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtata.Columns[i].ColumnName = dtata.Rows[2][i].ToString();
                                }

                                dtata.Rows[0].Delete();
                                dtata.Rows[1].Delete();
                                dtata.Rows[2].Delete();
                                dtata.AcceptChanges();
                            }
                            for (int i = 0; i < dtata.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtata = Utility.ChangeColumnDataType(dtata, ATA_OrgPOS, typeof(string));
                                    dtata = Utility.ChangeColumnDataType(dtata, ATA_FinYear, typeof(string));
                                    dtata = Utility.ChangeColumnDataType(dtata, ATA_OrgMonth, typeof(string));
                                    dtata.Columns.Add("Status");
                                    dtata.Columns.Add("IGSTT Amount");
                                    dtata.Columns.Add("CGSTT Amount");
                                    dtata.Columns.Add("SGSTT Amount");
                                }

                                dtata.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtata.Rows[i][ATA_OrgPOS]).Trim() != "")
                                    dtata.Rows[i][ATA_OrgPOS] = CommonHelper.GetStateName(Convert.ToString(dtata.Rows[i][ATA_OrgPOS]).Split('-')[0]);

                                if (Convert.ToString(dtata.Rows[i][ATA_FinYear]).Trim() == "2017-18")
                                    dtata.Rows[i][ATA_FinYear] = "2017 - 2018";
                                else if (Convert.ToString(dtata.Rows[i][ATA_FinYear]).Trim() == "2018-19")
                                    dtata.Rows[i][ATA_FinYear] = "2018 - 2019";
                                else if (Convert.ToString(dtata.Rows[i][ATA_FinYear]).Trim() == "2019-20")
                                    dtata.Rows[i][ATA_FinYear] = "2019 - 2020";
                                else
                                    dtata.Rows[i][ATA_FinYear] = "";

                                if (Convert.ToString(dtata.Rows[i][ATA_OrgMonth]).Trim() != "")
                                {
                                    dtata.Rows[i][ATA_OrgMonth] = dtata.Rows[i][ATA_OrgMonth].ToString().ToLower();
                                    dtata.Rows[i][ATA_OrgMonth] = char.ToUpper(dtata.Rows[i][ATA_OrgMonth].ToString()[0]) + dtata.Rows[i][ATA_OrgMonth].ToString().Substring(1); ;
                                }
                                else
                                    dtata.Rows[i][ATA_OrgMonth] = "";

                                if (Convert.ToString(dtata.Rows[i][ATA_Rate]).Trim() != "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtata.Rows[i][ATA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtata.Rows[i][ATA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtata.Rows[i][ATA_OrgPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(dtata.Rows[i][ATA_Rate].ToString()) * Convert.ToDecimal(dtata.Rows[i][ATA_GrossAdvRec].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtata.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                        dtata.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        if (dtata.Rows[i][ATA_Rate].ToString() != "" && dtata.Rows[i][ATA_GrossAdvRec].ToString() != "")
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(dtata.Rows[i][ATA_Rate].ToString()) * Convert.ToDecimal(dtata.Rows[i][ATA_GrossAdvRec].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtata.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region AtdA
                            if (dtatadja.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtatadja.Columns.Count; i++)
                                {
                                    if (dtatadja.Columns.Count > 7)
                                    {
                                        for (int j = 0; j < dtatadja.Columns.Count; j++)
                                        {
                                            if (dtatadja.Columns.Count > 7)
                                            {
                                                dtatadja.Columns.RemoveAt(dtatadja.Columns.Count - 1);
                                                dtatadja.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtatadja.Columns[i].ColumnName = dtatadja.Rows[2][i].ToString();
                                }

                                dtatadja.Rows[0].Delete();
                                dtatadja.Rows[1].Delete();
                                dtatadja.Rows[2].Delete();
                                dtatadja.AcceptChanges();
                            }
                            for (int i = 0; i < dtatadja.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtatadja = Utility.ChangeColumnDataType(dtatadja, ATADJA_OrgPOS, typeof(string));
                                    dtatadja = Utility.ChangeColumnDataType(dtatadja, ATADJA_FinYear, typeof(string));
                                    dtatadja = Utility.ChangeColumnDataType(dtatadja, ATADJA_OrgMonth, typeof(string));
                                    dtatadja.Columns.Add("Status");
                                    dtatadja.Columns.Add("IGSTT Amount");
                                    dtatadja.Columns.Add("CGSTT Amount");
                                    dtatadja.Columns.Add("SGSTT Amount");
                                }

                                dtatadja.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_OrgPOS]).Trim() != "")
                                    dtatadja.Rows[i][ATADJA_OrgPOS] = CommonHelper.GetStateName(Convert.ToString(dtatadja.Rows[i][ATADJA_OrgPOS]).Split('-')[0]);

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_FinYear]).Trim() == "2017-18")
                                    dtatadja.Rows[i][ATADJA_FinYear] = "2017 - 2018";
                                else if (Convert.ToString(dtatadja.Rows[i][ATADJA_FinYear]).Trim() == "2018-19")
                                    dtatadja.Rows[i][ATADJA_FinYear] = "2018 - 2019";
                                else if (Convert.ToString(dtatadja.Rows[i][ATADJA_FinYear]).Trim() == "2019-20")
                                    dtatadja.Rows[i][ATADJA_FinYear] = "2019 - 2020";
                                else
                                    dtatadja.Rows[i][ATADJA_FinYear] = "";

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_OrgMonth]).Trim() != "")
                                {
                                    dtatadja.Rows[i][ATADJA_OrgMonth] = dtatadja.Rows[i][ATADJA_OrgMonth].ToString().ToLower();
                                    dtatadja.Rows[i][ATADJA_OrgMonth] = char.ToUpper(dtatadja.Rows[i][ATADJA_OrgMonth].ToString()[0]) + dtatadja.Rows[i][ATADJA_OrgMonth].ToString().Substring(1); ;
                                }
                                else
                                    dtatadja.Rows[i][ATADJA_OrgMonth] = "";

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_Rate]).Trim() != "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtatadja.Rows[i][ATADJA_Rate]).Trim()))
                                    colRate += Convert.ToDecimal(dtatadja.Rows[i][ATADJA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtatadja.Rows[i][ATADJA_OrgPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(dtatadja.Rows[i][ATADJA_Rate].ToString()) * Convert.ToDecimal(dtatadja.Rows[i][ATADJA_GrossAdvAdj].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtatadja.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                        dtatadja.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtatadja.Rows[i][ATADJA_Rate].ToString()) * Convert.ToDecimal(dtatadja.Rows[i][ATADJA_GrossAdvAdj].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtatadja.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }
                            #endregion
                            */
                            #endregion
                            #endregion


                        }
                    }
                }
            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
            finally
            {
                pbGSTR1.Visible = false;

            }
        }

        private void msExpExcel_Click(object sender, EventArgs e)
        {
            try
            {
                if (dgvMain.Rows.Count > 1)
                {
                    // IF RECORDS ARE PRESENT IN MAIN GRID

                    pbGSTR1.Visible = true;

                    #region comp Details
                    DataTable dtComp = new DataTable();
                    dtComp.Columns.Add("CompName");
                    dtComp.Columns.Add("CompValue");
                    dtComp.Columns.Add("CompSite");
                    dtComp.Rows.Add("Company Name : ", CommonHelper.OrgCompanyName);
                    dtComp.Rows.Add("Return Period : ", CommonHelper.ReturnYear, Utility.CompanySite());
                    dtComp.Rows.Add("Report Name : ", "");
                    string strVisible = "http://www.speqtagst.com", strHover = "http://www.speqtagst.com", strURL = "http://www.speqtagst.com";
                    #endregion
                    
                    Excel.Application excelApp = new Excel.Application();
                    Excel.Workbook WB = excelApp.Workbooks.Add(Missing.Value);                    

                    string query = "";

                    #region GSTR1Document

                    #region Bind Data of GSTR1Document
                    DataTable dtb2b = new DataTable();
                    query = "Select Fld_Id,Fld_NatureOfDocument,Fld_From,Fld_To,Fld_Total,Fld_Cancelled,Fld_NetIssued,Fld_FileStatus from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    dtb2b = objGSTR5.GetDataGSTR1(query);
                    #endregion

                    if (dtb2b != null && dtb2b.Rows.Count > 0)
                    {
                        #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                        Excel.Worksheet newWSb2b = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                        newWSb2b.Name = "GSTR1_Document";

                        #region Assign Company Data to Array
                        dtComp.Rows[2]["CompValue"] = "GSTR1 Document";
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrCompb2b = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtComp.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtComp.Columns.Count; j++)
                            {
                                arrCompb2b[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                            }
                        }                        

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topCompb2b = (Excel.Range)newWSb2b.Cells[1, 1];
                        Excel.Range bottomCompb2b = (Excel.Range)newWSb2b.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                        Excel.Range sheetRangeCompb2b = newWSb2b.Range[topCompb2b, bottomCompb2b];                        
                        //FILL ARRAY IN EXCEL
                        sheetRangeCompb2b.Value2 = arrCompb2b;

                        Excel.Range headerRangeCompb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1, 1], (Excel.Range)newWSb2b.Cells[3, 2]);
                        headerRangeCompb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                        headerRangeCompb2b.Font.Bold = true;
                        #endregion

                        int tempb2b = 0;
                        int intBlankRow = 4;
                        // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER                
                        string[] strHeader = { "", "Sr. #", "Nature of Document", "Sr. No. From", "Sr. No. To", "Total Number", "Cancelled", "Net Issued", "File Status" };

                        for (int i = 1; i < strHeader.Length; i++)
                        {
                            newWSb2b.Cells[1 + intBlankRow, i] = strHeader[i].ToString();
                            // SET COLUMN WIDTH
                            if (i == 1)
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 17;
                            else
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 20;
                            tempb2b++;
                        }

                        // GET RANGE AND SET DIFFRENT PROPERTIES
                        Excel.Range headerRangeb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1 + intBlankRow, 1], (Excel.Range)newWSb2b.Cells[1 + intBlankRow, strHeader.Length]);
                        headerRangeb2b.WrapText = true;
                        headerRangeb2b.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                        headerRangeb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        headerRangeb2b.Font.Bold = true;
                        headerRangeb2b.Font.Name = "Calibri";
                        #endregion

                        #region COPY DATA FROM DATATABLE TO ARRAY

                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrb2b = new object[dtb2b.Rows.Count, strHeader.Length];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtb2b.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtb2b.Columns.Count; j++)
                            {
                                if (j == 0)
                                    arrb2b[i, j] = i + 1;
                                else
                                    arrb2b[i, j] = Convert.ToString(dtb2b.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topb2b = (Excel.Range)newWSb2b.Cells[2 + intBlankRow, 1];
                        Excel.Range bottomb2b = (Excel.Range)newWSb2b.Cells[dtb2b.Rows.Count + 1 + intBlankRow, strHeader.Length];
                        Excel.Range sheetRangeb2b = newWSb2b.Range[topb2b, bottomb2b];
                        sheetRangeb2b.NumberFormat = "@";
                        //FILL ARRAY IN EXCEL
                        sheetRangeb2b.Value2 = arrb2b;

                        #endregion
                    }
                    #endregion

                    #region GSTR1HSN

                    #region Bind Data of GSTR1HSN
                    dtb2b = new DataTable();
                    query = "Select Fld_Id,Fld_HSN,Fld_Desciption,Fld_UQC,Fld_TotalQuantity,Fld_TotalValue,Fld_TotalTaxableValue,Fld_IGST,Fld_CGST,Fld_SGST,Fld_Cess from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    dtb2b = objGSTR5.GetDataGSTR1(query);
                    #endregion

                    if (dtb2b != null && dtb2b.Rows.Count > 0)
                    {
                        #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                        Excel.Worksheet newWSb2b = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                        newWSb2b.Name = "GSTR1HSN";

                        #region Assign Company Data to Array
                        dtComp.Rows[2]["CompValue"] = "GSTR1 HSN";
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrCompb2b = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtComp.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtComp.Columns.Count; j++)
                            {
                                arrCompb2b[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topCompb2b = (Excel.Range)newWSb2b.Cells[1, 1];
                        Excel.Range bottomCompb2b = (Excel.Range)newWSb2b.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                        Excel.Range sheetRangeCompb2b = newWSb2b.Range[topCompb2b, bottomCompb2b];
                        //FILL ARRAY IN EXCEL
                        sheetRangeCompb2b.Value2 = arrCompb2b;

                        Excel.Range headerRangeCompb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1, 1], (Excel.Range)newWSb2b.Cells[3, 2]);
                        headerRangeCompb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                        headerRangeCompb2b.Font.Bold = true;
                        #endregion

                        int tempb2b = 0;
                        int intBlankRow = 4;
                        // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER                
                        string[] strHeader = { "", "Sr. #", "HSN", "Description", "UQC", "Total Quantity", "Total Value", "Total Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount" };

                        for (int i = 1; i < strHeader.Length; i++)
                        {
                            newWSb2b.Cells[1 + intBlankRow, i] = strHeader[i].ToString();
                            // SET COLUMN WIDTH
                            if (i == 1)
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 17;
                            else
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 20;
                            tempb2b++;
                        }

                        // GET RANGE AND SET DIFFRENT PROPERTIES
                        Excel.Range headerRangeb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1 + intBlankRow, 1], (Excel.Range)newWSb2b.Cells[1 + intBlankRow, strHeader.Length]);
                        headerRangeb2b.WrapText = true;
                        headerRangeb2b.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                        headerRangeb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        headerRangeb2b.Font.Bold = true;
                        headerRangeb2b.Font.Name = "Calibri";
                        #endregion

                        #region COPY DATA FROM DATATABLE TO ARRAY

                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrb2b = new object[dtb2b.Rows.Count, strHeader.Length];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtb2b.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtb2b.Columns.Count; j++)
                            {
                                if (j == 0)
                                    arrb2b[i, j] = i + 1;
                                else
                                    arrb2b[i, j] = Convert.ToString(dtb2b.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topb2b = (Excel.Range)newWSb2b.Cells[2 + intBlankRow, 1];
                        Excel.Range bottomb2b = (Excel.Range)newWSb2b.Cells[dtb2b.Rows.Count + 1 + intBlankRow, strHeader.Length];
                        Excel.Range sheetRangeb2b = newWSb2b.Range[topb2b, bottomb2b];
                        sheetRangeb2b.NumberFormat = "@";
                        //FILL ARRAY IN EXCEL
                        sheetRangeb2b.Value2 = arrb2b;

                        #endregion
                    }
                    #endregion

                    #region GSTR1CDNUR

                    #region Bind Data of GSTR1CDNUR
                    dtb2b = new DataTable();
                    query = "Select Fld_Id,Fld_PartyName,Fld_SupplyType,Fld_TypeOfNote,Fld_PreGST,Fld_DbtCrdtNoteNo,Fld_DbtCrdtNoteDate,Fld_OrgInvoiceNo,Fld_OrginvoiceDate,Fld_OrgInvoiceValue,Fld_Rate,Fld_Taxable,Fld_IGSTAmnt,Fld_CGSTAmnt,Fld_SGSTAmnt,Fld_CessAmnt,Fld_PlaceOfSupply from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    dtb2b = objGSTR5.GetDataGSTR1(query);
                    #endregion

                    if (dtb2b != null && dtb2b.Rows.Count > 0)
                    {
                        #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                        Excel.Worksheet newWSb2b = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                        newWSb2b.Name = "GSTR1CDNUR";

                        #region Assign Company Data to Array
                        dtComp.Rows[2]["CompValue"] = "GSTR1CDNUR";
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrCompb2b = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtComp.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtComp.Columns.Count; j++)
                            {
                                arrCompb2b[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topCompb2b = (Excel.Range)newWSb2b.Cells[1, 1];
                        Excel.Range bottomCompb2b = (Excel.Range)newWSb2b.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                        Excel.Range sheetRangeCompb2b = newWSb2b.Range[topCompb2b, bottomCompb2b];
                        //FILL ARRAY IN EXCEL
                        sheetRangeCompb2b.Value2 = arrCompb2b;

                        Excel.Range headerRangeCompb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1, 1], (Excel.Range)newWSb2b.Cells[3, 2]);
                        headerRangeCompb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                        headerRangeCompb2b.Font.Bold = true;
                        #endregion

                        int tempb2b = 0;
                        int intBlankRow = 4;
                        // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER                
                        string[] strHeader = { "", "Sr. #", "GSTIN/UIN of Recipient", "Party Name", "Type of note (Debit/ Credit)", "Pre GST Regime Dr./ Cr. Notes", "Debit Note/ credit note/ Refund voucher No.", "Debit Note/ credit note/ Refund voucher Date", "Original Invoice No", "Original Invoice Date", "Note/Refund Voucher Value", "Rate", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "Place of supply" };

                        for (int i = 1; i < strHeader.Length; i++)
                        {
                            newWSb2b.Cells[1 + intBlankRow, i] = strHeader[i].ToString();
                            // SET COLUMN WIDTH
                            if (i == 1)
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 17;
                            else
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 20;
                            tempb2b++;
                        }

                        // GET RANGE AND SET DIFFRENT PROPERTIES
                        Excel.Range headerRangeb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1 + intBlankRow, 1], (Excel.Range)newWSb2b.Cells[1 + intBlankRow, strHeader.Length]);
                        headerRangeb2b.WrapText = true;
                        headerRangeb2b.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                        headerRangeb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        headerRangeb2b.Font.Bold = true;
                        headerRangeb2b.Font.Name = "Calibri";
                        #endregion

                        #region COPY DATA FROM DATATABLE TO ARRAY

                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrb2b = new object[dtb2b.Rows.Count, strHeader.Length];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtb2b.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtb2b.Columns.Count; j++)
                            {
                                if (j == 0)
                                    arrb2b[i, j] = i + 1;
                                else
                                    arrb2b[i, j] = Convert.ToString(dtb2b.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topb2b = (Excel.Range)newWSb2b.Cells[2 + intBlankRow, 1];
                        Excel.Range bottomb2b = (Excel.Range)newWSb2b.Cells[dtb2b.Rows.Count + 1 + intBlankRow, strHeader.Length];
                        Excel.Range sheetRangeb2b = newWSb2b.Range[topb2b, bottomb2b];
                        sheetRangeb2b.NumberFormat = "@";
                        //FILL ARRAY IN EXCEL
                        sheetRangeb2b.Value2 = arrb2b;

                        #endregion
                    }
                    #endregion

                    #region SPQGSTR1CDN

                    #region Bind Data of SPQGSTR1CDN
                    dtb2b = new DataTable();
                    query = "Select Fld_Id,Fld_GSTIN,Fld_PartyName,Fld_TypeOfNote,Fld_PreGST,Fld_DbtCrdtNoteNo,Fld_DbtCrdtNoteDate,Fld_OrgInvoiceNo,Fld_OrginvoiceDate,Fld_OrgInvoiceValue,Fld_Rate,Fld_Taxable,Fld_IGSTAmnt,Fld_CGSTAmnt,Fld_SGSTAmnt,Fld_CessAmnt,Fld_PlaceOfSupply from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    dtb2b = objGSTR5.GetDataGSTR1(query);
                    #endregion

                    if (dtb2b != null && dtb2b.Rows.Count > 0)
                    {
                        #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                        Excel.Worksheet newWSb2b = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                        newWSb2b.Name = "SPQGSTR1CDN";

                        #region Assign Company Data to Array
                        dtComp.Rows[2]["CompValue"] = "SPQGSTR1CDN";
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrCompb2b = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtComp.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtComp.Columns.Count; j++)
                            {
                                arrCompb2b[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topCompb2b = (Excel.Range)newWSb2b.Cells[1, 1];
                        Excel.Range bottomCompb2b = (Excel.Range)newWSb2b.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                        Excel.Range sheetRangeCompb2b = newWSb2b.Range[topCompb2b, bottomCompb2b];
                        //FILL ARRAY IN EXCEL
                        sheetRangeCompb2b.Value2 = arrCompb2b;

                        Excel.Range headerRangeCompb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1, 1], (Excel.Range)newWSb2b.Cells[3, 2]);
                        headerRangeCompb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                        headerRangeCompb2b.Font.Bold = true;
                        #endregion

                        int tempb2b = 0;
                        int intBlankRow = 4;
                        // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER                
                        string[] strHeader = { "", "Sr. #", "GSTIN/UIN of Recipient", "Party Name", "Type of note (Debit/ Credit)", "Pre GST Regime Dr./ Cr. Notes", "Debit Note/ credit note/ Refund voucher No.", "Debit Note/ credit note/ Refund voucher Date", "Original Invoice No", "Original Invoice Date", "Note/Refund Voucher Value", "Rate", "Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "CESS Amount", "Place of supply" };

                        for (int i = 1; i < strHeader.Length; i++)
                        {
                            newWSb2b.Cells[1 + intBlankRow, i] = strHeader[i].ToString();
                            // SET COLUMN WIDTH
                            if (i == 1)
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 17;
                            else
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 20;
                            tempb2b++;
                        }

                        // GET RANGE AND SET DIFFRENT PROPERTIES
                        Excel.Range headerRangeb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1 + intBlankRow, 1], (Excel.Range)newWSb2b.Cells[1 + intBlankRow, strHeader.Length]);
                        headerRangeb2b.WrapText = true;
                        headerRangeb2b.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                        headerRangeb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        headerRangeb2b.Font.Bold = true;
                        headerRangeb2b.Font.Name = "Calibri";
                        #endregion

                        #region COPY DATA FROM DATATABLE TO ARRAY

                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrb2b = new object[dtb2b.Rows.Count, strHeader.Length];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtb2b.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtb2b.Columns.Count; j++)
                            {
                                if (j == 0)
                                    arrb2b[i, j] = i + 1;
                                else
                                    arrb2b[i, j] = Convert.ToString(dtb2b.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topb2b = (Excel.Range)newWSb2b.Cells[2 + intBlankRow, 1];
                        Excel.Range bottomb2b = (Excel.Range)newWSb2b.Cells[dtb2b.Rows.Count + 1 + intBlankRow, strHeader.Length];
                        Excel.Range sheetRangeb2b = newWSb2b.Range[topb2b, bottomb2b];
                        sheetRangeb2b.NumberFormat = "@";
                        //FILL ARRAY IN EXCEL
                        sheetRangeb2b.Value2 = arrb2b;

                        #endregion
                    }
                    #endregion

                    #region SPQGSTR1B2CS

                    #region Bind Data of SPQGSTR1B2CS
                    dtb2b = new DataTable();
                    query = "Select Fld_Id,Fld_SupplyType,Fld_POS,Fld_Rate,Fld_TaxableValue,Fld_IGST,Fld_CGST,Fld_SGST,Fld_Cess,Fld_GSTINofEcom,Fld_NameofEcom,Fld_FinancialYear from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    dtb2b = objGSTR5.GetDataGSTR1(query);
                    #endregion

                    if (dtb2b != null && dtb2b.Rows.Count > 0)
                    {
                        #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                        Excel.Worksheet newWSb2b = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                        newWSb2b.Name = "SPQGSTR1B2CS";

                        #region Assign Company Data to Array
                        dtComp.Rows[2]["CompValue"] = "SPQGSTR1B2CS";
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrCompb2b = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtComp.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtComp.Columns.Count; j++)
                            {
                                arrCompb2b[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topCompb2b = (Excel.Range)newWSb2b.Cells[1, 1];
                        Excel.Range bottomCompb2b = (Excel.Range)newWSb2b.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                        Excel.Range sheetRangeCompb2b = newWSb2b.Range[topCompb2b, bottomCompb2b];
                        //FILL ARRAY IN EXCEL
                        sheetRangeCompb2b.Value2 = arrCompb2b;

                        Excel.Range headerRangeCompb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1, 1], (Excel.Range)newWSb2b.Cells[3, 2]);
                        headerRangeCompb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                        headerRangeCompb2b.Font.Bold = true;
                        #endregion

                        int tempb2b = 0;
                        int intBlankRow = 4;
                        // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER                
                        string[] strHeader = { "", "Sr. #", "Supply Type", "Place Of Supply", "Rate of Tax", "Total Taxable Value", "IGST Amount", "CGST Amount", "SGST Amount", "Cess Amount", "GSTIN of E-commerce Operator", "Name of E-Commerce Operator", "Financial Year" };

                        for (int i = 1; i < strHeader.Length; i++)
                        {
                            newWSb2b.Cells[1 + intBlankRow, i] = strHeader[i].ToString();
                            // SET COLUMN WIDTH
                            if (i == 1)
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 17;
                            else
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 20;
                            tempb2b++;
                        }

                        // GET RANGE AND SET DIFFRENT PROPERTIES
                        Excel.Range headerRangeb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1 + intBlankRow, 1], (Excel.Range)newWSb2b.Cells[1 + intBlankRow, strHeader.Length]);
                        headerRangeb2b.WrapText = true;
                        headerRangeb2b.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                        headerRangeb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        headerRangeb2b.Font.Bold = true;
                        headerRangeb2b.Font.Name = "Calibri";
                        #endregion

                        #region COPY DATA FROM DATATABLE TO ARRAY

                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrb2b = new object[dtb2b.Rows.Count, strHeader.Length];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtb2b.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtb2b.Columns.Count; j++)
                            {
                                if (j == 0)
                                    arrb2b[i, j] = i + 1;
                                else
                                    arrb2b[i, j] = Convert.ToString(dtb2b.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topb2b = (Excel.Range)newWSb2b.Cells[2 + intBlankRow, 1];
                        Excel.Range bottomb2b = (Excel.Range)newWSb2b.Cells[dtb2b.Rows.Count + 1 + intBlankRow, strHeader.Length];
                        Excel.Range sheetRangeb2b = newWSb2b.Range[topb2b, bottomb2b];
                        sheetRangeb2b.NumberFormat = "@";
                        //FILL ARRAY IN EXCEL
                        sheetRangeb2b.Value2 = arrb2b;

                        #endregion
                    }
                    #endregion

                    #region SPQGSTR1B2CL

                    #region Bind Data of SPQGSTR1B2CL
                    dtb2b = new DataTable();
                    query = "Select Fld_Id,Fld_Party,Fld_POS,Fld_InvoiceNo,Fld_InvoiceDate,Fld_InvoiceValue,Fld_Rate,Fld_TaxableValue,Fld_IGST,Fld_Cess,Fld_GSTINEComm from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    dtb2b = objGSTR5.GetDataGSTR1(query);
                    #endregion

                    if (dtb2b != null && dtb2b.Rows.Count > 0)
                    {
                        #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                        Excel.Worksheet newWSb2b = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                        newWSb2b.Name = "SPQGSTR1B2CL";

                        #region Assign Company Data to Array
                        dtComp.Rows[2]["CompValue"] = "SPQGSTR1B2CL";
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrCompb2b = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtComp.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtComp.Columns.Count; j++)
                            {
                                arrCompb2b[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topCompb2b = (Excel.Range)newWSb2b.Cells[1, 1];
                        Excel.Range bottomCompb2b = (Excel.Range)newWSb2b.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                        Excel.Range sheetRangeCompb2b = newWSb2b.Range[topCompb2b, bottomCompb2b];
                        //FILL ARRAY IN EXCEL
                        sheetRangeCompb2b.Value2 = arrCompb2b;

                        Excel.Range headerRangeCompb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1, 1], (Excel.Range)newWSb2b.Cells[3, 2]);
                        headerRangeCompb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                        headerRangeCompb2b.Font.Bold = true;
                        #endregion

                        int tempb2b = 0;
                        int intBlankRow = 4;
                        // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER                
                        string[] strHeader = { "", "Sr. #", "Party Name", "Place Of Supply", "Invoice No", "Invoice Date", "Invoice Value", "Rate", "Total Taxable Value", "IGST Amount", "CESS Amount", "E-Commerce GSTIN" };

                        for (int i = 1; i < strHeader.Length; i++)
                        {
                            newWSb2b.Cells[1 + intBlankRow, i] = strHeader[i].ToString();
                            // SET COLUMN WIDTH
                            if (i == 1)
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 17;
                            else
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 20;
                            tempb2b++;
                        }

                        // GET RANGE AND SET DIFFRENT PROPERTIES
                        Excel.Range headerRangeb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1 + intBlankRow, 1], (Excel.Range)newWSb2b.Cells[1 + intBlankRow, strHeader.Length]);
                        headerRangeb2b.WrapText = true;
                        headerRangeb2b.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                        headerRangeb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        headerRangeb2b.Font.Bold = true;
                        headerRangeb2b.Font.Name = "Calibri";
                        #endregion

                        #region COPY DATA FROM DATATABLE TO ARRAY

                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrb2b = new object[dtb2b.Rows.Count, strHeader.Length];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtb2b.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtb2b.Columns.Count; j++)
                            {
                                if (j == 0)
                                    arrb2b[i, j] = i + 1;
                                else
                                    arrb2b[i, j] = Convert.ToString(dtb2b.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topb2b = (Excel.Range)newWSb2b.Cells[2 + intBlankRow, 1];
                        Excel.Range bottomb2b = (Excel.Range)newWSb2b.Cells[dtb2b.Rows.Count + 1 + intBlankRow, strHeader.Length];
                        Excel.Range sheetRangeb2b = newWSb2b.Range[topb2b, bottomb2b];
                        sheetRangeb2b.NumberFormat = "@";
                        //FILL ARRAY IN EXCEL
                        sheetRangeb2b.Value2 = arrb2b;

                        #endregion
                    }
                    #endregion

                    #region SPQGSTR1B2B

                    #region Bind Data of SPQGSTR1B2B
                    dtb2b = new DataTable();
                    //query = "Select Fld_Id,Fld_ShareHolderName,Fld_PartyName,Fld_InvoiceNo,Fld_InvoiceDate,Fld_InvoiceValue,Fld_IGSTRate,Fld_InvoiceTaxableVal,Fld_IGSTAmnt,Fld_CGSTAmnt,Fld_SGSTAmnt,Fld_CessAmount,Fld_POS,Fld_IndSupAttac,Fld_InvType,Fld_GSTINofEcom from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    query = "Select Fld_Id,Fld_CustomerName,Fld_PartyName,Fld_InvoiceNo,Fld_InvoiceDate,Fld_InvoiceValue,Fld_IGSTRate,Fld_InvoiceTaxableVal,Fld_IGSTAmnt,Fld_CGSTAmnt,Fld_SGSTAmnt,Fld_CessAmount,Fld_POS,Fld_IndSupAttac,Fld_InvType,Fld_GSTINofEcom from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus != 'Total'";
                    dtb2b = objGSTR5.GetDataGSTR1(query);
                    #endregion

                    if (dtb2b != null && dtb2b.Rows.Count > 0)
                    {
                        #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                        Excel.Worksheet newWSb2b = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                        newWSb2b.Name = "SPQGSTR1B2B";                        

                        #region Assign Company Data to Array
                        dtComp.Rows[2]["CompValue"] = "SPQGSTR1B2B";
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrCompb2b = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtComp.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtComp.Columns.Count; j++)
                            {
                                arrCompb2b[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topCompb2b = (Excel.Range)newWSb2b.Cells[1, 1];
                        Excel.Range bottomCompb2b = (Excel.Range)newWSb2b.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                        Excel.Range sheetRangeCompb2b = newWSb2b.Range[topCompb2b, bottomCompb2b];
                        //FILL ARRAY IN EXCEL
                        sheetRangeCompb2b.Value2 = arrCompb2b;

                        Excel.Range headerRangeCompb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1, 1], (Excel.Range)newWSb2b.Cells[3, 2]);
                        headerRangeCompb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                        headerRangeCompb2b.Font.Bold = true;
                        #endregion

                        int tempb2b = 0; 
                        int intBlankRow = 4;
                        // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER                
                        string[] strHeader = { "", "Sr. #", "GSTIN/UIN", "Party Name", "Invoice No", "Invoice Date", "Invoice Value", "Rate", "Total Taxable Value", "IGST Amount","CGST Amount","SGST Amount","CESS Amount","Place Of Supply","Reverse Charge","Invoice Type","E-Commerce GSTIN" };

                        for (int i = 1; i < strHeader.Length; i++)
                        {
                            newWSb2b.Cells[1 + intBlankRow, i] = strHeader[i].ToString();
                            // SET COLUMN WIDTH
                            if (i == 1)
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 17;
                            else
                                ((Excel.Range)newWSb2b.Cells[1 + intBlankRow, i]).ColumnWidth = 20;
                            tempb2b++;
                        }

                        // GET RANGE AND SET DIFFRENT PROPERTIES
                        Excel.Range headerRangeb2b = (Excel.Range)newWSb2b.get_Range((Excel.Range)newWSb2b.Cells[1 + intBlankRow, 1], (Excel.Range)newWSb2b.Cells[1 + intBlankRow, strHeader.Length]);
                        headerRangeb2b.WrapText = true;
                        headerRangeb2b.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                        headerRangeb2b.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                        headerRangeb2b.Font.Bold = true;
                        headerRangeb2b.Font.Name = "Calibri";
                        #endregion

                        #region COPY DATA FROM DATATABLE TO ARRAY

                        // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                        object[,] arrb2b = new object[dtb2b.Rows.Count, strHeader.Length];

                        // ASSIGN DATA TO ARRAY FROM DATATABLE
                        // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                        for (int i = 0; i < dtb2b.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtb2b.Columns.Count; j++)
                            {
                                if (j == 0)
                                    arrb2b[i, j] = i + 1;
                                else
                                    arrb2b[i, j] = Convert.ToString(dtb2b.Rows[i][j]);
                            }
                        }

                        //SET EXCEL RANGE TO PASTE THE DATA
                        Excel.Range topb2b = (Excel.Range)newWSb2b.Cells[2 + intBlankRow, 1];
                        Excel.Range bottomb2b = (Excel.Range)newWSb2b.Cells[dtb2b.Rows.Count + 1 + intBlankRow, strHeader.Length];
                        Excel.Range sheetRangeb2b = newWSb2b.Range[topb2b, bottomb2b];
                        sheetRangeb2b.NumberFormat = "@";
                        //FILL ARRAY IN EXCEL
                        sheetRangeb2b.Value2 = arrb2b;

                        #endregion
                    }
                    #endregion     

                    #region GSTR1 Dashboard

                    #region CREATE WORKBOOK AND ASSIGN COLUMNNAME
                    Excel.Worksheet newWS = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value, Missing.Value, Missing.Value);
                    newWS.Name = "GSTR1 Dashboard";

                    // DELETE UNUSED WORKSHEETS FROM WORKBOOK
                    //foreach (Excel.Worksheet ws in WB.Worksheets)
                    //{
                    //    if (ws.Name != "GSTR1")
                    //        ((Excel.Worksheet)WB.Worksheets[ws.Name]).Delete();
                    //}

                    #region Assign Company Data to Array
                    dtComp.Rows[2]["CompValue"] = "GSTR1";
                    // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                    object[,] arrComp = new object[dtComp.Rows.Count, dtComp.Columns.Count + 1];

                    // ASSIGN DATA TO ARRAY FROM DATATABLE
                    // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS
                    for (int i = 0; i < dtComp.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtComp.Columns.Count; j++)
                        {
                            arrComp[i, j + 1] = Convert.ToString(dtComp.Rows[i][j]);
                        }
                    }

                    Excel.Range rng_logo = (Excel.Range)newWS.get_Range((Excel.Range)newWS.Cells[1, 1], (Excel.Range)newWS.Cells[3, 1]);
                    rng_logo.Merge();
                    //string _stLOGO = Application.StartupPath + @"\Export_Excel.jpg";
                    //System.Drawing.Image oImage = System.Drawing.Image.FromFile(_stLOGO);

                    System.Drawing.Image oImage = null;//System.Drawing.Image.FromStream(Properties.Resources.Bac);

                   System.Windows.Forms.Clipboard.SetDataObject(oImage, true);
                    //newWS.Paste(rng_logo, _stLOGO);

                    //SET EXCEL RANGE TO PASTE THE DATA
                    Excel.Range topComp = (Excel.Range)newWS.Cells[1, 1];
                    Excel.Range bottomComp = (Excel.Range)newWS.Cells[dtComp.Rows.Count, dtComp.Columns.Count + 1];
                    Excel.Range sheetRangeComp = newWS.Range[topComp, bottomComp];
                    //FILL ARRAY IN EXCEL
                    sheetRangeComp.Value2 = arrComp;

                    Excel.Range headerRangeComp = (Excel.Range)newWS.get_Range((Excel.Range)newWS.Cells[1, 1], (Excel.Range)newWS.Cells[3, 2]);
                    headerRangeComp.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
                    headerRangeComp.Font.Bold = true;

                    #endregion

                    int temp = 0;
                    // ASSIGN COLUMN HEADER AS PAR THE GRID HEADER
                    for (int i = 1; i < dgvMain.Columns.Count + 1; i++)
                    {
                        newWS.Cells[1 + 4, i] = dgvMain.Columns[temp].HeaderText.ToString();
                        // SET COLUMN WIDTH
                        if (i == 1 || i == 0)
                            ((Excel.Range)newWS.Cells[1 + 4, i]).ColumnWidth = 35;
                        else if (i >= 2 && i <= 14)
                            ((Excel.Range)newWS.Cells[1 + 4, i]).ColumnWidth = 16;
                        else
                            ((Excel.Range)newWS.Cells[1 + 4, i]).ColumnWidth = 16;
                        temp++;
                    }

                    // GET RANGE AND SET DIFFRENT PROPERTIES
                    Excel.Range headerRange = (Excel.Range)newWS.get_Range((Excel.Range)newWS.Cells[1 + 4, 1], (Excel.Range)newWS.Cells[1 + 4, dgvMain.Columns.Count]);
                    headerRange.WrapText = true;
                    headerRange.VerticalAlignment = Excel.XlVAlign.xlVAlignCenter;
                    headerRange.HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                    headerRange.Font.Bold = true;
                    headerRange.Font.Name = "Calibri";
                    #endregion

                    #region COPY DATA FROM DATATABLE TO ARRAY

                    // CREATE ARRAY TO HOLD THE DATA OF DATATABLE
                    object[,] arr = new object[dgvMain.Rows.Count + 7, dgvMain.Columns.Count];

                    // ASSIGN DATA TO ARRAY FROM DATATABLE
                    // FOR LICENECE ALLOWS TO EXPORT ALL RECORDS


                    for (int i = 0; i < dgvMain.Rows.Count; i++)
                    {
                        for (int j = 0; j < dgvMain.Columns.Count; j++)
                        {
                            arr[i, j] = Convert.ToString(dgvMain.Rows[i].Cells[j].Value);
                        }
                    }
                    //for (int i = DgvMain.Rows.Count; i < DgvMain.Rows.Count + 1; i++)
                    //{
                    //    for (int j = 0; j < dgvtotal.Columns.Count; j++)
                    //    {
                    //        arr[DgvMain.Rows.Count + 1, j] = Convert.ToString(dgvtotal.Rows[0].Cells[j].Value);
                    //    }
                    //}

                    for (int i = dgvMain.Rows.Count; i < dgvMain.Rows.Count + 1; i++)
                    {
                        for (int iNew = 0; iNew < dgvMain.Rows.Count; iNew++)
                        {
                            for (int j = 0; j < dgvMain.Columns.Count; j++)
                            {
                                arr[iNew, j] = Convert.ToString(dgvMain.Rows[iNew].Cells[j].Value);
                            }
                        }
                    }

                    for (int i = dgvtotal.Rows.Count; i < dgvtotal.Rows.Count + 1; i++)
                    {
                        for (int j = 0; j < dgvaccount.Columns.Count; j++)
                        {
                            arr[dgvMain.Rows.Count + 3, j] = Convert.ToString(dgvaccount.Rows[0].Cells[j].Value);
                        }
                    }
                    for (int i = dgvaccount.Rows.Count; i < dgvaccount.Rows.Count + 1; i++)
                    {
                        for (int j = 0; j < dgvdiff.Columns.Count; j++)
                        {
                            arr[dgvMain.Rows.Count + 5, j] = Convert.ToString(dgvdiff.Rows[0].Cells[j].Value);
                        }
                    }

                    //SET EXCEL RANGE TO PASTE THE DATA
                    Excel.Range top = (Excel.Range)newWS.Cells[2 + 4, 1];
                    Excel.Range bottom = (Excel.Range)newWS.Cells[dgvMain.Rows.Count + 7 + 4, dgvMain.Columns.Count];
                    Excel.Range sheetRange = newWS.Range[top, bottom];

                    //FILL ARRAY IN EXCEL
                    sheetRange.Value2 = arr;

                    #endregion

                    #endregion

                    #region EXPORTING TO EXCEL
                    // DELETE UNUSED WORKSHEETS FROM WORKBOOK
                    foreach (Excel.Worksheet ws in WB.Worksheets)
                    {
                        if (ws.Name == "Sheet1" || ws.Name == "Sheet2" || ws.Name == "Sheet3")
                            ((Excel.Worksheet)WB.Worksheets[ws.Name]).Delete();
                    }

                    // SAVE DIALOG BOX TO SAVE EXCEL WORKBOOK
                    SaveFileDialog saveExcel = new SaveFileDialog();
                    saveExcel.Filter = "Execl files (*.xlsx)|*.xlsx";
                    saveExcel.Title = "Save excel File";
                    saveExcel.ShowDialog();

                    if (saveExcel.FileName != "")
                    {
                        #region CLOSE OPENED EXCEL IF SAME NAME USER SAVED FILE
                        foreach (Process proc in System.Diagnostics.Process.GetProcessesByName("EXCEL"))
                        {
                            string fName = System.IO.Path.GetFileName(saveExcel.FileName);
                            if (proc.MainWindowTitle == "Microsoft Excel - " + fName)
                                proc.Kill();
                        }
                        #endregion

                        // DELETE OLD FILE
                        //try
                        //{
                        if (File.Exists(saveExcel.FileName))
                            File.Delete(saveExcel.FileName);
                        //}
                        //catch
                        //{
                        //    MessageBox.Show("Please close opened related excel file.");
                        //    return;
                        //}

                        // SAVE EXCEL FILE AND CLOSE CREATED APPLICATION
                        newWS.SaveAs(saveExcel.FileName);
                        excelApp.Quit();
                        MessageBox.Show("Excel file saved!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    #endregion
                }
                else
                {
                    // IF THERE ARE NO RECORD IN MAIN  GRID
                    MessageBox.Show("ExportToExcel: There are no records to export...!!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                pbGSTR1.Visible = false;
            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        private void msImpGSTNutility_Click(object sender, EventArgs e)
        {
            try
            {
                pbGSTR1.Visible = true;
                string filePath = string.Empty; string fileExt = string.Empty;
                string conn = string.Empty, _str = string.Empty;
                Application.DoEvents();
                //open dialog to choose file
                OpenFileDialog file = new OpenFileDialog();
                if (file.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    // get file name and extention of selected file
                    filePath = file.FileName;
                    fileExt = Path.GetExtension(filePath);
                    Application.DoEvents();
                    // check selected file extention
                    if (fileExt.CompareTo(".xls") == 0 || fileExt.CompareTo(".xlsx") == 0)
                    {
                        #region if impoted file is open then close open file
                        foreach (Process proc in System.Diagnostics.Process.GetProcessesByName("EXCEL"))
                        {
                            if (proc.MainWindowTitle == "Microsoft Excel - " + file.SafeFileName)
                                proc.Kill();
                        }
                        #endregion

                        #region connection string
                        if (fileExt.CompareTo(".xls") == 0)
                            conn = @"provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 8.0;HDR=Yes;IMEX=1;TypeGuessRows=0;ImportMixedTypes=Text';"; //for below excel 2007  
                        else
                            conn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0 Xml;HDR=Yes;IMEX=1;TypeGuessRows=0;ImportMixedTypes=Text'"; //for above excel 2007  
                        #endregion

                        pbGSTR1.Visible = true;
                        using (OleDbConnection con = new OleDbConnection(conn))
                        {
                            #region Get Data
                            DataSet dsB2B = new DataSet();
                            DataSet dsB2C = new DataSet();
                            DataSet dsB2CL = new DataSet();
                            DataSet dsB2CS = new DataSet();
                            DataSet dsEXP = new DataSet();
                            DataSet dsNilRt = new DataSet();
                            DataSet dsCDNR = new DataSet();
                            DataSet dsCDNUR = new DataSet();
                            DataSet dsAT = new DataSet();
                            DataSet dsATD = new DataSet();
                            DataSet dsHSN = new DataSet();
                            DataSet dsDOC = new DataSet();

                            DataSet dsb2ba = new DataSet();
                            DataSet dsb2cla = new DataSet();
                            DataSet dsb2csa = new DataSet();
                            DataSet dscdnra = new DataSet();
                            DataSet dscdnura = new DataSet();
                            DataSet dsexpa = new DataSet();
                            DataSet dsata = new DataSet();
                            DataSet dsatadja = new DataSet();

                            DataTable dtB2B = new DataTable();
                            DataTable dtB2C = new DataTable();
                            DataTable dtB2CL = new DataTable();
                            DataTable dtB2CS = new DataTable();
                            DataTable dtEXP = new DataTable();
                            DataTable dtCDNR = new DataTable();
                            DataTable dtAT = new DataTable();
                            DataTable dtTXPD = new DataTable();
                            DataTable dtHSN = new DataTable();
                            DataTable dtDOC = new DataTable();
                            DataTable dtATD = new DataTable();
                            DataTable dtNilRt = new DataTable();
                            DataTable dtCDNUR = new DataTable();

                            DataTable dtb2ba = new DataTable();
                            DataTable dtb2cla = new DataTable();
                            DataTable dtb2csa = new DataTable();
                            DataTable dtcdnra = new DataTable();
                            DataTable dtcdnura = new DataTable();
                            DataTable dtexpa = new DataTable();
                            DataTable dtata = new DataTable();
                            DataTable dtatadja = new DataTable();
                            Application.DoEvents();
                            OleDbDataAdapter oleda = new OleDbDataAdapter("SELECT * FROM [b2b$]", conn);
                            try { oleda.Fill(dsB2B, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda1 = new OleDbDataAdapter("SELECT * FROM [b2cl$]", conn);
                            try { oleda1.Fill(dsB2CL, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda2 = new OleDbDataAdapter("SELECT * FROM [b2cs$]", conn);
                            try { oleda2.Fill(dsB2CS, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda3 = new OleDbDataAdapter("SELECT * FROM [exp$]", conn);
                            try { oleda3.Fill(dsEXP, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda4 = new OleDbDataAdapter("SELECT * FROM [cdnr$]", conn);
                            try { oleda4.Fill(dsCDNR, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda5 = new OleDbDataAdapter("SELECT * FROM [at$]", conn);
                            try { oleda5.Fill(dsAT, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda6 = new OleDbDataAdapter("SELECT * FROM [hsn$]", conn);
                            try { oleda6.Fill(dsHSN, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda7 = new OleDbDataAdapter("SELECT * FROM [docs$]", conn);
                            try { oleda7.Fill(dsDOC, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda8 = new OleDbDataAdapter("SELECT * FROM [atadj$]", conn);
                            try { oleda8.Fill(dsATD, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda9 = new OleDbDataAdapter("SELECT * FROM [exemp$]", conn);
                            try { oleda9.Fill(dsNilRt, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda10 = new OleDbDataAdapter("SELECT * FROM [cdnur$]", conn);
                            try { oleda10.Fill(dsCDNUR, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            Application.DoEvents();
                            OleDbDataAdapter oleda11 = new OleDbDataAdapter("SELECT * FROM [b2ba$]", conn);
                            try { oleda11.Fill(dsb2ba, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda12 = new OleDbDataAdapter("SELECT * FROM [b2cla$]", conn);
                            try { oleda12.Fill(dsb2cla, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda13 = new OleDbDataAdapter("SELECT * FROM [b2csa$]", conn);
                            try { oleda13.Fill(dsb2csa, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda14 = new OleDbDataAdapter("SELECT * FROM [cdnra$]", conn);
                            try { oleda14.Fill(dscdnra, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda15 = new OleDbDataAdapter("SELECT * FROM [cdnura$]", conn);
                            try { oleda15.Fill(dscdnura, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda16 = new OleDbDataAdapter("SELECT * FROM [expa$]", conn);
                            try { oleda16.Fill(dsexpa, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda17 = new OleDbDataAdapter("SELECT * FROM [ata$]", conn);
                            try { oleda17.Fill(dsata, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            OleDbDataAdapter oleda18 = new OleDbDataAdapter("SELECT * FROM [atadja$]", conn);
                            try { oleda18.Fill(dsatadja, "GSTR1"); }
                            catch (Exception ex)
                            { }
                            Application.DoEvents();
                            if (dsB2B.Tables.Count != 0)
                            {
                                dtB2B = dsB2B.Tables["GSTR1"];
                            }
                            if (dsB2CL.Tables.Count != 0)
                            {
                                dtB2CL = dsB2CL.Tables["GSTR1"];
                            }
                            if (dsB2CS.Tables.Count != 0)
                            {
                                dtB2CS = dsB2CS.Tables["GSTR1"];
                            }
                            if (dsEXP.Tables.Count != 0)
                            {
                                dtEXP = dsEXP.Tables["GSTR1"];
                            }
                            if (dsCDNR.Tables.Count != 0)
                            {
                                dtCDNR = dsCDNR.Tables["GSTR1"];
                            }
                            if (dsAT.Tables.Count != 0)
                            {
                                dtAT = dsAT.Tables["GSTR1"];
                            }
                            if (dsHSN.Tables.Count != 0)
                            {
                                dtHSN = dsHSN.Tables["GSTR1"];
                            }
                            if (dsDOC.Tables.Count != 0)
                            {
                                dtDOC = dsDOC.Tables["GSTR1"];
                            }
                            if (dsATD.Tables.Count != 0)
                            {
                                dtATD = dsATD.Tables["GSTR1"];
                            }
                            if (dsNilRt.Tables.Count != 0)
                            {
                                dtNilRt = dsNilRt.Tables["GSTR1"];
                            }
                            if (dsCDNUR.Tables.Count != 0)
                            {
                                dtCDNUR = dsCDNUR.Tables["GSTR1"];
                            }

                            if (dsb2ba.Tables.Count != 0)
                            {
                                dtb2ba = dsb2ba.Tables["GSTR1"];
                            }
                            if (dsb2cla.Tables.Count != 0)
                            {
                                dtb2cla = dsb2cla.Tables["GSTR1"];
                            }
                            if (dsb2csa.Tables.Count != 0)
                            {
                                dtb2csa = dsb2csa.Tables["GSTR1"];
                            }
                            if (dscdnra.Tables.Count != 0)
                            {
                                dtcdnra = dscdnra.Tables["GSTR1"];
                            }
                            if (dscdnura.Tables.Count != 0)
                            {
                                dtcdnura = dscdnura.Tables["GSTR1"];
                            }
                            if (dsexpa.Tables.Count != 0)
                            {
                                dtexpa = dsexpa.Tables["GSTR1"];
                            }
                            if (dsata.Tables.Count != 0)
                            {
                                dtata = dsata.Tables["GSTR1"];
                            }
                            if (dsatadja.Tables.Count != 0)
                            {
                                dtatadja = dsatadja.Tables["GSTR1"];
                            }
                            Application.DoEvents();

                            dtB2B = Utility.RemoveEmptyRowsFromDataTable(dtB2B);
                            dtB2CL = Utility.RemoveEmptyRowsFromDataTable(dtB2CL);
                            dtB2CS = Utility.RemoveEmptyRowsFromDataTable(dtB2CS);
                            dtEXP = Utility.RemoveEmptyRowsFromDataTable(dtEXP);
                            dtCDNR = Utility.RemoveEmptyRowsFromDataTable(dtCDNR);
                            dtAT = Utility.RemoveEmptyRowsFromDataTable(dtAT);
                            dtHSN = Utility.RemoveEmptyRowsFromDataTable(dtHSN);
                            dtDOC = Utility.RemoveEmptyRowsFromDataTable(dtDOC);
                            dtATD = Utility.RemoveEmptyRowsFromDataTable(dtATD);
                            dtNilRt = Utility.RemoveEmptyRowsFromDataTable(dtNilRt);
                            dtCDNUR = Utility.RemoveEmptyRowsFromDataTable(dtCDNUR);
                            dtb2ba = Utility.RemoveEmptyRowsFromDataTable(dtb2ba);
                            dtb2cla = Utility.RemoveEmptyRowsFromDataTable(dtb2cla);
                            dtb2csa = Utility.RemoveEmptyRowsFromDataTable(dtb2csa);
                            dtcdnra = Utility.RemoveEmptyRowsFromDataTable(dtcdnra);
                            dtcdnura = Utility.RemoveEmptyRowsFromDataTable(dtcdnura);
                            dtexpa = Utility.RemoveEmptyRowsFromDataTable(dtexpa);
                            dtata = Utility.RemoveEmptyRowsFromDataTable(dtata);
                            dtatadja = Utility.RemoveEmptyRowsFromDataTable(dtatadja);

                            Application.DoEvents();
                            #endregion

                            #region first delete old data from database
                            int _Result = 0;
                            string Query = "Delete from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime - b2b!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1B2C where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - b2c", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - b2cl", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - b2cs", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - exp", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - cdnr", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - cdnur", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - at", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - txpd", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            _Result = 0;
                            Query = "Delete from SPQR1NilRatedMulti where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - exp", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - nil", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - hsn", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - doc", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }

                            Query = "Delete from SPQR1AmendB2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2BA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendB2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2CLA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendB2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - B2CSA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendEXPORT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - EXPA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendCDNR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - CDNRA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendCDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - CDNURA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendAT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - ATA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            Query = "Delete from SPQR1AmendTXP where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                            _Result = objGSTR5.IUDData(Query);
                            if (_Result != 1)
                            {
                                pbGSTR1.Visible = false;
                                MessageBox.Show("System error.\nPlease try after sometime! - TXPA", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            #endregion

                            #region Merge B2C Data
                            Application.DoEvents();
                            #region Regular Varbal
                            string b2clInvDate = "Invoice date", b2clInvVal = "Invoice Value", b2clInvNo = "Invoice Number", b2clPOS = "Place Of Supply", b2clRate = "Rate", b2clTax = "Taxable Value", b2clCESS = "Cess Amount", b2clEcom = "E-Commerce GSTIN";

                            string b2csType = "Type", b2csPOS = "Place Of Supply", b2csRate = "Rate", b2csTax = "Taxable Value", b2csCESS = "Cess Amount", b2csEcom = "E-Commerce GSTIN";

                            string b2bInvNo = "Invoice Number", b2bInvDate = "Invoice date", b2binvValue = "Invoice Value", b2bPOS = "Place Of Supply", b2bRevCharge = "Reverse Charge", b2bInvType = "Invoice Type", b2bRate = "Rate", b2bTaxValue = "Taxable Value", b2bCESSAmt = "CESS Amount";

                            string hsnNo = "HSN", hsnDescription = "Description", hsnUQC = "UQC", hsnTotalQuantity = "Total Quantity", hsnTotalValue = "Total Value", hsnTaxableValue = "Taxable Value", hsnIntegratedTaxAmount = "Integrated Tax Amount", hsnCentralTaxAmount = "Central Tax Amount", hsnStateUTTaxAmount = "State/UT Tax Amount", hsnCessAmount = "Cess Amount";

                            string docNatureofDocument = "Nature of Document", docSrNoFrom = "Sr# No# From", docSrNoTo = "Sr# No# To", docTotalNumber = "Total Number", docCancelled = "Cancelled";

                            string expInvNo = "Invoice Number", expInvDate = "Invoice date", expShipDate = "Shipping Bill Date", expInvVal = "Invoice Value", expInvTax = "Taxable Value", expRate = "Rate", expType = "Export Type";

                            string cdnrGSTINUINofRecipient = "GSTIN/UIN of Recipient", cdnrInvoiceAdvanceReceiptNumber = "Invoice/Advance Receipt Number", cdnrInvoiceAdvanceReceiptdate = "Invoice/Advance Receipt date", cdnrNoteRefundVoucherNumber = "Note/Refund Voucher Number", cdnrNoteRefundVoucherdate = "Note/Refund Voucher date", cdnrDocumentType = "Document Type", cdnrReasonForIssuingdocument = "Reason For Issuing document", cdnrPlaceOfSupply = "Place Of Supply", cdnrNoteRefundVoucherValue = "Note/Refund Voucher Value", cdnrRate = "Rate", cdnrTaxableValue = "Taxable Value", cdnrCessAmount = "Cess Amount", cdnrPreGST = "Pre GST";

                            string cdnurURType = "UR Type", cdnurNoteRefundVoucherNumber = "Note/Refund Voucher Number", cdnurNoteRefundVoucherdate = "Note/Refund Voucher date", cdnurDocumentType = "Document Type", cdnurInvoiceAdvanceReceiptNumber = "Invoice/Advance Receipt Number", cdnurInvoiceAdvanceReceiptdate = "Invoice/Advance Receipt date", cdnurReasonForIssuingdocument = "Reason For Issuing document", cdnurPlaceOfSupply = "Place Of Supply", cdnurNoteRefundVoucherValue = "Note/Refund Voucher Value", cdnurRate = "Rate", cdnurTaxableValue = "Taxable Value", cdnurCessAmount = "Cess Amount", cdnurPreGST = "Pre GST";

                            string atPlaceOfSupply = "Place Of Supply", atRate = "Rate", atGrossAdvanceReceived = "Gross Advance Received", atCessAmount = "Cess Amount";

                            string atdPlaceOfSupply = "Place Of Supply", atdRate = "Rate", atdGrossAdvanceReceived = "Gross Advance Adjusted", atdCessAmount = "Cess Amount";
                            #endregion
                            Application.DoEvents();
                            #region Amendment Varbal
                            string B2BA_GST = "GSTIN/UIN of Recipient", B2BA_RecName = "Receiver Name", B2BA_OrgInvNo = "Original Invoice Number", B2BA_OrgInvDate = "Original Invoice date", B2BA_RevInvNo = "Revised Invoice Number", B2BA_RevInvDate = "Revised Invoice date", B2BA_InvVal = "Invoice Value", B2BA_POS = "Place Of Supply", B2BA_RevCharge = "Reverse Charge", B2BA_ApplTaxRate = "Applicable % of Tax Rate", B2BA_InvType = "Invoice Type", B2BA_EGST = "E-Commerce GSTIN", B2BA_Rate = "Rate", B2BA_TaxVal = "Taxable Value", B2BA_Cess = "Cess Amount";

                            string B2CLA_OrgInvNo = "Original Invoice Number", B2CLA_OrgInvDate = "Original Invoice date", B2CLA_OrgPOS = "Original Place Of Supply", B2CLA_RevInvNo = "Revised Invoice Number", B2CLA_RevInvDate = "Revised Invoice date", B2CLA_InvVal = "Invoice Value", B2CLA_AppTaxRate = "Applicable % of Tax Rate", B2CLA_Rate = "Rate", B2CLA_TaxVal = "Taxable Value", B2CLA_Cess = "Cess Amount", B2CLA_EGST = "E-Commerce GSTIN";

                            string B2CSA_FinYear = "Financial Year", B2CSA_OrgMonth = "Original Month", B2CSA_POS = "Place Of Supply", B2CSA_Type = "Type", B2CSA_AppTaxRate = "Applicable % of Tax Rate", B2CSA_Rate = "Rate", B2CSA_TaxVal = "Taxable Value", B2CSA_Cess = "Cess Amount", B2CSA_EGST = "E-Commerce GSTIN";

                            string CDNRA_GST = "GSTIN/UIN of Recipient", CDNRA_RecName = "Receiver Name", CDNRA_OrgVouNo = "Original Note/Refund Voucher Number", CDNRA_OrgVouDate = "Original Note/Refund Voucher date", CDNRA_OrgRecNo = "Original Invoice/Advance Receipt Number", CDNRA_OrgRecDate = "Original Invoice/Advance Receipt date", CDNRA_RefVouNo = "Revised Note/Refund Voucher Number", CDNRA_RefVouDate = "Revised Note/Refund Voucher date", CDNRA_DocType = "Document Type", CDNRA_SupType = "Supply Type", CDNRA_RefVouVal = "Note/Refund Voucher Value", CDNRA_AppTaxRate = "Applicable % of Tax Rate", CDNRA_Rate = "Rate", CDNRA_TaxVal = "Taxable Value", CDNRA_Cess = "Cess Amount", CDNRA_PreGST = "Pre GST";

                            string CDNURA_URType = "UR Type", CDNURA_OrgRefVouNo = "Original Note/Refund Voucher Number", CDNURA_OrgRefVouDate = "Original Note/Refund Voucher date", CDNURA_OrgRecNo = "Original Invoice/Advance Receipt Number", CDNURA_RecDate = "Original Invoice/Advance Receipt date", CDNURA_RefNo = "Revised Note/Refund Voucher Number", CDNURA_RefVouDate = "Revised Note/Refund Voucher date", CDNURA_DocType = "Document Type", CDNURA_SupType = "Supply Type", CDNURA_RefVouVal = "Note/Refund Voucher Value", CDNURA_AppTaxRate = "Applicable % of Tax Rate", CDNURA_Rate = "Rate", CDNURA_TaxVal = "Taxable Value", CDNURA_Cess = "Cess Amount", CDNURA_PreGST = "Pre GST";

                            string EXPA_ExpType = "Export Type", EXPA_OrgInvNo = "Original Invoice Number", EXPA_OrgInvDate = "Original Invoice date", EXPA_RevInvNo = "Revised Invoice Number", EXPA_RevInvDate = "Revised Invoice date", EXPA_InvVal = "Invoice Value", EXPA_PortCode = "Port Code", EXPA_ShipNo = "Shipping Bill Number", EXPA_ShipDate = "Shipping Bill Date", EXPA_AppTaxRate = "Applicable % of Tax Rate", EXPA_Rate = "Rate", EXPA_TaxVal = "Taxable Value", EXPA_Cess = "Cess Amount";

                            string ATA_FinYear = "Financial Year", ATA_OrgMonth = "Original Month", ATA_OrgPOS = "Original Place Of Supply", ATA_AppTaxRate = "Applicable % of Tax Rate", ATA_Rate = "Rate", ATA_GrossAdvRec = "Gross Advance Received", ATA_Cess = "Cess Amount";

                            string ATADJA_FinYear = "Financial Year", ATADJA_OrgMonth = "Original Month", ATADJA_OrgPOS = "Original Place Of Supply", ATADJA_AppTaxRate = "Applicable % of Tax Rate", ATADJA_Rate = "Rate", ATADJA_GrossAdvAdj = "Gross Advance Adjusted", ATADJA_Cess = "Cess Amount";
                            #endregion

                            decimal? colRate = null; int _result = 0;
                            #endregion

                            #region  Validation
                            Application.DoEvents();
                            #region  Regular Validation

                            #region B2B
                            if (dtB2B.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtB2B.Columns.Count; i++)
                                {
                                    if (dtB2B.Columns.Count > 13)
                                    {
                                        for (int j = 0; j < dtB2B.Columns.Count; j++)
                                        {
                                            if (dtB2B.Columns.Count > 13)
                                            {
                                                dtB2B.Columns.RemoveAt(dtB2B.Columns.Count - 1);
                                                dtB2B.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtB2B.Columns[i].ColumnName = dtB2B.Rows[2][i].ToString();
                                }

                                dtB2B.Rows[0].Delete();
                                dtB2B.Rows[1].Delete();
                                dtB2B.Rows[2].Delete();
                                dtB2B.AcceptChanges();
                            }
                            for (int i = 0; i < dtB2B.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bPOS, typeof(string));
                                    dtB2B = Utility.ChangeColumnDataType(dtB2B, b2bRevCharge, typeof(string));

                                    dtB2B.Columns.Add("Status");
                                    dtB2B.Columns.Add("b2bIGSTTAmt");
                                    dtB2B.Columns.Add("b2bCGSTTAmt");
                                    dtB2B.Columns.Add("b2bSGSTTAmt");
                                }

                                dtB2B.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim() != "")
                                    dtB2B.Rows[i][b2bPOS] = Utility.strValidStateName(Convert.ToString(dtB2B.Rows[i][b2bPOS]).Trim());

                                if (Convert.ToString(dtB2B.Rows[i][b2bRevCharge]).Trim().ToLower() == "yes" || Convert.ToString(dtB2B.Rows[i][b2bRevCharge]).Trim().ToLower() == "y")
                                    dtB2B.Rows[i][b2bRevCharge] = "Yes";
                                else
                                    dtB2B.Rows[i][b2bRevCharge] = "No";

                                //if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "regular")
                                //    dtB2B.Rows[i][b2bInvType] = "Regular";
                                //else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports with payment")
                                //    dtB2B.Rows[i][b2bInvType] = "SEZ Exports with payment";
                                //else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports without payment")
                                //    dtB2B.Rows[i][b2bInvType] = "SEZ exports without payment";
                                //else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "deemed exports")
                                //    dtB2B.Rows[i][b2bInvType] = "Deemed Exports";
                                //else
                                //    dtB2B.Rows[i][b2bInvType] = "";

                                if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "regular")
                                    dtB2B.Rows[i][b2bInvType] = "Regular";
                                else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports with payment" || Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez supplies with payment")
                                    dtB2B.Rows[i][b2bInvType] = "SEZ Exports with payment";
                                else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez exports without payment" || Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "sez supplies without payment")
                                    dtB2B.Rows[i][b2bInvType] = "SEZ exports without payment";
                                else if (Convert.ToString(dtB2B.Rows[i][b2bInvType]).Trim().ToLower() == "deemed exports")
                                    dtB2B.Rows[i][b2bInvType] = "Deemed Exports";
                                else
                                    dtB2B.Rows[i][b2bInvType] = "";


                                int sj = dtB2B.Columns[b2bInvDate].Ordinal;
                                dtB2B = Utility.ChangeColumnDataType(dtB2B, dtB2B.Columns[b2bInvDate].ColumnName, typeof(string));
                                dtB2B.Columns[b2bInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtB2B.Rows[i][b2bInvDate]);
                                    dtB2B.Rows[i][b2bInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtB2B.Rows[i][b2bInvDate] = "";
                                }

                                if (Convert.ToString(dtB2B.Rows[i][b2bRate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2B.Rows[i][b2bRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtB2B.Rows[i][b2bRate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2B.Rows[i][b2bPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (dtB2B.Rows[i][b2bInvType] == "Regular")
                                    {
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtB2B.Rows[i]["b2bCGSTTAmt"] = Amt.ToString();
                                            dtB2B.Rows[i]["b2bSGSTTAmt"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtB2B.Rows[i]["b2bIGSTTAmt"] = IGSTAmt.ToString();
                                        }
                                    }
                                    else if (dtB2B.Rows[i][b2bInvType] == "SEZ Exports with payment" || dtB2B.Rows[i][b2bInvType] == "Deemed Exports")
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(dtB2B.Rows[i][b2bRate].ToString()) * Convert.ToDecimal(dtB2B.Rows[i][b2bTaxValue].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        //IGSTAmt = Math.Truncate(IGSTAmt * 100) / 100;
                                        dtB2B.Rows[i]["b2bIGSTTAmt"] = IGSTAmt.ToString();
                                    }
                                    else if (dtB2B.Rows[i][b2bInvType] == "SEZ exports without payment")
                                    {
                                        dtB2B.Rows[i]["b2bCGSTTAmt"] = "";
                                        dtB2B.Rows[i]["b2bSGSTTAmt"] = "";
                                        dtB2B.Rows[i]["b2bIGSTTAmt"] = "";
                                    }
                                }

                                if (colRate != null)
                                    dtB2B.Rows[i][b2bRate] = colRate;
                            }
                            #endregion

                            #region HSN
                            if (dtHSN.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtHSN.Columns.Count; i++)
                                {
                                    if (dtHSN.Columns.Count > 10)
                                    {
                                        for (int j = 0; j < dtHSN.Columns.Count; j++)
                                        {
                                            if (dtHSN.Columns.Count > 10)
                                            {
                                                dtHSN.Columns.RemoveAt(dtHSN.Columns.Count - 1);
                                                dtHSN.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtHSN.Columns[i].ColumnName = dtHSN.Rows[2][i].ToString();
                                }

                                dtHSN.Rows[0].Delete();
                                dtHSN.Rows[1].Delete();
                                dtHSN.Rows[2].Delete();
                                dtHSN.AcceptChanges();
                            }

                            for (int i = 0; i < dtHSN.Rows.Count; i++)
                            {
                                if (i == 0)
                                    dtHSN.Columns.Add("Status");

                                dtHSN.Rows[i]["Status"] = "Draft";

                                if (!Utility.HNSUQC(Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim()))
                                    dtHSN.Rows[i][hsnUQC] = "";
                                else
                                    dtHSN.Rows[i][hsnUQC] = Utility.StrHNSUQC(Convert.ToString(dtHSN.Rows[i][hsnUQC]).Trim());
                            }
                            #endregion

                            #region DOC
                            if (dtDOC.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtDOC.Columns.Count; i++)
                                {
                                    if (dtDOC.Columns.Count > 5)
                                    {
                                        for (int j = 0; j < dtDOC.Columns.Count; j++)
                                        {
                                            if (dtDOC.Columns.Count > 5)
                                            {
                                                dtDOC.Columns.RemoveAt(dtDOC.Columns.Count - 1);
                                                dtDOC.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtDOC.Columns[i].ColumnName = dtDOC.Rows[2][i].ToString();
                                }

                                bool flg = false;
                                int rowNo = 0;
                                for (int i = 0; i < dtDOC.Rows.Count; i++)
                                {
                                    for (int j = 0; j < dtDOC.Columns.Count; j++)
                                    {
                                        if (Convert.ToString(dtDOC.Rows[i][j]).Trim().Contains("Note: This section is not supported"))
                                        {
                                            flg = true;
                                            rowNo = i;
                                            break;
                                        }
                                    }
                                }

                                dtDOC.Rows[0].Delete();
                                dtDOC.Rows[1].Delete();
                                dtDOC.Rows[2].Delete();

                                if (flg)
                                    dtDOC.Rows.RemoveAt(rowNo);

                                dtDOC.AcceptChanges();
                            }

                            for (int i = 0; i < dtDOC.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtDOC.Columns.Add("Status");
                                    dtDOC.Columns.Add("Net Issued");
                                }
                                dtDOC.Rows[i]["Status"] = "Draft";

                                if (Utility.NatureOfDocument(Convert.ToString(dtDOC.Rows[i][docNatureofDocument]).Trim()))
                                    dtDOC.Rows[i][docNatureofDocument] = Utility.StrNatureOfDocument(Convert.ToString(dtDOC.Rows[i][docNatureofDocument]).Trim());
                                else
                                    dtDOC.Rows[i][docNatureofDocument] = "";

                                if (Convert.ToString(dtDOC.Rows[i][docTotalNumber]) != "" && Convert.ToString(dtDOC.Rows[i][docCancelled]) != "")
                                {
                                    decimal tNo = Convert.ToString(dtDOC.Rows[i][docTotalNumber]).Trim() == "" ? 0 : Convert.ToDecimal(dtDOC.Rows[i][docTotalNumber]);
                                    decimal can = Convert.ToString(dtDOC.Rows[i][docCancelled]).Trim() == "" ? 0 : Convert.ToDecimal(dtDOC.Rows[i][docCancelled]);

                                    decimal NetIssued = tNo - can;
                                    NetIssued = Math.Round(NetIssued, 2);
                                    dtDOC.Rows[i]["Net Issued"] = NetIssued;
                                }
                            }
                            #endregion

                            #region B2CL
                            if (dtB2CL.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtB2CL.Columns.Count; i++)
                                {
                                    if (dtB2CL.Columns.Count > 9)
                                    {
                                        for (int j = 0; j < dtB2CL.Columns.Count; j++)
                                        {
                                            if (dtB2CL.Columns.Count > 9)
                                            {
                                                dtB2CL.Columns.RemoveAt(dtB2CL.Columns.Count - 1);
                                                dtB2CL.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtB2CL.Columns[i].ColumnName = dtB2CL.Rows[2][i].ToString();
                                }

                                dtB2CL.Rows[0].Delete();
                                dtB2CL.Rows[1].Delete();
                                dtB2CL.Rows[2].Delete();
                                dtB2CL.AcceptChanges();
                            }
                            for (int i = 0; i < dtB2CL.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtB2CL = Utility.ChangeColumnDataType(dtB2CL, b2clPOS, typeof(string));
                                    dtB2CL.Columns.Add("Status");
                                    dtB2CL.Columns.Add("IGST Amount");
                                }

                                dtB2CL.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtB2CL.Rows[i][b2clPOS]).Trim() != "")
                                    dtB2CL.Rows[i][b2clPOS] = Utility.strValidStateName(Convert.ToString(dtB2CL.Rows[i][b2clPOS]).Split('-')[0]);

                                int sj = dtB2CL.Columns[b2clInvDate].Ordinal;
                                dtB2CL = Utility.ChangeColumnDataType(dtB2CL, dtB2CL.Columns[b2clInvDate].ColumnName, typeof(string));
                                dtB2CL.Columns[b2clInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtB2CL.Rows[i][b2clInvDate]);
                                    dtB2CL.Rows[i][b2clInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtB2CL.Rows[i][b2clInvDate] = "";
                                }

                                if (Convert.ToString(dtB2CL.Rows[i][b2clRate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2CL.Rows[i][b2clRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtB2CL.Rows[i][b2clRate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2CL.Rows[i][b2clPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CL.Rows[i][b2clTax].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtB2CL.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CL.Rows[i][b2clTax].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtB2CL.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }

                            #endregion

                            #region B2CS
                            if (dtB2CS.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtB2CS.Columns.Count; i++)
                                {
                                    if (dtB2CS.Columns.Count > 7)
                                    {
                                        for (int j = 0; j < dtB2CS.Columns.Count; j++)
                                        {
                                            if (dtB2CS.Columns.Count > 7)
                                            {
                                                dtB2CS.Columns.RemoveAt(dtB2CS.Columns.Count - 1);
                                                dtB2CS.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtB2CS.Columns[i].ColumnName = dtB2CS.Rows[2][i].ToString();
                                }

                                dtB2CS.Rows[0].Delete();
                                dtB2CS.Rows[1].Delete();
                                dtB2CS.Rows[2].Delete();
                                dtB2CS.AcceptChanges();
                            }

                            for (int i = 0; i < dtB2CS.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csPOS, typeof(string));
                                    dtB2CS = Utility.ChangeColumnDataType(dtB2CS, b2csType, typeof(string));
                                    dtB2CS.Columns.Add("Status");
                                    dtB2CS.Columns.Add("IGST Amount");
                                    dtB2CS.Columns.Add("CGST Amount");
                                    dtB2CS.Columns.Add("SGST Amount");
                                }

                                dtB2CS.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtB2CS.Rows[i][b2csPOS]).Trim() != "")
                                    dtB2CS.Rows[i][b2csPOS] = Utility.strValidStateName(Convert.ToString(dtB2CS.Rows[i][b2csPOS]).Split('-')[0]);

                                if (Convert.ToString(dtB2CS.Rows[i][b2csRate]).Trim() == "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtB2CS.Rows[i][b2csRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtB2CS.Rows[i][b2csRate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtB2CS.Rows[i][b2csPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CS.Rows[i][b2csTax].ToString()) / 100;
                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtB2CS.Rows[i]["CGST Amount"] = Amt.ToString();
                                        dtB2CS.Rows[i]["SGST Amount"] = Amt.ToString();
                                        dtB2CS.Rows[i][b2csType] = "Intra";
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtB2CS.Rows[i][b2csTax].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtB2CS.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        dtB2CS.Rows[i][b2csType] = "Inter";
                                    }
                                }
                            }

                            #endregion

                            #region EXEMP
                            if (dtEXP.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtEXP.Columns.Count; i++)
                                {
                                    if (dtEXP.Columns.Count > 11)
                                    {
                                        for (int j = 0; j < dtEXP.Columns.Count; j++)
                                        {
                                            if (dtEXP.Columns.Count > 11)
                                            {
                                                dtEXP.Columns.RemoveAt(dtEXP.Columns.Count - 1);
                                                dtEXP.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtEXP.Columns[i].ColumnName = dtEXP.Rows[2][i].ToString();
                                }

                                dtEXP.Rows[0].Delete();
                                dtEXP.Rows[1].Delete();
                                dtEXP.Rows[2].Delete();
                                dtEXP.AcceptChanges();
                            }
                            for (int i = 0; i < dtEXP.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtEXP.Columns.Add("Status");
                                    dtEXP.Columns.Add("IGST Amount");
                                }
                                dtEXP.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtEXP.Rows[i][expType]).Trim() != "")
                                    dtEXP.Rows[i][expType] = GetExportType(Convert.ToString(dtEXP.Rows[i][expType]).Trim(), "exp");

                                int sj = dtEXP.Columns[expInvDate].Ordinal;
                                dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expInvDate].ColumnName, typeof(string));
                                dtEXP.Columns[expInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expInvDate]);
                                    dtEXP.Rows[i][expInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtEXP.Rows[i][expInvDate] = "";
                                }

                                sj = dtEXP.Columns[expShipDate].Ordinal;
                                dtEXP = Utility.ChangeColumnDataType(dtEXP, dtEXP.Columns[expShipDate].ColumnName, typeof(string));
                                dtEXP.Columns[expShipDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtEXP.Rows[i][expShipDate]);
                                    dtEXP.Rows[i][expShipDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtEXP.Rows[i][expShipDate] = "";
                                }

                                if (Convert.ToString(dtEXP.Rows[i][expRate]).Trim() == "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtEXP.Rows[i][expRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtEXP.Rows[i][expRate]);

                                if (colRate != null)
                                {
                                    decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtEXP.Rows[i][expInvTax].ToString()) / 100;
                                    IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                    dtEXP.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                }
                                else
                                    dtEXP.Rows[i]["IGST Amount"] = "";
                            }

                            #endregion

                            #region CDNR
                            if (dtCDNR.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtCDNR.Columns.Count; i++)
                                {
                                    if (dtCDNR.Columns.Count > 14)
                                    {
                                        for (int j = 0; j < dtCDNR.Columns.Count; j++)
                                        {
                                            if (dtCDNR.Columns.Count > 14)
                                            {
                                                dtCDNR.Columns.RemoveAt(dtCDNR.Columns.Count - 1);
                                                dtCDNR.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtCDNR.Columns[i].ColumnName = dtCDNR.Rows[2][i].ToString();
                                }

                                dtCDNR.Rows[0].Delete();
                                dtCDNR.Rows[1].Delete();
                                dtCDNR.Rows[2].Delete();
                                dtCDNR.AcceptChanges();
                            }
                            for (int i = 0; i < dtCDNR.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtCDNR.Columns.Add("Status");
                                    dtCDNR.Columns.Add("IGST Amount");
                                    dtCDNR.Columns.Add("CGST Amount");
                                    dtCDNR.Columns.Add("SGST Amount");
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrPlaceOfSupply, typeof(string));
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrPreGST, typeof(string));
                                    dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrDocumentType, typeof(string));
                                    //dtCDNR = Utility.ChangeColumnDataType(dtCDNR, cdnrReasonForIssuingdocument, typeof(string));
                                }
                                if (i == 310)
                                {
                                    string a = "";
                                }
                                dtCDNR.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]).Trim() != "")
                                    dtCDNR.Rows[i][cdnrPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtCDNR.Rows[i][cdnrPreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtCDNR.Rows[i][cdnrPreGST]).Trim().ToLower() == "y")
                                    dtCDNR.Rows[i][cdnrPreGST] = "Yes";
                                else
                                    dtCDNR.Rows[i][cdnrPreGST] = "No";

                                if (Convert.ToString(dtCDNR.Rows[i][cdnrDocumentType]).Trim() != "")
                                    dtCDNR.Rows[i][cdnrDocumentType] = GetExportType(Convert.ToString(dtCDNR.Rows[i][cdnrDocumentType]), "cdnr");

                                //if (!ValidateData(Convert.ToString(dtCDNR.Rows[i][cdnrReasonForIssuingdocument]).Trim(), "cdnReason"))
                                //    dtCDNR.Rows[i][cdnrReasonForIssuingdocument] = "";
                                //else
                                //    dtCDNR.Rows[i][cdnrReasonForIssuingdocument] = Convert.ToString(dtCDNR.Rows[i][cdnrReasonForIssuingdocument]).Trim();

                                int sj = dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].Ordinal;
                                dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].ColumnName, typeof(string));
                                dtCDNR.Columns[cdnrInvoiceAdvanceReceiptdate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate]);
                                    dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtCDNR.Rows[i][cdnrInvoiceAdvanceReceiptdate] = "";
                                }

                                sj = dtCDNR.Columns[cdnrNoteRefundVoucherdate].Ordinal;
                                dtCDNR = Utility.ChangeColumnDataType(dtCDNR, dtCDNR.Columns[cdnrNoteRefundVoucherdate].ColumnName, typeof(string));
                                dtCDNR.Columns[cdnrNoteRefundVoucherdate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtCDNR.Rows[i][cdnrNoteRefundVoucherdate]);
                                    dtCDNR.Rows[i][cdnrNoteRefundVoucherdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtCDNR.Rows[i][cdnrNoteRefundVoucherdate] = "";
                                }

                                if (Convert.ToString(dtCDNR.Rows[i][cdnrRate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Convert.ToString(dtCDNR.Rows[i][cdnrTaxableValue]).Trim() == "" || dtCDNR.Rows[i][cdnrTaxableValue] == null)
                                {
                                    dtCDNR.Rows[i][cdnrTaxableValue] = "0";
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtCDNR.Rows[i][cdnrRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtCDNR.Rows[i][cdnrRate]);

                                if (colRate != null)
                                {

                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtCDNR.Rows[i][cdnrPlaceOfSupply]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNR.Rows[i][cdnrTaxableValue].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtCDNR.Rows[i]["CGST Amount"] = Amt.ToString();
                                        dtCDNR.Rows[i]["SGST Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNR.Rows[i][cdnrTaxableValue].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtCDNR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }

                            #endregion

                            #region CDNUR
                            if (dtCDNUR.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtCDNUR.Columns.Count; i++)
                                {
                                    if (dtCDNUR.Columns.Count > 13)
                                    {
                                        for (int j = 0; j < dtCDNUR.Columns.Count; j++)
                                        {
                                            if (dtCDNUR.Columns.Count > 13)
                                            {
                                                dtCDNUR.Columns.RemoveAt(dtCDNUR.Columns.Count - 1);
                                                dtCDNUR.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtCDNUR.Columns[i].ColumnName = dtCDNUR.Rows[2][i].ToString();
                                }

                                dtCDNUR.Rows[0].Delete();
                                dtCDNUR.Rows[1].Delete();
                                dtCDNUR.Rows[2].Delete();
                                dtCDNUR.AcceptChanges();
                            }
                            for (int i = 0; i < dtCDNUR.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtCDNUR.Columns.Add("Status");
                                    dtCDNUR.Columns.Add("IGST Amount");
                                    dtCDNUR.Columns.Add("CGST Amount");
                                    dtCDNUR.Columns.Add("SGST Amount");
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurPlaceOfSupply, typeof(string));
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurPreGST, typeof(string));
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurDocumentType, typeof(string));
                                    //dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurReasonForIssuingdocument, typeof(string));
                                    dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, cdnurURType, typeof(string));
                                }

                                dtCDNUR.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]).Trim() != "")
                                    dtCDNUR.Rows[i][cdnurPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtCDNUR.Rows[i][cdnurPreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtCDNUR.Rows[i][cdnurPreGST]).Trim().ToLower() == "y")
                                    dtCDNUR.Rows[i][cdnurPreGST] = "Yes";
                                else
                                    dtCDNUR.Rows[i][cdnurPreGST] = "No";

                                if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "b2cl")
                                    dtCDNUR.Rows[i][cdnurURType] = "B2C Large";
                                if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "expwp")
                                    dtCDNUR.Rows[i][cdnurURType] = "Export with payment of GST";
                                if (Convert.ToString(dtCDNUR.Rows[i][cdnurURType]).Trim().ToLower() == "expwop")
                                    dtCDNUR.Rows[i][cdnurURType] = "Export without payment of GST";

                                if (Convert.ToString(dtCDNUR.Rows[i][cdnurDocumentType]).Trim() != "")
                                    dtCDNUR.Rows[i][cdnurDocumentType] = GetExportType(Convert.ToString(dtCDNUR.Rows[i][cdnurDocumentType]), "cdnr");

                                //if (!ValidateData(Convert.ToString(dtCDNUR.Rows[i][cdnurReasonForIssuingdocument]).Trim(), "cdnReason"))
                                //    dtCDNUR.Rows[i][cdnurReasonForIssuingdocument] = "";
                                //else
                                //    dtCDNUR.Rows[i][cdnurReasonForIssuingdocument] = Convert.ToString(dtCDNUR.Rows[i][cdnurReasonForIssuingdocument]).Trim();

                                int sj = dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].Ordinal;
                                dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].ColumnName, typeof(string));
                                dtCDNUR.Columns[cdnurInvoiceAdvanceReceiptdate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate]);
                                    dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtCDNUR.Rows[i][cdnurInvoiceAdvanceReceiptdate] = "";
                                }

                                sj = dtCDNUR.Columns[cdnurNoteRefundVoucherdate].Ordinal;
                                dtCDNUR = Utility.ChangeColumnDataType(dtCDNUR, dtCDNUR.Columns[cdnurNoteRefundVoucherdate].ColumnName, typeof(string));
                                dtCDNUR.Columns[cdnurNoteRefundVoucherdate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate]);
                                    dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtCDNUR.Rows[i][cdnurNoteRefundVoucherdate] = "";
                                }

                                if (Convert.ToString(dtCDNUR.Rows[i][cdnurRate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtCDNUR.Rows[i][cdnurRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtCDNUR.Rows[i][cdnurRate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtCDNUR.Rows[i][cdnurPlaceOfSupply]));
                                    if (Pos.Length > 0)
                                    {
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                        if (StateId == CompanyGSTNState)
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNUR.Rows[i]["CGST Amount"] = Amt.ToString();
                                            dtCDNUR.Rows[i]["SGST Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtCDNUR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtCDNUR.Rows[i][cdnurTaxableValue].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtCDNUR.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                }

                            }

                            #endregion

                            #region At
                            if (dtAT.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtAT.Columns.Count; i++)
                                {
                                    if (dtAT.Columns.Count > 5)
                                    {
                                        for (int j = 0; j < dtAT.Columns.Count; j++)
                                        {
                                            if (dtAT.Columns.Count > 5)
                                            {
                                                dtAT.Columns.RemoveAt(dtAT.Columns.Count - 1);
                                                dtAT.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtAT.Columns[i].ColumnName = dtAT.Rows[2][i].ToString();
                                }

                                dtAT.Rows[0].Delete();
                                dtAT.Rows[1].Delete();
                                dtAT.Rows[2].Delete();
                                dtAT.AcceptChanges();
                            }
                            for (int i = 0; i < dtAT.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtAT = Utility.ChangeColumnDataType(dtAT, atPlaceOfSupply, typeof(string));
                                    dtAT.Columns.Add("Status");
                                    dtAT.Columns.Add("IGSTT Amount");
                                    dtAT.Columns.Add("CGSTT Amount");
                                    dtAT.Columns.Add("SGSTT Amount");
                                }

                                dtAT.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]).Trim() != "")
                                    dtAT.Rows[i][atPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtAT.Rows[i][atRate]).Trim() == "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtAT.Rows[i][atRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtAT.Rows[i][atRate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtAT.Rows[i][atPlaceOfSupply]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtAT.Rows[i][atGrossAdvanceReceived].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtAT.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                        dtAT.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtAT.Rows[i][atGrossAdvanceReceived].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtAT.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }
                            #endregion

                            #region Atd
                            if (dtATD.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtATD.Columns.Count; i++)
                                {
                                    if (dtATD.Columns.Count > 5)
                                    {
                                        for (int j = 0; j < dtATD.Columns.Count; j++)
                                        {
                                            if (dtATD.Columns.Count > 5)
                                            {
                                                dtATD.Columns.RemoveAt(dtATD.Columns.Count - 1);
                                                dtATD.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtATD.Columns[i].ColumnName = dtATD.Rows[2][i].ToString();
                                }

                                dtATD.Rows[0].Delete();
                                dtATD.Rows[1].Delete();
                                dtATD.Rows[2].Delete();
                                dtATD.AcceptChanges();
                            }
                            for (int i = 0; i < dtATD.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtATD = Utility.ChangeColumnDataType(dtATD, atPlaceOfSupply, typeof(string));
                                    dtATD.Columns.Add("Status");
                                    dtATD.Columns.Add("IGSTT Amount");
                                    dtATD.Columns.Add("CGSTT Amount");
                                    dtATD.Columns.Add("SGSTT Amount");
                                }

                                dtATD.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]).Trim() != "")
                                    dtATD.Rows[i][atdPlaceOfSupply] = Utility.strValidStateName(Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtATD.Rows[i][atdRate]).Trim() == "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtATD.Rows[i][atdRate]).Trim()))
                                    colRate = Convert.ToDecimal(dtATD.Rows[i][atdRate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtATD.Rows[i][atdPlaceOfSupply]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtATD.Rows[i][atdGrossAdvanceReceived].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtATD.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                        dtATD.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtATD.Rows[i][atdGrossAdvanceReceived].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtATD.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }
                            #endregion

                            #region Nil
                            if (dtNilRt.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtNilRt.Columns.Count; i++)
                                {
                                    if (dtNilRt.Columns.Count > 4)
                                    {
                                        for (int j = 0; j < dtNilRt.Columns.Count; j++)
                                        {
                                            if (dtNilRt.Columns.Count > 4)
                                            {
                                                dtNilRt.Columns.RemoveAt(dtNilRt.Columns.Count - 1);
                                                dtNilRt.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtNilRt.Columns[i].ColumnName = dtNilRt.Rows[2][i].ToString();
                                }

                                bool flg = false;
                                int rowNo = 0;
                                for (int i = 0; i < dtNilRt.Rows.Count; i++)
                                {
                                    for (int j = 0; j < dtNilRt.Columns.Count; j++)
                                    {
                                        if (Convert.ToString(dtNilRt.Rows[i][j]).Trim().Contains("Note: This section is not supported"))
                                        {
                                            flg = true;
                                            rowNo = i;
                                            break;
                                        }
                                    }
                                }

                                dtNilRt.Rows[0].Delete();
                                dtNilRt.Rows[1].Delete();
                                dtNilRt.Rows[2].Delete();
                                if (flg)
                                    dtNilRt.Rows.RemoveAt(rowNo);
                                dtNilRt.AcceptChanges();
                            }
                            for (int i = 0; i < dtNilRt.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtNilRt.Columns.Add("Status");
                                }
                                dtNilRt.Rows[i]["Status"] = "Draft";
                            }
                            #endregion

                            #endregion

                            #region  Amendmet Validation
                            Application.DoEvents();
                            #region B2BA
                            if (dtb2ba.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtb2ba.Columns.Count; i++)
                                {
                                    if (dtb2ba.Columns.Count > 15)
                                    {
                                        for (int j = 0; j < dtb2ba.Columns.Count; j++)
                                        {
                                            if (dtb2ba.Columns.Count > 15)
                                            {
                                                dtb2ba.Columns.RemoveAt(dtb2ba.Columns.Count - 1);
                                                dtb2ba.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtb2ba.Columns[i].ColumnName = dtb2ba.Rows[2][i].ToString();
                                }

                                dtb2ba.Rows[0].Delete();
                                dtb2ba.Rows[1].Delete();
                                dtb2ba.Rows[2].Delete();
                                dtb2ba.AcceptChanges();
                            }
                            for (int i = 0; i < dtb2ba.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtb2ba = Utility.ChangeColumnDataType(dtb2ba, B2BA_POS, typeof(string));
                                    dtb2ba = Utility.ChangeColumnDataType(dtb2ba, B2BA_RevCharge, typeof(string));

                                    dtb2ba.Columns.Add("Status");
                                    dtb2ba.Columns.Add("b2baIGSTTAmt");
                                    dtb2ba.Columns.Add("b2baCGSTTAmt");
                                    dtb2ba.Columns.Add("b2baSGSTTAmt");
                                }

                                dtb2ba.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_POS]).Trim() != "")
                                    dtb2ba.Rows[i][B2BA_POS] = Utility.strValidStateName(Convert.ToString(dtb2ba.Rows[i][B2BA_POS]).Trim());

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_RevCharge]).Trim().ToLower() == "yes" || Convert.ToString(dtb2ba.Rows[i][B2BA_RevCharge]).Trim().ToLower() == "y")
                                    dtb2ba.Rows[i][B2BA_RevCharge] = "Yes";
                                else
                                    dtb2ba.Rows[i][B2BA_RevCharge] = "No";

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "regular")
                                    dtb2ba.Rows[i][B2BA_InvType] = "Regular";
                                else if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "sez exports with payment")
                                    dtb2ba.Rows[i][B2BA_InvType] = "SEZ Exports with payment";
                                else if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "sez exports without payment")
                                    dtb2ba.Rows[i][B2BA_InvType] = "SEZ exports without payment";
                                else if (Convert.ToString(dtb2ba.Rows[i][B2BA_InvType]).Trim().ToLower() == "deemed exports")
                                    dtb2ba.Rows[i][B2BA_InvType] = "Deemed Exports";
                                else
                                    dtb2ba.Rows[i][B2BA_InvType] = "";


                                int sj = dtb2ba.Columns[B2BA_OrgInvDate].Ordinal;
                                dtb2ba = Utility.ChangeColumnDataType(dtb2ba, dtb2ba.Columns[B2BA_OrgInvDate].ColumnName, typeof(string));
                                dtb2ba.Columns[B2BA_OrgInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2ba.Rows[i][B2BA_OrgInvDate]);
                                    dtb2ba.Rows[i][B2BA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2ba.Rows[i][B2BA_OrgInvDate] = "";
                                }

                                sj = dtb2ba.Columns[B2BA_RevInvDate].Ordinal;
                                dtb2ba = Utility.ChangeColumnDataType(dtb2ba, dtb2ba.Columns[B2BA_RevInvDate].ColumnName, typeof(string));
                                dtb2ba.Columns[B2BA_RevInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2ba.Rows[i][B2BA_RevInvDate]);
                                    dtb2ba.Rows[i][B2BA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2ba.Rows[i][B2BA_RevInvDate] = "";
                                }

                                if (Convert.ToString(dtb2ba.Rows[i][B2BA_Rate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtb2ba.Rows[i][B2BA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtb2ba.Rows[i][B2BA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtb2ba.Rows[i][B2BA_POS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtb2ba.Rows[i][B2BA_TaxVal].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtb2ba.Rows[i]["b2baCGSTTAmt"] = Amt.ToString();
                                        dtb2ba.Rows[i]["b2baSGSTTAmt"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtb2ba.Rows[i][B2BA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2ba.Rows[i]["b2baIGSTTAmt"] = IGSTAmt.ToString();
                                    }
                                }

                                if (colRate != null)
                                    dtb2ba.Rows[i][B2BA_Rate] = colRate;
                            }
                            #endregion

                            #region B2CLA
                            if (dtb2cla.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtb2cla.Columns.Count; i++)
                                {
                                    if (dtb2cla.Columns.Count > 11)
                                    {
                                        for (int j = 0; j < dtb2cla.Columns.Count; j++)
                                        {
                                            if (dtb2cla.Columns.Count > 11)
                                            {
                                                dtb2cla.Columns.RemoveAt(dtb2cla.Columns.Count - 1);
                                                dtb2cla.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtb2cla.Columns[i].ColumnName = dtb2cla.Rows[2][i].ToString();
                                }

                                dtb2cla.Rows[0].Delete();
                                dtb2cla.Rows[1].Delete();
                                dtb2cla.Rows[2].Delete();
                                dtb2cla.AcceptChanges();
                            }
                            for (int i = 0; i < dtb2cla.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtb2cla = Utility.ChangeColumnDataType(dtb2cla, B2CLA_OrgPOS, typeof(string));
                                    dtb2cla.Columns.Add("Status");
                                    dtb2cla.Columns.Add("IGST Amount");
                                }

                                dtb2cla.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtb2cla.Rows[i][B2CLA_OrgPOS]).Trim() != "")
                                    dtb2cla.Rows[i][B2CLA_OrgPOS] = Utility.strValidStateName(Convert.ToString(dtb2cla.Rows[i][B2CLA_OrgPOS]).Split('-')[0]);

                                int sj = dtb2cla.Columns[B2CLA_OrgInvDate].Ordinal;
                                dtb2cla = Utility.ChangeColumnDataType(dtb2cla, dtb2cla.Columns[B2CLA_OrgInvDate].ColumnName, typeof(string));
                                dtb2cla.Columns[B2CLA_OrgInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2cla.Rows[i][B2CLA_OrgInvDate]);
                                    dtb2cla.Rows[i][B2CLA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2cla.Rows[i][B2CLA_OrgInvDate] = "";
                                }

                                sj = dtb2cla.Columns[B2CLA_RevInvDate].Ordinal;
                                dtb2cla = Utility.ChangeColumnDataType(dtb2cla, dtb2cla.Columns[B2CLA_RevInvDate].ColumnName, typeof(string));
                                dtb2cla.Columns[B2CLA_RevInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtb2cla.Rows[i][B2CLA_RevInvDate]);
                                    dtb2cla.Rows[i][B2CLA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtb2cla.Rows[i][B2CLA_RevInvDate] = "";
                                }

                                if (Convert.ToString(dtb2cla.Rows[i][B2CLA_Rate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtb2cla.Rows[i][B2CLA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtb2cla.Rows[i][B2CLA_OrgPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2cla.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtb2cla.Rows[i][B2CLA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2cla.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }

                            #endregion

                            #region B2CSA
                            if (dtb2csa.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtb2csa.Columns.Count; i++)
                                {
                                    if (dtb2csa.Columns.Count > 9)
                                    {
                                        for (int j = 0; j < dtb2csa.Columns.Count; j++)
                                        {
                                            if (dtb2csa.Columns.Count > 9)
                                            {
                                                dtb2csa.Columns.RemoveAt(dtb2csa.Columns.Count - 1);
                                                dtb2csa.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtb2csa.Columns[i].ColumnName = dtb2csa.Rows[2][i].ToString();
                                }

                                dtb2csa.Rows[0].Delete();
                                dtb2csa.Rows[1].Delete();
                                dtb2csa.Rows[2].Delete();
                                dtb2csa.AcceptChanges();
                            }

                            for (int i = 0; i < dtb2csa.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_POS, typeof(string));
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_Type, typeof(string));
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_FinYear, typeof(string));
                                    dtb2csa = Utility.ChangeColumnDataType(dtb2csa, B2CSA_OrgMonth, typeof(string));
                                    dtb2csa.Columns.Add("Status");
                                    dtb2csa.Columns.Add("IGST Amount");
                                    dtb2csa.Columns.Add("CGST Amount");
                                    dtb2csa.Columns.Add("SGST Amount");
                                }

                                dtb2csa.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_POS]).Trim() != "")
                                    dtb2csa.Rows[i][B2CSA_POS] = Utility.strValidStateName(Convert.ToString(dtb2csa.Rows[i][B2CSA_POS]).Split('-')[0]);

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_Rate]).Trim() == "")
                                    colRate = 0;

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_FinYear]).Trim() == "2017-18")
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "2017 - 2018";
                                else if (Convert.ToString(dtb2csa.Rows[i][B2CSA_FinYear]).Trim() == "2018-19")
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "2018 - 2019";
                                else if (Convert.ToString(dtb2csa.Rows[i][B2CSA_FinYear]).Trim() == "2019-20")
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "2019 - 2020";
                                else
                                    dtb2csa.Rows[i][B2CSA_FinYear] = "";

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_OrgMonth]).Trim() != "")
                                {
                                    dtb2csa.Rows[i][B2CSA_OrgMonth] = dtb2csa.Rows[i][B2CSA_OrgMonth].ToString().ToLower();
                                    dtb2csa.Rows[i][B2CSA_OrgMonth] = char.ToUpper(dtb2csa.Rows[i][B2CSA_OrgMonth].ToString()[0]) + dtb2csa.Rows[i][B2CSA_OrgMonth].ToString().Substring(1); ;
                                }
                                else
                                    dtb2csa.Rows[i][B2CSA_OrgMonth] = "";

                                if (Convert.ToString(dtb2csa.Rows[i][B2CSA_Type]).Trim().ToLower() == "e")
                                    dtb2csa.Rows[i][B2CSA_Type] = "Ecom";
                                else if (Convert.ToString(dtb2csa.Rows[i][B2CSA_Type]).Trim().ToLower() == "oe")
                                    dtb2csa.Rows[i][B2CSA_Type] = "Other than Ecom";

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtb2csa.Rows[i][B2CSA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtb2csa.Rows[i][B2CSA_POS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);

                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_TaxVal].ToString()) / 100;
                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtb2csa.Rows[i]["CGST Amount"] = Amt.ToString();
                                        dtb2csa.Rows[i]["SGST Amount"] = Amt.ToString();
                                        //dtb2csa.Rows[i][B2CSA_Type] = "Intra";
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtb2csa.Rows[i][B2CSA_TaxVal].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtb2csa.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        //dtb2csa.Rows[i][B2CSA_Type] = "Inter";
                                    }
                                }
                            }

                            #endregion

                            #region EXEMPA
                            if (dtexpa.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtexpa.Columns.Count; i++)
                                {
                                    if (dtexpa.Columns.Count > 13)
                                    {
                                        for (int j = 0; j < dtexpa.Columns.Count; j++)
                                        {
                                            if (dtexpa.Columns.Count > 13)
                                            {
                                                dtexpa.Columns.RemoveAt(dtexpa.Columns.Count - 1);
                                                dtexpa.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtexpa.Columns[i].ColumnName = dtexpa.Rows[2][i].ToString();
                                }

                                dtexpa.Rows[0].Delete();
                                dtexpa.Rows[1].Delete();
                                dtexpa.Rows[2].Delete();
                                dtexpa.AcceptChanges();
                            }
                            for (int i = 0; i < dtexpa.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtexpa.Columns.Add("Status");
                                    dtexpa.Columns.Add("IGST Amount");
                                }
                                dtexpa.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtexpa.Rows[i][EXPA_ExpType]).Trim() != "")
                                    dtexpa.Rows[i][EXPA_ExpType] = GetExportType(Convert.ToString(dtexpa.Rows[i][EXPA_ExpType]).Trim(), "exp");

                                int sj = dtexpa.Columns[EXPA_OrgInvDate].Ordinal;
                                dtexpa = Utility.ChangeColumnDataType(dtexpa, dtexpa.Columns[EXPA_OrgInvDate].ColumnName, typeof(string));
                                dtexpa.Columns[EXPA_OrgInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtexpa.Rows[i][EXPA_OrgInvDate]);
                                    dtexpa.Rows[i][EXPA_OrgInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtexpa.Rows[i][EXPA_OrgInvDate] = "";
                                }

                                sj = dtexpa.Columns[EXPA_RevInvDate].Ordinal;
                                dtexpa = Utility.ChangeColumnDataType(dtexpa, dtexpa.Columns[EXPA_RevInvDate].ColumnName, typeof(string));
                                dtexpa.Columns[EXPA_RevInvDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtexpa.Rows[i][EXPA_RevInvDate]);
                                    dtexpa.Rows[i][EXPA_RevInvDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtexpa.Rows[i][EXPA_RevInvDate] = "";
                                }

                                sj = dtexpa.Columns[EXPA_ShipDate].Ordinal;
                                dtexpa = Utility.ChangeColumnDataType(dtexpa, dtexpa.Columns[EXPA_ShipDate].ColumnName, typeof(string));
                                dtexpa.Columns[EXPA_ShipDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtexpa.Rows[i][EXPA_ShipDate]);
                                    dtexpa.Rows[i][EXPA_ShipDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtexpa.Rows[i][EXPA_ShipDate] = "";
                                }

                                if (Convert.ToString(dtexpa.Rows[i][EXPA_Rate]).Trim() == "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtexpa.Rows[i][EXPA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtexpa.Rows[i][EXPA_Rate]);

                                if (colRate != null)
                                {
                                    decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtexpa.Rows[i][EXPA_TaxVal].ToString()) / 100;
                                    IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                    dtexpa.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                }
                                else
                                    dtexpa.Rows[i]["IGST Amount"] = "";
                            }

                            #endregion

                            #region CDNRA
                            if (dtcdnra.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtcdnra.Columns.Count; i++)
                                {
                                    if (dtcdnra.Columns.Count > 16)
                                    {
                                        for (int j = 0; j < dtcdnra.Columns.Count; j++)
                                        {
                                            if (dtcdnra.Columns.Count > 16)
                                            {
                                                dtcdnra.Columns.RemoveAt(dtcdnra.Columns.Count - 1);
                                                dtcdnra.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtcdnra.Columns[i].ColumnName = dtcdnra.Rows[2][i].ToString();
                                }

                                dtcdnra.Rows[0].Delete();
                                dtcdnra.Rows[1].Delete();
                                dtcdnra.Rows[2].Delete();
                                dtcdnra.AcceptChanges();
                            }
                            for (int i = 0; i < dtcdnra.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtcdnra.Columns.Add("Status");
                                    dtcdnra.Columns.Add("IGST Amount");
                                    dtcdnra.Columns.Add("CGST Amount");
                                    dtcdnra.Columns.Add("SGST Amount");
                                    //dtcdnra = Utility.ChangeColumnDataType(dtcdnra, cdnrPlaceOfSupply, typeof(string));
                                    dtcdnra = Utility.ChangeColumnDataType(dtcdnra, CDNRA_PreGST, typeof(string));
                                    dtcdnra = Utility.ChangeColumnDataType(dtcdnra, CDNRA_DocType, typeof(string));
                                    //dtcdnra = Utility.ChangeColumnDataType(dtcdnra, cdnrReasonForIssuingdocument, typeof(string));
                                }

                                dtcdnra.Rows[i]["Status"] = "Draft";

                                //if (Convert.ToString(dtcdnra.Rows[i][cdnrPlaceOfSupply]).Trim() != "")
                                //    dtcdnra.Rows[i][cdnrPlaceOfSupply] = CommonHelper.GetStateName(Convert.ToString(dtcdnra.Rows[i][cdnrPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_PreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtcdnra.Rows[i][CDNRA_PreGST]).Trim().ToLower() == "y")
                                    dtcdnra.Rows[i][CDNRA_PreGST] = "Yes";
                                else
                                    dtcdnra.Rows[i][CDNRA_PreGST] = "No";

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "inter state" || Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "inter")
                                    dtcdnra.Rows[i][CDNRA_SupType] = "Inter";
                                else if (Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "intra state" || Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim().ToLower() == "intra")
                                    dtcdnra.Rows[i][CDNRA_SupType] = "Intra";

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_DocType]).Trim() != "")
                                    dtcdnra.Rows[i][CDNRA_DocType] = GetExportType(Convert.ToString(dtcdnra.Rows[i][CDNRA_DocType]), "cdnr");

                                int sj = dtcdnra.Columns[CDNRA_OrgVouDate].Ordinal;
                                dtcdnra = Utility.ChangeColumnDataType(dtcdnra, dtcdnra.Columns[CDNRA_OrgVouDate].ColumnName, typeof(string));
                                dtcdnra.Columns[CDNRA_OrgVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnra.Rows[i][CDNRA_OrgVouDate]);
                                    dtcdnra.Rows[i][CDNRA_OrgVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnra.Rows[i][CDNRA_OrgVouDate] = "";
                                }



                                sj = dtcdnra.Columns[CDNRA_OrgRecDate].Ordinal;
                                dtcdnra = Utility.ChangeColumnDataType(dtcdnra, dtcdnra.Columns[CDNRA_OrgRecDate].ColumnName, typeof(string));
                                dtcdnra.Columns[CDNRA_OrgRecDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnra.Rows[i][CDNRA_OrgRecDate]);
                                    dtcdnra.Rows[i][CDNRA_OrgRecDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnra.Rows[i][CDNRA_OrgRecDate] = "";
                                }



                                sj = dtcdnra.Columns[CDNRA_RefVouDate].Ordinal;
                                dtcdnra = Utility.ChangeColumnDataType(dtcdnra, dtcdnra.Columns[CDNRA_RefVouDate].ColumnName, typeof(string));
                                dtcdnra.Columns[CDNRA_RefVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnra.Rows[i][CDNRA_RefVouDate]);
                                    dtcdnra.Rows[i][CDNRA_RefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnra.Rows[i][CDNRA_RefVouDate] = "";
                                }

                                if (Convert.ToString(dtcdnra.Rows[i][CDNRA_Rate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtcdnra.Rows[i][CDNRA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_Rate]);

                                if (colRate != null)
                                {
                                    if ("Intra" == Convert.ToString(dtcdnra.Rows[i][CDNRA_SupType]).Trim())
                                    {
                                        if (Convert.ToString(colRate) != "" && Convert.ToString(dtcdnra.Rows[i][CDNRA_TaxVal]) != "")
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_TaxVal].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtcdnra.Rows[i]["CGST Amount"] = Amt.ToString();
                                            dtcdnra.Rows[i]["SGST Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            dtcdnra.Rows[i]["CGST Amount"] = "";
                                            dtcdnra.Rows[i]["SGST Amount"] = "";
                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToString(colRate) != "" && Convert.ToString(dtcdnra.Rows[i][CDNRA_TaxVal]) != "")
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtcdnra.Rows[i][CDNRA_TaxVal].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtcdnra.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                        else
                                        {
                                            dtcdnra.Rows[i]["IGST Amount"] = "";
                                        }
                                    }
                                }
                            }

                            #endregion

                            #region CDNURA
                            if (dtcdnura.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtcdnura.Columns.Count; i++)
                                {
                                    if (dtcdnura.Columns.Count > 15)
                                    {
                                        for (int j = 0; j < dtcdnura.Columns.Count; j++)
                                        {
                                            if (dtcdnura.Columns.Count > 15)
                                            {
                                                dtcdnura.Columns.RemoveAt(dtcdnura.Columns.Count - 1);
                                                dtcdnura.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtcdnura.Columns[i].ColumnName = dtcdnura.Rows[2][i].ToString();
                                }

                                dtcdnura.Rows[0].Delete();
                                dtcdnura.Rows[1].Delete();
                                dtcdnura.Rows[2].Delete();
                                dtcdnura.AcceptChanges();
                            }
                            for (int i = 0; i < dtcdnura.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtcdnura.Columns.Add("Status");
                                    dtcdnura.Columns.Add("IGST Amount");
                                    dtcdnura.Columns.Add("CGST Amount");
                                    dtcdnura.Columns.Add("SGST Amount");
                                    //dtcdnura = Utility.ChangeColumnDataType(dtcdnura, cdnurPlaceOfSupply, typeof(string));
                                    dtcdnura = Utility.ChangeColumnDataType(dtcdnura, CDNURA_PreGST, typeof(string));
                                    dtcdnura = Utility.ChangeColumnDataType(dtcdnura, CDNURA_DocType, typeof(string));
                                    //dtcdnura = Utility.ChangeColumnDataType(dtcdnura, cdnurReasonForIssuingdocument, typeof(string));
                                    dtcdnura = Utility.ChangeColumnDataType(dtcdnura, CDNURA_URType, typeof(string));
                                }

                                dtcdnura.Rows[i]["Status"] = "Draft";

                                //if (Convert.ToString(dtcdnura.Rows[i][cdnurPlaceOfSupply]).Trim() != "")
                                //    dtcdnura.Rows[i][cdnurPlaceOfSupply] = CommonHelper.GetStateName(Convert.ToString(dtcdnura.Rows[i][cdnurPlaceOfSupply]).Split('-')[0]);

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_PreGST]).Trim().ToLower() == "yes" || Convert.ToString(dtcdnura.Rows[i][CDNURA_PreGST]).Trim().ToLower() == "y")
                                    dtcdnura.Rows[i][CDNURA_PreGST] = "Yes";
                                else
                                    dtcdnura.Rows[i][CDNURA_PreGST] = "No";

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "inter state" || Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "inter")
                                    dtcdnura.Rows[i][CDNURA_SupType] = "Inter";
                                else if (Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "intra state" || Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim().ToLower() == "intra")
                                    dtcdnura.Rows[i][CDNURA_SupType] = "Intra";

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_URType]).Trim().ToLower() == "b2cl")
                                    dtcdnura.Rows[i][CDNURA_URType] = "B2C Large";
                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_URType]).Trim().ToLower() == "expwp")
                                    dtcdnura.Rows[i][CDNURA_URType] = "Export with payment of GST";
                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_URType]).Trim().ToLower() == "expwop")
                                    dtcdnura.Rows[i][CDNURA_URType] = "Export without payment of GST";

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_DocType]).Trim() != "")
                                    dtcdnura.Rows[i][CDNURA_DocType] = GetExportType(Convert.ToString(dtcdnura.Rows[i][CDNURA_DocType]), "cdnr");

                                //if (!ValidateData(Convert.ToString(dtcdnura.Rows[i][cdnurReasonForIssuingdocument]).Trim(), "cdnReason"))
                                //    dtcdnura.Rows[i][cdnurReasonForIssuingdocument] = "";
                                //else
                                //    dtcdnura.Rows[i][cdnurReasonForIssuingdocument] = Convert.ToString(dtcdnura.Rows[i][cdnurReasonForIssuingdocument]).Trim();

                                int sj = dtcdnura.Columns[CDNURA_OrgRefVouDate].Ordinal;
                                dtcdnura = Utility.ChangeColumnDataType(dtcdnura, dtcdnura.Columns[CDNURA_OrgRefVouDate].ColumnName, typeof(string));
                                dtcdnura.Columns[CDNURA_OrgRefVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnura.Rows[i][CDNURA_OrgRefVouDate]);
                                    dtcdnura.Rows[i][CDNURA_OrgRefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnura.Rows[i][CDNURA_OrgRefVouDate] = "";
                                }

                                sj = dtcdnura.Columns[CDNURA_RecDate].Ordinal;
                                dtcdnura = Utility.ChangeColumnDataType(dtcdnura, dtcdnura.Columns[CDNURA_RecDate].ColumnName, typeof(string));
                                dtcdnura.Columns[CDNURA_RecDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnura.Rows[i][CDNURA_RecDate]);
                                    dtcdnura.Rows[i][CDNURA_RecDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnura.Rows[i][CDNURA_RecDate] = "";
                                }

                                sj = dtcdnura.Columns[CDNURA_RefVouDate].Ordinal;
                                dtcdnura = Utility.ChangeColumnDataType(dtcdnura, dtcdnura.Columns[CDNURA_RefVouDate].ColumnName, typeof(string));
                                dtcdnura.Columns[CDNURA_RefVouDate].SetOrdinal(sj);

                                try
                                {
                                    DateTime ss = Convert.ToDateTime(dtcdnura.Rows[i][CDNURA_RefVouDate]);
                                    dtcdnura.Rows[i][CDNURA_RefVouDate] = Convert.ToString(ss.ToString("dd-MM-yyyy").Replace('/', '-'));
                                }
                                catch (Exception)
                                {
                                    dtcdnura.Rows[i][CDNURA_RefVouDate] = "";
                                }

                                if (Convert.ToString(dtcdnura.Rows[i][CDNURA_Rate]).Trim() == "")
                                {
                                    colRate = 0;
                                }

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtcdnura.Rows[i][CDNURA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_Rate]);

                                if (colRate != null)
                                {
                                    if ("Intra" == Convert.ToString(dtcdnura.Rows[i][CDNURA_SupType]).Trim())
                                    {
                                        if (Convert.ToString(colRate) != "" && Convert.ToString(dtcdnura.Rows[i][CDNURA_TaxVal]) != "")
                                        {
                                            decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_TaxVal].ToString()) / 100;

                                            decimal Amt = Amount / 2;
                                            Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                            dtcdnura.Rows[i]["CGST Amount"] = Amt.ToString();
                                            dtcdnura.Rows[i]["SGST Amount"] = Amt.ToString();
                                        }
                                        else
                                        {
                                            dtcdnura.Rows[i]["CGST Amount"] = "";
                                            dtcdnura.Rows[i]["SGST Amount"] = "";
                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToString(colRate) != "" && Convert.ToString(dtcdnura.Rows[i][CDNURA_TaxVal]) != "")
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtcdnura.Rows[i][CDNURA_TaxVal].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtcdnura.Rows[i]["IGST Amount"] = IGSTAmt.ToString();
                                        }
                                        else
                                        {
                                            dtcdnura.Rows[i]["IGST Amount"] = "";
                                        }
                                    }

                                }

                            }

                            #endregion

                            #region ATA
                            if (dtata.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtata.Columns.Count; i++)
                                {
                                    if (dtata.Columns.Count > 7)
                                    {
                                        for (int j = 0; j < dtata.Columns.Count; j++)
                                        {
                                            if (dtata.Columns.Count > 7)
                                            {
                                                dtata.Columns.RemoveAt(dtata.Columns.Count - 1);
                                                dtata.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtata.Columns[i].ColumnName = dtata.Rows[2][i].ToString();
                                }

                                dtata.Rows[0].Delete();
                                dtata.Rows[1].Delete();
                                dtata.Rows[2].Delete();
                                dtata.AcceptChanges();
                            }
                            for (int i = 0; i < dtata.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtata = Utility.ChangeColumnDataType(dtata, ATA_OrgPOS, typeof(string));
                                    dtata = Utility.ChangeColumnDataType(dtata, ATA_FinYear, typeof(string));
                                    dtata = Utility.ChangeColumnDataType(dtata, ATA_OrgMonth, typeof(string));
                                    dtata.Columns.Add("Status");
                                    dtata.Columns.Add("IGSTT Amount");
                                    dtata.Columns.Add("CGSTT Amount");
                                    dtata.Columns.Add("SGSTT Amount");
                                }

                                dtata.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtata.Rows[i][ATA_OrgPOS]).Trim() != "")
                                    dtata.Rows[i][ATA_OrgPOS] = Utility.strValidStateName(Convert.ToString(dtata.Rows[i][ATA_OrgPOS]).Split('-')[0]);

                                if (Convert.ToString(dtata.Rows[i][ATA_FinYear]).Trim() == "2017-18")
                                    dtata.Rows[i][ATA_FinYear] = "2017 - 2018";
                                else if (Convert.ToString(dtata.Rows[i][ATA_FinYear]).Trim() == "2018-19")
                                    dtata.Rows[i][ATA_FinYear] = "2018 - 2019";
                                else if (Convert.ToString(dtata.Rows[i][ATA_FinYear]).Trim() == "2019-20")
                                    dtata.Rows[i][ATA_FinYear] = "2019 - 2020";
                                else
                                    dtata.Rows[i][ATA_FinYear] = "";

                                if (Convert.ToString(dtata.Rows[i][ATA_OrgMonth]).Trim() != "")
                                {
                                    dtata.Rows[i][ATA_OrgMonth] = dtata.Rows[i][ATA_OrgMonth].ToString().ToLower();
                                    dtata.Rows[i][ATA_OrgMonth] = char.ToUpper(dtata.Rows[i][ATA_OrgMonth].ToString()[0]) + dtata.Rows[i][ATA_OrgMonth].ToString().Substring(1); ;
                                }
                                else
                                    dtata.Rows[i][ATA_OrgMonth] = "";

                                if (Convert.ToString(dtata.Rows[i][ATA_Rate]).Trim() == "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtata.Rows[i][ATA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtata.Rows[i][ATA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtata.Rows[i][ATA_OrgPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtata.Rows[i][ATA_GrossAdvRec].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtata.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                        dtata.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        if (Convert.ToString(colRate) != "" && dtata.Rows[i][ATA_GrossAdvRec].ToString() != "")
                                        {
                                            decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtata.Rows[i][ATA_GrossAdvRec].ToString()) / 100;
                                            IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                            dtata.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region AtdA
                            if (dtatadja.Rows.Count > 2)
                            {
                                for (int i = 0; i < dtatadja.Columns.Count; i++)
                                {
                                    if (dtatadja.Columns.Count > 7)
                                    {
                                        for (int j = 0; j < dtatadja.Columns.Count; j++)
                                        {
                                            if (dtatadja.Columns.Count > 7)
                                            {
                                                dtatadja.Columns.RemoveAt(dtatadja.Columns.Count - 1);
                                                dtatadja.AcceptChanges();
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    dtatadja.Columns[i].ColumnName = dtatadja.Rows[2][i].ToString();
                                }

                                dtatadja.Rows[0].Delete();
                                dtatadja.Rows[1].Delete();
                                dtatadja.Rows[2].Delete();
                                dtatadja.AcceptChanges();
                            }
                            for (int i = 0; i < dtatadja.Rows.Count; i++)
                            {
                                if (i == 0)
                                {
                                    dtatadja = Utility.ChangeColumnDataType(dtatadja, ATADJA_OrgPOS, typeof(string));
                                    dtatadja = Utility.ChangeColumnDataType(dtatadja, ATADJA_FinYear, typeof(string));
                                    dtatadja = Utility.ChangeColumnDataType(dtatadja, ATADJA_OrgMonth, typeof(string));
                                    dtatadja.Columns.Add("Status");
                                    dtatadja.Columns.Add("IGSTT Amount");
                                    dtatadja.Columns.Add("CGSTT Amount");
                                    dtatadja.Columns.Add("SGSTT Amount");
                                }

                                dtatadja.Rows[i]["Status"] = "Draft";

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_OrgPOS]).Trim() != "")
                                    dtatadja.Rows[i][ATADJA_OrgPOS] = Utility.strValidStateName(Convert.ToString(dtatadja.Rows[i][ATADJA_OrgPOS]).Split('-')[0]);

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_FinYear]).Trim() == "2017-18")
                                    dtatadja.Rows[i][ATADJA_FinYear] = "2017 - 2018";
                                else if (Convert.ToString(dtatadja.Rows[i][ATADJA_FinYear]).Trim() == "2018-19")
                                    dtatadja.Rows[i][ATADJA_FinYear] = "2018 - 2019";
                                else if (Convert.ToString(dtatadja.Rows[i][ATADJA_FinYear]).Trim() == "2019-20")
                                    dtatadja.Rows[i][ATADJA_FinYear] = "2019 - 2020";
                                else
                                    dtatadja.Rows[i][ATADJA_FinYear] = "";

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_OrgMonth]).Trim() != "")
                                {
                                    dtatadja.Rows[i][ATADJA_OrgMonth] = dtatadja.Rows[i][ATADJA_OrgMonth].ToString().ToLower();
                                    dtatadja.Rows[i][ATADJA_OrgMonth] = char.ToUpper(dtatadja.Rows[i][ATADJA_OrgMonth].ToString()[0]) + dtatadja.Rows[i][ATADJA_OrgMonth].ToString().Substring(1); ;
                                }
                                else
                                    dtatadja.Rows[i][ATADJA_OrgMonth] = "";

                                if (Convert.ToString(dtatadja.Rows[i][ATADJA_Rate]).Trim() == "")
                                    colRate = 0;

                                if (Utility.IsDecimalOrNumber(Convert.ToString(dtatadja.Rows[i][ATADJA_Rate]).Trim()))
                                    colRate = Convert.ToDecimal(dtatadja.Rows[i][ATADJA_Rate]);

                                if (colRate != null)
                                {
                                    int StateId = 0;
                                    int CompanyGSTNState = Convert.ToInt16(CommonHelper.CompanyGSTN.Substring(0, 2));
                                    string Pos = CommonHelper.GetStateCode(Convert.ToString(dtatadja.Rows[i][ATADJA_OrgPOS]));
                                    if (Pos != "")
                                        StateId = Convert.ToInt16(Pos.Split('-')[0]);
                                    if (StateId == CompanyGSTNState)
                                    {
                                        decimal Amount = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtatadja.Rows[i][ATADJA_GrossAdvAdj].ToString()) / 100;

                                        decimal Amt = Amount / 2;
                                        Amt = Math.Round(Amt, 2, MidpointRounding.AwayFromZero);
                                        dtatadja.Rows[i]["CGSTT Amount"] = Amt.ToString();
                                        dtatadja.Rows[i]["SGSTT Amount"] = Amt.ToString();
                                    }
                                    else
                                    {
                                        decimal IGSTAmt = Convert.ToDecimal(colRate) * Convert.ToDecimal(dtatadja.Rows[i][ATADJA_GrossAdvAdj].ToString()) / 100;
                                        IGSTAmt = Math.Round(IGSTAmt, 2, MidpointRounding.AwayFromZero);
                                        dtatadja.Rows[i]["IGSTT Amount"] = IGSTAmt.ToString();
                                    }
                                }
                            }
                            #endregion

                            #endregion
                            #endregion

                            #region Data Entry
                            Application.DoEvents();
                            #region Regular Data Entry

                            #region B2b

                            if (dtB2B != null && dtB2B.Rows.Count > 0)
                            {
                                DataRow drB2b = dtB2B.NewRow();
                                drB2b[b2bInvNo] = dtB2B.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2bInvNo]).Trim() != "").GroupBy(x => x[b2bInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2b[b2binvValue] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2binvValue] != null).Sum(x => x[b2binvValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2binvValue])).ToString();
                                drB2b["Taxable Value"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["Taxable Value"] != null).Sum(x => x["Taxable Value"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Taxable Value"])).ToString();
                                drB2b["b2bIGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bIGSTTAmt"] != null).Sum(x => x["b2bIGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bIGSTTAmt"])).ToString();
                                drB2b["b2bCGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bCGSTTAmt"] != null).Sum(x => x["b2bCGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bCGSTTAmt"])).ToString();
                                drB2b["b2bSGSTTAmt"] = dtB2B.Rows.Cast<DataRow>().Where(x => x["b2bSGSTTAmt"] != null).Sum(x => x["b2bSGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2bSGSTTAmt"])).ToString();
                                drB2b[b2bCESSAmt] = dtB2B.Rows.Cast<DataRow>().Where(x => x[b2bCESSAmt] != null).Sum(x => x[b2bCESSAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2bCESSAmt])).ToString();
                                drB2b["Status"] = "Total";
                                dtB2B.Rows.Add(drB2b);

                                _result = objGSTR5.GSTR1b2bGovBulkEntry(dtB2B, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2B data entry error..!\n"; }
                            }


                            #endregion

                            #region HSN

                            if (dtHSN != null && dtHSN.Rows.Count > 0)
                            {
                                DataRow drHSN = dtHSN.NewRow();
                                drHSN[hsnTotalQuantity] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTotalQuantity] != null).Sum(x => x[hsnTotalQuantity].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTotalQuantity])).ToString();
                                drHSN[hsnTotalValue] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTotalValue] != null).Sum(x => x[hsnTotalValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTotalValue])).ToString();
                                drHSN[hsnTaxableValue] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnTaxableValue] != null).Sum(x => x[hsnTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnTaxableValue])).ToString();
                                drHSN[hsnIntegratedTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnIntegratedTaxAmount] != null).Sum(x => x[hsnIntegratedTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnIntegratedTaxAmount])).ToString();
                                drHSN[hsnCentralTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCentralTaxAmount] != null).Sum(x => x[hsnCentralTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCentralTaxAmount])).ToString();
                                drHSN[hsnStateUTTaxAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnStateUTTaxAmount] != null).Sum(x => x[hsnStateUTTaxAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnStateUTTaxAmount])).ToString();
                                drHSN[hsnCessAmount] = dtHSN.Rows.Cast<DataRow>().Where(x => x[hsnCessAmount] != null).Sum(x => x[hsnCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[hsnCessAmount])).ToString();
                                drHSN["Status"] = "Total";
                                dtHSN.Rows.Add(drHSN);

                                _result = 0;
                                _result = objGSTR5.GSTR1_HSNSummaryGovBulkEntry(dtHSN, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "hsn data entry error..!\n"; }
                            }
                            #endregion

                            #region DOC

                            if (dtDOC != null && dtDOC.Rows.Count > 0)
                            {
                                DataRow drDOC = dtDOC.NewRow();
                                drDOC["Total Number"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Total Number"] != null).Sum(x => x["Total Number"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Total Number"])).ToString();
                                drDOC["Cancelled"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Cancelled"] != null).Sum(x => x["Cancelled"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cancelled"])).ToString();
                                drDOC["Net Issued"] = dtDOC.Rows.Cast<DataRow>().Where(x => x["Net Issued"] != null).Sum(x => x["Net Issued"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Net Issued"])).ToString();
                                drDOC["Status"] = "Total";
                                dtDOC.Rows.Add(drDOC);

                                _result = 0;
                                _result = objGSTR5.GSTR13GovBulkEntry(dtDOC, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "docs data entry error..!\n"; }
                            }
                            #endregion

                            #region B2c
                            /*
                            if (dtB2C != null && dtB2C.Rows.Count > 0)
                            {
                                DataRow drb2C = dtB2C.NewRow();
                                drb2C[b2clInvNo] = dtB2C.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2clInvNo]).Trim() != "").GroupBy(x => x[b2clInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2C[b2clInvVal] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clInvVal] != null).Sum(x => x[b2clInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clInvVal])).ToString();
                                drb2C[b2clTax] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clTax] != null).Sum(x => x[b2clTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clTax])).ToString();
                                drb2C["IGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2C["CGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2C["SGST Amount"] = dtB2C.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2C[b2clCESS] = dtB2C.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                drb2C["Status"] = "Total";
                                dtB2C.Rows.Add(drb2C);

                                _result = 0;
                                _result = objGSTR5.GSTR1b2cTallyBulkEntry(dtB2C, Convert.ToString(CommonHelper.StatusText));
                                if (_result != 1)
                                { _str += "B2C data entry error..!\n"; }
                            }
                            */
                            #endregion

                            #region b2cl

                            if (dtB2CL != null && dtB2CL.Rows.Count > 0)
                            {
                                DataRow drb2CL = dtB2CL.NewRow();
                                drb2CL[b2clInvNo] = dtB2CL.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[b2clInvNo]).Trim() != "").GroupBy(x => x[b2clInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CL[b2clInvVal] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clInvVal] != null).Sum(x => x[b2clInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clInvVal])).ToString();
                                drb2CL[b2clTax] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clTax] != null).Sum(x => x[b2clTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clTax])).ToString();
                                drb2CL["IGST Amount"] = dtB2CL.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CL[b2clCESS] = dtB2CL.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                drb2CL["Status"] = "Total";
                                dtB2CL.Rows.Add(drb2CL);

                                _result = 0;
                                _result = objGSTR5.GSTR1b2clargeGovBulkEntry(dtB2CL, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CL data entry error..!\n"; }
                            }
                            #endregion

                            #region b2cs

                            if (dtB2CS != null && dtB2CS.Rows.Count > 0)
                            {
                                DataRow drb2CS = dtB2CS.NewRow();

                                #region Rate Count
                                var result2 = (from row in dtB2CS.AsEnumerable()
                                               where row.Field<string>(b2csPOS) != "" && row.Field<string>(b2csRate) != ""
                                               group row by new { Fld_POS = row.Field<string>(b2csPOS), Fld_Rate = row.Field<string>(b2csRate) } into grp
                                               select new
                                               {
                                                   Fld_POS = grp.Key.Fld_POS,
                                                   Fld_Rate = grp.Key.Fld_Rate
                                               }).ToList();

                                if (result2.Count != null && result2.Count > 0)
                                    drb2CS[b2csRate] = result2.Count;
                                else
                                    drb2CS[b2csRate] = 0;
                                #endregion

                                drb2CS[b2csTax] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csTax] != null).Sum(x => x[b2csTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csTax])).ToString();
                                drb2CS["IGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CS["CGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2CS["SGST Amount"] = dtB2CS.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2CS[b2csCESS] = dtB2CS.Rows.Cast<DataRow>().Where(x => x[b2csCESS] != null).Sum(x => x[b2csCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2csCESS])).ToString();
                                drb2CS["Status"] = "Total";
                                dtB2CS.Rows.Add(drb2CS);

                                _result = 0;
                                _result = objGSTR5.GSTR1b2csamllGovBulkEntry(dtB2CS, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CS data entry error..!\n"; }
                            }
                            #endregion

                            #region Export

                            if (dtEXP != null && dtEXP.Rows.Count > 0)
                            {
                                DataRow drExp = dtEXP.NewRow();
                                drExp[expInvNo] = dtEXP.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[expInvNo]).Trim() != "").GroupBy(x => x[expInvNo]).Select(x => x.First()).Distinct().Count();
                                drExp[expInvVal] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvVal] != null).Sum(x => x[expInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvVal])).ToString();
                                drExp[expInvTax] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvTax] != null).Sum(x => x[expInvTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvTax])).ToString();
                                drExp[expInvTax] = dtEXP.Rows.Cast<DataRow>().Where(x => x[expInvTax] != null).Sum(x => x[expInvTax].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[expInvTax])).ToString();
                                drExp["IGST Amount"] = dtEXP.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drExp["Cess Amount"] = dtEXP.Rows.Cast<DataRow>().Where(x => x["Cess Amount"] != null).Sum(x => x["Cess Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cess Amount"])).ToString();
                                drExp["Status"] = "Total";
                                dtEXP.Rows.Add(drExp);

                                _result = 0;
                                _result = objGSTR5.GSTR1expGovBulkEntry(dtEXP, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "EXP data entry error..!\n"; }
                            }
                            #endregion

                            #region cdn

                            if (dtCDNR != null && dtCDNR.Rows.Count > 0)
                            {
                                DataRow drCDNR = dtCDNR.NewRow();
                                drCDNR[cdnrInvoiceAdvanceReceiptNumber] = dtCDNR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnrInvoiceAdvanceReceiptNumber]).Trim() != "").GroupBy(x => x[cdnrInvoiceAdvanceReceiptNumber]).Select(x => x.First()).Distinct().Count();
                                drCDNR[cdnrNoteRefundVoucherNumber] = dtCDNR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnrNoteRefundVoucherNumber]).Trim() != "").GroupBy(x => x[cdnrNoteRefundVoucherNumber]).Select(x => x.First()).Distinct().Count();
                                drCDNR[cdnrNoteRefundVoucherValue] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrNoteRefundVoucherValue] != null).Sum(x => x[cdnrNoteRefundVoucherValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrNoteRefundVoucherValue])).ToString();
                                drCDNR[cdnrTaxableValue] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrTaxableValue] != null).Sum(x => x[cdnrTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrTaxableValue])).ToString();
                                drCDNR[cdnrCessAmount] = dtCDNR.Rows.Cast<DataRow>().Where(x => x[cdnrCessAmount] != null).Sum(x => x[cdnrCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnrCessAmount])).ToString();
                                drCDNR["CGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNR["SGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNR["IGST Amount"] = dtCDNR.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNR["Status"] = "Total";
                                dtCDNR.Rows.Add(drCDNR);

                                _result = 0;
                                _result = objGSTR5.GSTR1cdnrGovBulkEntry(dtCDNR, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "CDNR data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnur

                            if (dtCDNUR != null && dtCDNUR.Rows.Count > 0)
                            {
                                DataRow drCDNUR = dtCDNUR.NewRow();
                                drCDNUR[cdnurInvoiceAdvanceReceiptNumber] = dtCDNUR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnurInvoiceAdvanceReceiptNumber]).Trim() != "").GroupBy(x => x[cdnurInvoiceAdvanceReceiptNumber]).Select(x => x.First()).Distinct().Count();
                                drCDNUR[cdnurNoteRefundVoucherNumber] = dtCDNUR.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[cdnurNoteRefundVoucherNumber]).Trim() != "").GroupBy(x => x[cdnurNoteRefundVoucherNumber]).Select(x => x.First()).Distinct().Count();
                                drCDNUR[cdnurNoteRefundVoucherValue] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurNoteRefundVoucherValue] != null).Sum(x => x[cdnurNoteRefundVoucherValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurNoteRefundVoucherValue])).ToString();
                                drCDNUR[cdnurTaxableValue] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurTaxableValue] != null).Sum(x => x[cdnurTaxableValue].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurTaxableValue])).ToString();
                                drCDNUR[cdnurCessAmount] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x[cdnurCessAmount] != null).Sum(x => x[cdnurCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[cdnurCessAmount])).ToString();
                                drCDNUR["CGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNUR["SGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNUR["IGST Amount"] = dtCDNUR.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNUR["Status"] = "Total";
                                dtCDNUR.Rows.Add(drCDNUR);

                                _result = 0;
                                _result = objGSTR5.GSTR1cdnurGovBulkEntry(dtCDNUR, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "cdnur data entry error..!\n"; }
                            }
                            #endregion

                            #region AT

                            if (dtAT != null && dtAT.Rows.Count > 0)
                            {
                                DataRow drAT = dtAT.NewRow();

                                #region POS Count
                                var result2 = (from row in dtAT.AsEnumerable()
                                               where row.Field<string>(atPlaceOfSupply) != ""
                                               group row by new { Fld_POS = row.Field<string>(atPlaceOfSupply) } into grp
                                               select new
                                               {
                                                   Fld_POS = grp.Key.Fld_POS,
                                               }).ToList();

                                if (result2.Count != null && result2.Count > 0)
                                    drAT[atPlaceOfSupply] = result2.Count;
                                else
                                    drAT[atPlaceOfSupply] = 0;
                                #endregion

                                drAT["IGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drAT["CGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drAT["SGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drAT[atCessAmount] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                drAT["Status"] = "Total";
                                dtAT.Rows.Add(drAT);

                                _result = 0;
                                _result = objGSTR5.GSTR1atGovBulkEntry(dtAT, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "AT data entry error..!\n"; }
                            }
                            #endregion

                            #region ATD

                            if (dtATD != null && dtATD.Rows.Count > 0)
                            {
                                DataRow drATD = dtATD.NewRow();

                                #region POS Count
                                var result2 = (from row in dtATD.AsEnumerable()
                                               where row.Field<string>(atdPlaceOfSupply) != ""
                                               group row by new { Fld_POS = row.Field<string>(atdPlaceOfSupply) } into grp
                                               select new
                                               {
                                                   Fld_POS = grp.Key.Fld_POS,
                                               }).ToList();

                                if (result2.Count != null && result2.Count > 0)
                                    drATD[atdPlaceOfSupply] = result2.Count;
                                else
                                    drATD[atdPlaceOfSupply] = 0;
                                #endregion

                                drATD["IGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drATD["CGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drATD["SGSTT Amount"] = dtAT.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drATD[atCessAmount] = dtAT.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                drATD["Status"] = "Total";
                                dtATD.Rows.Add(drATD);

                                _result = 0;
                                _result = objGSTR5.GSTR1atdGovBulkEntry(dtATD, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "atadj data entry error..!\n"; }
                            }
                            #endregion

                            #region TXPD
                            /*
                            if (dtTXPD != null && dtTXPD.Rows.Count > 0)
                            {
                                DataRow drTXPD = dtTXPD.NewRow();
                                drTXPD[txpdInvNo] = dtTXPD.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[txpdInvNo]).Trim() != "").GroupBy(x => x[txpdInvNo]).Select(x => x.First()).Distinct().Count();
                                drTXPD[txpdInvVal] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdInvVal] != null).Sum(x => x[txpdInvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdInvVal])).ToString();
                                drTXPD[txpdIGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdIGSTAmt] != null).Sum(x => x[txpdIGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdIGSTAmt])).ToString();
                                drTXPD[txpdCGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCGSTAmt] != null).Sum(x => x[txpdCGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCGSTAmt])).ToString();
                                drTXPD[txpdSGSTAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdSGSTAmt] != null).Sum(x => x[txpdSGSTAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdSGSTAmt])).ToString();
                                drTXPD[txpdCESSAmt] = dtTXPD.Rows.Cast<DataRow>().Where(x => x[txpdCESSAmt] != null).Sum(x => x[txpdCESSAmt].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[txpdCESSAmt])).ToString();
                                drTXPD["Status"] = "Total";
                                dtTXPD.Rows.Add(drTXPD);
                             * 
                             * _result = 0;
                            _result = objGSTR5.GSTR1txpdTallyBulkEntry(dtTXPD, Convert.ToString(CommonHelper.StatusText));
                            if (_result != 1)
                            { _str += "TXPD data entry error..!\n"; }
                            }                            
                             */
                            #endregion

                            #region Nil

                            if (dtNilRt != null && dtNilRt.Rows.Count > 0)
                            {
                                _result = 0;
                                _result = objGSTR5.GSTR1NilGovBulkEntry(dtNilRt, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "exemp data entry error..!\n"; }
                            }
                            #endregion

                            #endregion
                            Application.DoEvents();
                            #region Amedment Data Entry

                            #region B2BA

                            if (dtb2ba != null && dtb2ba.Rows.Count > 0)
                            {
                                DataRow drB2bA = dtb2ba.NewRow();
                                drB2bA[B2BA_OrgInvNo] = dtb2ba.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2BA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_RevInvNo] = dtb2ba.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2BA_RevInvNo]).Trim() != "").GroupBy(x => x[B2BA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drB2bA[B2BA_InvVal] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_InvVal] != null).Sum(x => x[B2BA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_InvVal])).ToString();
                                drB2bA[B2BA_TaxVal] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_TaxVal] != null).Sum(x => x[B2BA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_TaxVal])).ToString();
                                drB2bA["b2baIGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baIGSTTAmt"] != null).Sum(x => x["b2baIGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baIGSTTAmt"])).ToString();
                                drB2bA["b2baCGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baCGSTTAmt"] != null).Sum(x => x["b2baCGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baCGSTTAmt"])).ToString();
                                drB2bA["b2baSGSTTAmt"] = dtb2ba.Rows.Cast<DataRow>().Where(x => x["b2baSGSTTAmt"] != null).Sum(x => x["b2baSGSTTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["b2baSGSTTAmt"])).ToString();
                                drB2bA[B2BA_Cess] = dtb2ba.Rows.Cast<DataRow>().Where(x => x[B2BA_Cess] != null).Sum(x => x[B2BA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2BA_Cess])).ToString();
                                drB2bA["Status"] = "Total";
                                dtb2ba.Rows.Add(drB2bA);

                                _result = objGSTR5.GSTR1_B2BA_GovBulkEntry(dtb2ba, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2BA data entry error..!\n"; }
                            }


                            #endregion

                            #region b2clA

                            if (dtb2cla != null && dtb2cla.Rows.Count > 0)
                            {
                                DataRow drb2CLA = dtb2cla.NewRow();
                                drb2CLA[B2CLA_OrgInvNo] = dtb2cla.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_OrgInvNo]).Trim() != "").GroupBy(x => x[B2CLA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_RevInvNo] = dtb2cla.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[B2CLA_RevInvNo]).Trim() != "").GroupBy(x => x[B2CLA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drb2CLA[B2CLA_InvVal] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[B2CLA_InvVal] != null).Sum(x => x[B2CLA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_InvVal])).ToString();
                                drb2CLA[B2CLA_TaxVal] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[B2CLA_TaxVal] != null).Sum(x => x[B2CLA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CLA_TaxVal])).ToString();
                                drb2CLA["IGST Amount"] = dtb2cla.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CLA[b2clCESS] = dtb2cla.Rows.Cast<DataRow>().Where(x => x[b2clCESS] != null).Sum(x => x[b2clCESS].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[b2clCESS])).ToString();
                                drb2CLA["Status"] = "Total";
                                dtb2cla.Rows.Add(drb2CLA);

                                _result = 0;

                                _result = objGSTR5.GSTR1_B2CLA_GovBulkEntry(dtb2cla, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CLA data entry error..!\n"; }
                            }
                            #endregion

                            #region b2csA

                            if (dtb2csa != null && dtb2csa.Rows.Count > 0)
                            {
                                DataRow drb2CSA = dtb2csa.NewRow();
                                drb2CSA[B2CSA_TaxVal] = dtb2csa.Rows.Cast<DataRow>().Where(x => x[B2CSA_TaxVal] != null).Sum(x => x[B2CSA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_TaxVal])).ToString();
                                drb2CSA["IGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drb2CSA["CGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drb2CSA["SGST Amount"] = dtb2csa.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drb2CSA[B2CSA_Cess] = dtb2csa.Rows.Cast<DataRow>().Where(x => x[B2CSA_Cess] != null).Sum(x => x[B2CSA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[B2CSA_Cess])).ToString();
                                drb2CSA["Status"] = "Total";
                                dtb2csa.Rows.Add(drb2CSA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_B2CSA_GovBulkEntry(dtb2csa, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "B2CSA data entry error..!\n"; }
                            }
                            #endregion

                            #region ExportA

                            if (dtexpa != null && dtexpa.Rows.Count > 0)
                            {
                                DataRow drExpA = dtexpa.NewRow();
                                drExpA[EXPA_OrgInvNo] = dtexpa.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_OrgInvNo]).Trim() != "").GroupBy(x => x[EXPA_OrgInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_RevInvNo] = dtexpa.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[EXPA_RevInvNo]).Trim() != "").GroupBy(x => x[EXPA_RevInvNo]).Select(x => x.First()).Distinct().Count();
                                drExpA[EXPA_InvVal] = dtexpa.Rows.Cast<DataRow>().Where(x => x[EXPA_InvVal] != null).Sum(x => x[EXPA_InvVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_InvVal])).ToString();
                                drExpA[EXPA_TaxVal] = dtexpa.Rows.Cast<DataRow>().Where(x => x[EXPA_TaxVal] != null).Sum(x => x[EXPA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[EXPA_TaxVal])).ToString();
                                drExpA["IGST Amount"] = dtexpa.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drExpA["Cess Amount"] = dtexpa.Rows.Cast<DataRow>().Where(x => x["Cess Amount"] != null).Sum(x => x["Cess Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Cess Amount"])).ToString();
                                drExpA["Status"] = "Total";
                                dtexpa.Rows.Add(drExpA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_EXPA_GovBulkEntry(dtexpa, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "EXPA data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnA

                            if (dtcdnra != null && dtcdnra.Rows.Count > 0)
                            {
                                DataRow drCDNRA = dtcdnra.NewRow();
                                drCDNRA[CDNRA_OrgRecNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_OrgVouNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_OrgVouNo]).Trim() != "").GroupBy(x => x[CDNRA_OrgVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouNo] = dtcdnra.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNRA_RefVouNo]).Trim() != "").GroupBy(x => x[CDNRA_RefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNRA[CDNRA_RefVouVal] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_RefVouVal] != null).Sum(x => x[CDNRA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_RefVouVal])).ToString();
                                drCDNRA[CDNRA_TaxVal] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_TaxVal] != null).Sum(x => x[CDNRA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_TaxVal])).ToString();
                                drCDNRA[CDNRA_Cess] = dtcdnra.Rows.Cast<DataRow>().Where(x => x[CDNRA_Cess] != null).Sum(x => x[CDNRA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNRA_Cess])).ToString();
                                drCDNRA["CGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNRA["SGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNRA["IGST Amount"] = dtcdnra.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNRA["Status"] = "Total";
                                dtcdnra.Rows.Add(drCDNRA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNRA_GovBulkEntry(dtcdnra, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "CDNR data entry error..!\n"; }
                            }
                            #endregion

                            #region cdnurA

                            if (dtcdnura != null && dtcdnura.Rows.Count > 0)
                            {
                                DataRow drCDNURA = dtcdnura.NewRow();
                                drCDNURA[CDNURA_OrgRecNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRecNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRecNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_OrgRefVouNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_OrgRefVouNo]).Trim() != "").GroupBy(x => x[CDNURA_OrgRefVouNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefNo] = dtcdnura.Rows.Cast<DataRow>().Where(x => Convert.ToString(x[CDNURA_RefNo]).Trim() != "").GroupBy(x => x[CDNURA_RefNo]).Select(x => x.First()).Distinct().Count();
                                drCDNURA[CDNURA_RefVouVal] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_RefVouVal] != null).Sum(x => x[CDNURA_RefVouVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_RefVouVal])).ToString();
                                drCDNURA[CDNURA_TaxVal] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_TaxVal] != null).Sum(x => x[CDNURA_TaxVal].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_TaxVal])).ToString();
                                drCDNURA[CDNURA_Cess] = dtcdnura.Rows.Cast<DataRow>().Where(x => x[CDNURA_Cess] != null).Sum(x => x[CDNURA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[CDNURA_Cess])).ToString();
                                drCDNURA["CGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["CGST Amount"] != null).Sum(x => x["CGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGST Amount"])).ToString();
                                drCDNURA["SGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["SGST Amount"] != null).Sum(x => x["SGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGST Amount"])).ToString();
                                drCDNURA["IGST Amount"] = dtcdnura.Rows.Cast<DataRow>().Where(x => x["IGST Amount"] != null).Sum(x => x["IGST Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGST Amount"])).ToString();
                                drCDNURA["Status"] = "Total";
                                dtcdnura.Rows.Add(drCDNURA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_CDNURA_GovBulkEntry(dtcdnura, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "cdnura data entry error..!\n"; }
                            }
                            #endregion

                            #region ATA

                            if (dtata != null && dtata.Rows.Count > 0)
                            {
                                DataRow drATA = dtata.NewRow();
                                drATA["IGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drATA["CGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drATA["SGSTT Amount"] = dtata.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drATA[atCessAmount] = dtata.Rows.Cast<DataRow>().Where(x => x[atCessAmount] != null).Sum(x => x[atCessAmount].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[atCessAmount])).ToString();
                                drATA["Status"] = "Total";
                                dtata.Rows.Add(drATA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATA_GovBulkEntry(dtata, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "ATA data entry error..!\n"; }
                            }
                            #endregion

                            #region ATDA

                            if (dtatadja != null && dtatadja.Rows.Count > 0)
                            {
                                DataRow drATDA = dtatadja.NewRow();
                                drATDA["IGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["IGSTT Amount"] != null).Sum(x => x["IGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["IGSTT Amount"])).ToString();
                                drATDA["CGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["CGSTT Amount"] != null).Sum(x => x["CGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["CGSTT Amount"])).ToString();
                                drATDA["SGSTT Amount"] = dtatadja.Rows.Cast<DataRow>().Where(x => x["SGSTT Amount"] != null).Sum(x => x["SGSTT Amount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["SGSTT Amount"])).ToString();
                                drATDA[ATADJA_Cess] = dtatadja.Rows.Cast<DataRow>().Where(x => x[ATADJA_Cess] != null).Sum(x => x[ATADJA_Cess].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x[ATADJA_Cess])).ToString();
                                drATDA["Status"] = "Total";
                                dtatadja.Rows.Add(drATDA);

                                _result = 0;
                                _result = objGSTR5.GSTR1_ATADJA_GovBulkEntry(dtatadja, Convert.ToString("Draft"));
                                if (_result != 1)
                                { _str += "atadja data entry error..!\n"; }
                            }
                            #endregion

                            #endregion

                            pbGSTR1.Visible = false;

                            if (_str != "")
                            {
                                CommonHelper.ErrorList = Convert.ToString(_str);
                                SPQErrorList obj = new SPQErrorList();
                                obj.ShowDialog();
                            }
                            else
                            {
                                MessageBox.Show("GSTN Utility data imported successfully...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                Getdata();
                                GetGSTR1VsGSTR3B();
                            }
                            #endregion
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
            finally
            {
                pbGSTR1.Visible = false;
            }
        }

        private void msClearAll_Click(object sender, EventArgs e)
        {
            try
            {
                 DialogResult result = MessageBox.Show("Are You Sure to Delete all the Records...?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                
                if (result == DialogResult.Yes)
                {
                    #region first delete old data from database
                    int _Result = 0;
                    string Query = "", _str = "";

                    Query = "Delete from SPQR1B2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - B2b..!\n"; }

                    Query = "Delete from SPQR1B2C where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - B2c..!\n"; }

                    Query = "Delete from SPQR1B2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - B2cl..!\n"; }

                    Query = "Delete from SPQR1B2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - B2bs..!\n"; }

                    Query = "Delete from SPQR1ZeroRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - Exp..!\n"; }

                    Query = "Delete from SPQR1CDN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - Cdn..!\n"; }

                    Query = "Delete from SPQR1CDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - CdnUr..!\n"; }

                    Query = "Delete from SPQR1GrossAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - AT..!\n"; }

                    Query = "Delete from SPQR1NetAdvance where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - TXPD..!\n"; }

                    Query = "Delete from SPQR1NilRatedMulti where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - Nil Multi..!\n"; }

                    Query = "Delete from SPQR1NilRated where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - Nil..!\n"; }

                    Query = "Delete from SPQR1HSN where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - Hsn..!\n"; }

                    Query = "Delete from SPQR1Document where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - Doc..!\n"; }

                    Query = "Delete from SPQR1AmendB2B where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - B2BA..!\n"; }

                    Query = "Delete from SPQR1AmendB2CL where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - B2CLA..!\n"; }

                    Query = "Delete from SPQR1AmendB2CS where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - B2CSA..!\n"; }

                    Query = "Delete from SPQR1AmendEXPORT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - EXPA..!\n"; }

                    Query = "Delete from SPQR1AmendCDNR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - CDNRA..!\n"; }

                    Query = "Delete from SPQR1AmendCDNUR where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - CDNURA..!\n"; }

                    Query = "Delete from SPQR1AmendAT where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - ATA..!\n"; }

                    Query = "Delete from SPQR1AmendTXP where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "'";
                    _Result = objGSTR5.IUDData(Query);
                    if (_Result != 1)
                    { _str += "Data delete error - TXPA..!\n"; }


                    if (dgvtotal.Rows.Count > 0)
                    {
                        dgvtotal.Rows[0].Cells["Document Count"].Value = 0;
                        dgvtotal.Rows[0].Cells["Taxable Value"].Value = 0;
                        dgvtotal.Rows[0].Cells["IGST"].Value = 0;
                        dgvtotal.Rows[0].Cells["CGST"].Value = 0;
                        dgvtotal.Rows[0].Cells["SGST"].Value = 0;
                        dgvtotal.Rows[0].Cells["Cess"].Value = 0;
                        dgvtotal.Refresh();
                    }

                    #endregion

                    if (_str != "")
                    {
                        CommonHelper.ErrorList = Convert.ToString(_str);
                        SPQErrorList obj = new SPQErrorList();
                        obj.ShowDialog();
                    }
                    else
                    {
                        MessageBox.Show("Data cleared successfully...", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        Getdata();
                        GetGSTR1VsGSTR3B();
                    }

                    dgvtotal.DataSource = null;
                    Getdata();
                    GetGSTR1VsGSTR3B();
                    //MatchData("Done");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error:{0}{1}Source:{2}{3}Error Time:{4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("Update_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        private void msClose_Click(object sender, EventArgs e)
        {
            //SPQCompanyDashboard obj = new SPQCompanyDashboard();
            //obj.MdiParent = this.MdiParent;
            Utility.CloseAllOpenForm();
            ////this.Close();
            //obj.Dock = DockStyle.Fill;
            //obj.Show();
            ((SPQCompanyDashboard)Application.OpenForms["SPQCompanyDashboard"]).WindowState = FormWindowState.Normal;
            ((SPQCompanyDashboard)Application.OpenForms["SPQCompanyDashboard"]).BringToFront();
            ((SPQCompanyDashboard)Application.OpenForms["SPQCompanyDashboard"]).Dock = DockStyle.Fill;
        }

        #region Functional Methods

        public bool SetGSPSetting()
        {
            bool flg = false;
            try
            {
                AppCompany objcompany = new AppCompany();

                //SPQUploadPopUp frm = new SPQUploadPopUp();
                //frm.Visible = false;
                //var result = frm.ShowDialog();
                //if (result == DialogResult.OK)
                {
                    DataTable dt = new DataTable();
                    dt = objcompany.GetAPIDetail("select * from SPQGSPApi order by id desc limit 1");

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        Constants.AspClintSecret = Convert.ToString(dt.Rows[0]["AspClintSecret"]);
                        Constants.AspClintID = Convert.ToString(dt.Rows[0]["AspClintID"]);
                        Constants.GspClintSecret = Convert.ToString(dt.Rows[0]["GspClintSecret"]);
                        Constants.GspClintID = Convert.ToString(dt.Rows[0]["GspClintID"]);

                        flg = true;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }

        //public bool SaveB2CData(DataTable dt)
        //{
        //    bool flg = false;
        //    try
        //    {
        //        DataTable dtB2CGT = dt.Clone();
        //        DataTable dtB2CLT = dt.Clone();

        //        foreach (DataRow dr in dt.Rows)
        //        {
        //            if (Convert.ToString(dr[b2cPOS]).Trim() != "")
        //            {
        //                string stCode = CommonHelper.GetStateCode(Convert.ToString(dr[b2cPOS]).Trim());
        //                if (stCode != "")
        //                {
        //                    try
        //                    {
        //                        if (stCode != Convert.ToString(CommonHelper.CompanyStateCode) && Convert.ToDecimal(Convert.ToString(dr[b2cInvVal]).Trim()) > 250000)
        //                        {
        //                            DataRow newRow = dtB2CGT.NewRow();
        //                            newRow.ItemArray = dr.ItemArray;
        //                            dtB2CGT.Rows.Add(newRow);
        //                        }
        //                        else
        //                        {
        //                            DataRow newRow = dtB2CLT.NewRow();
        //                            newRow.ItemArray = dr.ItemArray;
        //                            dtB2CLT.Rows.Add(newRow);
        //                        }
        //                    }
        //                    catch (Exception ex)
        //                    { }
        //                }
        //            }
        //        }

        //        #region B2C Large
        //        if (dtB2CGT != null && dtB2CGT.Rows.Count > 0)
        //        {
        //            dtGT = dtB2CGT.Clone();

        //            List<string> listPOS = dtB2CGT.Rows
        //                   .OfType<DataRow>()
        //                   .Select(x => Convert.ToString(x[b2cPOS]).Trim())
        //                   .Distinct().ToList();

        //            if (listPOS != null && listPOS.Count > 0)
        //            {
        //                for (int sj = 0; sj < listPOS.Count; sj++)
        //                {
        //                    if (Convert.ToString(listPOS[sj]).Trim() != "")
        //                    {
        //                        List<string> listInvNo = dtB2CGT.Rows
        //                               .OfType<DataRow>()
        //                               .Where(x => Convert.ToString(listPOS[sj]) == Convert.ToString(x[b2cPOS]).Trim())
        //                               .Select(x => Convert.ToString(x[b2cInvNo]).Trim())
        //                               .Distinct().ToList();

        //                        if (listInvNo != null && listInvNo.Count > 0)
        //                        {
        //                            for (int i = 0; i < listInvNo.Count; i++)
        //                            {
        //                                if (Convert.ToString(listInvNo[i]).Trim() != "")
        //                                {
        //                                    List<string> listRate = dtB2CGT.Rows.OfType<DataRow>()
        //                                       .Where(x => Convert.ToString(listPOS[sj]) == Convert.ToString(x[b2cPOS]).Trim() && listInvNo[i] == x[b2cInvNo])
        //                                       .Select(x => Convert.ToString(x[b2cRate]).Trim())
        //                                       .Distinct().ToList();

        //                                    if (listRate != null && listRate.Count > 0)
        //                                    {
        //                                        for (int k = 0; k < listRate.Count; k++)
        //                                        {
        //                                            if (Convert.ToString(listRate[k]).Trim() != "")
        //                                            {
        //                                                List<DataRow> listDrRate = dtB2CGT.Rows.OfType<DataRow>()
        //                                                .Where(x => Convert.ToString(listPOS[sj]) == Convert.ToString(x[b2cPOS]).Trim() && listInvNo[i] == Convert.ToString(x[b2cInvNo]).Trim() && Convert.ToDecimal(listRate[k]) == Convert.ToDecimal(x[b2cRate]))
        //                                                .Select(x => x)
        //                                                .ToList();

        //                                                if (listDrRate != null && listDrRate.Count > 0)
        //                                                {
        //                                                    if (listDrRate.Count > 1)
        //                                                    {
        //                                                        #region Summation
        //                                                        DataRow newRow = dtGT.NewRow();
        //                                                        newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                        newRow[b2cInvNo] = Convert.ToString(listDrRate[0][b2cInvNo]);
        //                                                        newRow[b2cInvDate] = Convert.ToString(listDrRate[0][b2cInvDate]);
        //                                                        newRow[b2cInvVal] = Convert.ToString(listDrRate[0][b2cInvVal]);
        //                                                        newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);

        //                                                        try
        //                                                        {
        //                                                            newRow[b2cTax] = listDrRate.Cast<DataRow>().Where(x => x[b2cTax] != null).Sum(x => Convert.ToString(x[b2cTax]).Trim() == "" ? 0 : Convert.ToDecimal(x[b2cTax])).ToString();
        //                                                            newRow[b2cIGST] = listDrRate.Cast<DataRow>().Where(x => x[b2cIGST] != null).Sum(x => Convert.ToString(x[b2cIGST]).Trim() == "" ? 0 : Convert.ToDecimal(x[b2cIGST])).ToString();

        //                                                            double? cess = null;
        //                                                            for (int sr = 0; sr < listDrRate.Count; sr++)
        //                                                            {
        //                                                                if (Utility.IsDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCESS]).Trim()))
        //                                                                    cess = Convert.ToDouble(cess) + Convert.ToDouble(listDrRate[sr][b2cCESS]);
        //                                                            }
        //                                                            if (cess != null) { newRow[b2cCESS] = Convert.ToDouble(cess); } // CESS value
        //                                                        }
        //                                                        catch (Exception ex)
        //                                                        { }

        //                                                        newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                        newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);

        //                                                        dtGT.Rows.Add(newRow);
        //                                                        #endregion
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        #region Single Entry
        //                                                        DataRow newRow = dtGT.NewRow();
        //                                                        newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                        newRow[b2cInvNo] = Convert.ToString(listDrRate[0][b2cInvNo]);
        //                                                        newRow[b2cInvDate] = Convert.ToString(listDrRate[0][b2cInvDate]);
        //                                                        newRow[b2cInvVal] = Convert.ToString(listDrRate[0][b2cInvVal]);
        //                                                        newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);
        //                                                        newRow[b2cTax] = Convert.ToString(listDrRate[0][b2cTax]);
        //                                                        newRow[b2cIGST] = Convert.ToString(listDrRate[0][b2cIGST]);
        //                                                        newRow[b2cCESS] = Convert.ToString(listDrRate[0][b2cCESS]);
        //                                                        newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                        newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);
        //                                                        dtGT.Rows.Add(newRow);

        //                                                        //DataRow newRow = dtGT.NewRow();
        //                                                        //newRow.ItemArray = listDrRate[0].ItemArray;
        //                                                        //dtGT.Rows.Add(newRow);
        //                                                        #endregion
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        else
        //        { flg = true; }
        //        #endregion

        //        #region B2C Small
        //        if (dtB2CLT != null && dtB2CLT.Rows.Count > 0)
        //        {
        //            dtLT = dtB2CLT.Clone();
        //            DataTable dtLTInter = dtB2CLT.Clone();
        //            DataTable dtLTIntra = dtB2CLT.Clone();
        //            dtLT.Columns.Add(b2cSupType);
        //            dtLTInter.Columns.Add(b2cSupType);
        //            dtLTIntra.Columns.Add(b2cSupType);

        //            List<string> listPOS = dtB2CLT.Rows
        //                   .OfType<DataRow>()
        //                   .Select(x => Convert.ToString(x[b2cPOS]).Trim())
        //                   .Distinct().ToList();

        //            if (listPOS != null && listPOS.Count > 0)
        //            {
        //                for (int sj = 0; sj < listPOS.Count; sj++)
        //                {
        //                    string stCode = CommonHelper.GetStateCode(Convert.ToString(listPOS[sj]).Trim());
        //                    if (stCode != "")
        //                    {
        //                        if (stCode != Convert.ToString(CommonHelper.CompanyStateCode))
        //                        {
        //                            List<string> listEcom = dtB2CLT.Rows
        //                               .OfType<DataRow>()
        //                               .Where(x => Convert.ToString(listPOS[sj]) == Convert.ToString(x[b2cPOS]).Trim())
        //                               .Select(x => Convert.ToString(x[b2cEcom]).Trim())
        //                               .Distinct().ToList();

        //                            if (listEcom != null && listEcom.Count > 0)
        //                            {
        //                                for (int i = 0; i < listEcom.Count; i++)
        //                                {
        //                                    if (listEcom[i] != "")
        //                                    {
        //                                        List<string> listRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                           .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToString(listEcom[i]).Trim() == Convert.ToString(x[b2cEcom]).Trim())
        //                                           .Select(x => Convert.ToString(x[b2cRate]).Trim())
        //                                           .Distinct().ToList();

        //                                        if (listRate != null && listRate.Count > 0)
        //                                        {
        //                                            for (int k = 0; k < listRate.Count; k++)
        //                                            {
        //                                                if (Convert.ToString(listRate[k]).Trim() != "")
        //                                                {
        //                                                    List<DataRow> listDrRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                                        .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToString(listEcom[i]).Trim() == Convert.ToString(x[b2cEcom]).Trim() && Convert.ToDecimal(listRate[k]) == Convert.ToDecimal(x[b2cRate]))
        //                                                        .Select(x => x)
        //                                                        .ToList();

        //                                                    if (listDrRate != null && listDrRate.Count > 0)
        //                                                    {
        //                                                        if (listDrRate.Count > 1)
        //                                                        {
        //                                                            #region Summation
        //                                                            DataRow newRow = dtLTInter.NewRow();
        //                                                            newRow[b2cSupType] = "Inter State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);

        //                                                            try
        //                                                            {
        //                                                                newRow[b2cTax] = listDrRate.Cast<DataRow>().Where(x => x[b2cTax] != null).Sum(x => Convert.ToString(x[b2cTax]).Trim() == "" ? 0 : Convert.ToDecimal(x[b2cTax])).ToString();

        //                                                                double? igst = null, cgst = null, sgst = null, cess = null;
        //                                                                for (int sr = 0; sr < listDrRate.Count; sr++)
        //                                                                {
        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cIGST]).Trim()))
        //                                                                        igst = Convert.ToDouble(igst) + Convert.ToDouble(listDrRate[sr][b2cIGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCGST]).Trim()))
        //                                                                        cgst = Convert.ToDouble(cgst) + Convert.ToDouble(listDrRate[sr][b2cCGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cSGST]).Trim()))
        //                                                                        sgst = Convert.ToDouble(sgst) + Convert.ToDouble(listDrRate[sr][b2cSGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCESS]).Trim()))
        //                                                                        cess = Convert.ToDouble(cess) + Convert.ToDouble(listDrRate[sr][b2cCESS]);
        //                                                                }

        //                                                                if (igst != null) { newRow[b2cIGST] = Convert.ToDouble(igst); } // IGST value 
        //                                                                if (cgst != null) { newRow[b2cCGST] = Convert.ToDouble(cgst); } // CGST value
        //                                                                if (sgst != null) { newRow[b2cSGST] = Convert.ToDouble(sgst); } // SGST value
        //                                                                if (cess != null) { newRow[b2cCESS] = Convert.ToDouble(cess); } // CESS value
        //                                                            }
        //                                                            catch (Exception ex)
        //                                                            { }

        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);

        //                                                            dtLTInter.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region Single Entry
        //                                                            DataRow newRow = dtLTInter.NewRow();
        //                                                            newRow[b2cSupType] = "Inter State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);
        //                                                            newRow[b2cTax] = Convert.ToString(listDrRate[0][b2cTax]);
        //                                                            newRow[b2cIGST] = Convert.ToString(listDrRate[0][b2cIGST]);
        //                                                            newRow[b2cCGST] = Convert.ToString(listDrRate[0][b2cCGST]);
        //                                                            newRow[b2cSGST] = Convert.ToString(listDrRate[0][b2cSGST]);
        //                                                            newRow[b2cCESS] = Convert.ToString(listDrRate[0][b2cCESS]);
        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);
        //                                                            dtLTInter.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        List<string> listRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                               .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToString(x[b2cEcom]).Trim() == "")
        //                                               .Select(x => Convert.ToString(x[b2cRate]).Trim())
        //                                               .Distinct().ToList();

        //                                        if (listRate != null && listRate.Count > 0)
        //                                        {
        //                                            for (int k = 0; k < listRate.Count; k++)
        //                                            {
        //                                                if (Convert.ToString(listRate[k]).Trim() != "")
        //                                                {
        //                                                    List<DataRow> listDrRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                                        .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToDecimal(listRate[k]) == Convert.ToDecimal(x[b2cRate]) && Convert.ToString(x[b2cEcom]).Trim() == "")
        //                                                        .Select(x => x)
        //                                                        .ToList();

        //                                                    if (listDrRate != null && listDrRate.Count > 0)
        //                                                    {
        //                                                        if (listDrRate.Count > 1)
        //                                                        {
        //                                                            #region Summation
        //                                                            DataRow newRow = dtLTInter.NewRow();
        //                                                            newRow[b2cSupType] = "Inter State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);

        //                                                            try
        //                                                            {
        //                                                                newRow[b2cTax] = listDrRate.Cast<DataRow>().Where(x => x[b2cTax] != null).Sum(x => Convert.ToString(x[b2cTax]).Trim() == "" ? 0 : Convert.ToDecimal(x[b2cTax])).ToString();

        //                                                                double? igst = null, cgst = null, sgst = null, cess = null;
        //                                                                for (int sr = 0; sr < listDrRate.Count; sr++)
        //                                                                {
        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cIGST]).Trim()))
        //                                                                        igst = Convert.ToDouble(igst) + Convert.ToDouble(listDrRate[sr][b2cIGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCGST]).Trim()))
        //                                                                        cgst = Convert.ToDouble(cgst) + Convert.ToDouble(listDrRate[sr][b2cCGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cSGST]).Trim()))
        //                                                                        sgst = Convert.ToDouble(sgst) + Convert.ToDouble(listDrRate[sr][b2cSGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCESS]).Trim()))
        //                                                                        cess = Convert.ToDouble(cess) + Convert.ToDouble(listDrRate[sr][b2cCESS]);
        //                                                                }

        //                                                                if (igst != null) { newRow[b2cIGST] = Convert.ToDouble(igst); } // IGST value 
        //                                                                if (cgst != null) { newRow[b2cCGST] = Convert.ToDouble(cgst); } // CGST value
        //                                                                if (sgst != null) { newRow[b2cSGST] = Convert.ToDouble(sgst); } // SGST value
        //                                                                if (cess != null) { newRow[b2cCESS] = Convert.ToDouble(cess); } // CESS value
        //                                                            }
        //                                                            catch (Exception ex)
        //                                                            { }

        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);

        //                                                            dtLTInter.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region Single Entry
        //                                                            DataRow newRow = dtLTInter.NewRow();
        //                                                            newRow[b2cSupType] = "Inter State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);
        //                                                            newRow[b2cTax] = Convert.ToString(listDrRate[0][b2cTax]);
        //                                                            newRow[b2cIGST] = Convert.ToString(listDrRate[0][b2cIGST]);
        //                                                            newRow[b2cCGST] = Convert.ToString(listDrRate[0][b2cCGST]);
        //                                                            newRow[b2cSGST] = Convert.ToString(listDrRate[0][b2cSGST]);
        //                                                            newRow[b2cCESS] = Convert.ToString(listDrRate[0][b2cCESS]);
        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);
        //                                                            dtLTInter.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        else
        //                        {
        //                            // Intra State

        //                            List<string> listEcom = dtB2CLT.Rows
        //                               .OfType<DataRow>()
        //                               .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim())
        //                               .Select(x => Convert.ToString(x[b2cEcom]).Trim())
        //                               .Distinct().ToList();

        //                            if (listEcom != null && listEcom.Count > 0)
        //                            {
        //                                for (int i = 0; i < listEcom.Count; i++)
        //                                {
        //                                    if (listEcom[i] != "")
        //                                    {
        //                                        List<string> listRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                           .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToString(listEcom[i]).Trim() == Convert.ToString(x[b2cEcom]).Trim())
        //                                           .Select(x => Convert.ToString(x[b2cRate]).Trim())
        //                                           .Distinct().ToList();

        //                                        if (listRate != null && listRate.Count > 0)
        //                                        {
        //                                            for (int k = 0; k < listRate.Count; k++)
        //                                            {
        //                                                if (Convert.ToString(listRate[k]).Trim() != "")
        //                                                {
        //                                                    List<DataRow> listDrRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                                        .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToString(listEcom[i]).Trim() == Convert.ToString(x[b2cEcom]).Trim() && Convert.ToDecimal(listRate[k]) == Convert.ToDecimal(x[b2cRate]))
        //                                                        .Select(x => x)
        //                                                        .ToList();

        //                                                    if (listDrRate != null && listDrRate.Count > 0)
        //                                                    {
        //                                                        if (listDrRate.Count > 1)
        //                                                        {
        //                                                            #region Summation
        //                                                            DataRow newRow = dtLTIntra.NewRow();
        //                                                            newRow[b2cSupType] = "Intra State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);

        //                                                            try
        //                                                            {
        //                                                                newRow[b2cTax] = listDrRate.Cast<DataRow>().Where(x => x[b2cTax] != null).Sum(x => Convert.ToString(x[b2cTax]).Trim() == "" ? 0 : Convert.ToDecimal(x[b2cTax])).ToString();

        //                                                                double? igst = null, cgst = null, sgst = null, cess = null;
        //                                                                for (int sr = 0; sr < listDrRate.Count; sr++)
        //                                                                {
        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cIGST]).Trim()))
        //                                                                        igst = Convert.ToDouble(igst) + Convert.ToDouble(listDrRate[sr][b2cIGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCGST]).Trim()))
        //                                                                        cgst = Convert.ToDouble(cgst) + Convert.ToDouble(listDrRate[sr][b2cCGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cSGST]).Trim()))
        //                                                                        sgst = Convert.ToDouble(sgst) + Convert.ToDouble(listDrRate[sr][b2cSGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCESS]).Trim()))
        //                                                                        cess = Convert.ToDouble(cess) + Convert.ToDouble(listDrRate[sr][b2cCESS]);
        //                                                                }

        //                                                                if (igst != null) { newRow[b2cIGST] = Convert.ToDouble(igst); } // IGST value 
        //                                                                if (cgst != null) { newRow[b2cCGST] = Convert.ToDouble(cgst); } // CGST value
        //                                                                if (sgst != null) { newRow[b2cSGST] = Convert.ToDouble(sgst); } // SGST value
        //                                                                if (cess != null) { newRow[b2cCESS] = Convert.ToDouble(cess); } // CESS value
        //                                                            }
        //                                                            catch (Exception ex)
        //                                                            { }

        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);

        //                                                            dtLTIntra.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region Single Entry
        //                                                            DataRow newRow = dtLTIntra.NewRow();
        //                                                            newRow[b2cSupType] = "Intra State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);
        //                                                            newRow[b2cTax] = Convert.ToString(listDrRate[0][b2cTax]);
        //                                                            newRow[b2cIGST] = Convert.ToString(listDrRate[0][b2cIGST]);
        //                                                            newRow[b2cCGST] = Convert.ToString(listDrRate[0][b2cCGST]);
        //                                                            newRow[b2cSGST] = Convert.ToString(listDrRate[0][b2cSGST]);
        //                                                            newRow[b2cCESS] = Convert.ToString(listDrRate[0][b2cCESS]);
        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);
        //                                                            dtLTIntra.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        List<string> listRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                               .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToString(x[b2cEcom]).Trim() == "")
        //                                               .Select(x => Convert.ToString(x[b2cRate]).Trim())
        //                                               .Distinct().ToList();

        //                                        if (listRate != null && listRate.Count > 0)
        //                                        {
        //                                            for (int k = 0; k < listRate.Count; k++)
        //                                            {
        //                                                if (Convert.ToString(listRate[k]).Trim() != "")
        //                                                {
        //                                                    List<DataRow> listDrRate = dtB2CLT.Rows.OfType<DataRow>()
        //                                                        .Where(x => Convert.ToString(listPOS[sj]).Trim() == Convert.ToString(x[b2cPOS]).Trim() && Convert.ToDecimal(listRate[k]) == Convert.ToDecimal(x[b2cRate]) && Convert.ToString(x[b2cEcom]).Trim() == "")
        //                                                        .Select(x => x)
        //                                                        .ToList();

        //                                                    if (listDrRate != null && listDrRate.Count > 0)
        //                                                    {
        //                                                        if (listDrRate.Count > 1)
        //                                                        {
        //                                                            #region Summation
        //                                                            DataRow newRow = dtLTIntra.NewRow();
        //                                                            newRow[b2cSupType] = "Intra State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);

        //                                                            try
        //                                                            {
        //                                                                double? igst = null, cgst = null, sgst = null, cess = null;
        //                                                                for (int sr = 0; sr < listDrRate.Count; sr++)
        //                                                                {
        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cIGST]).Trim()))
        //                                                                        igst = Convert.ToDouble(igst) + Convert.ToDouble(listDrRate[sr][b2cIGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCGST]).Trim()))
        //                                                                        cgst = Convert.ToDouble(cgst) + Convert.ToDouble(listDrRate[sr][b2cCGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cSGST]).Trim()))
        //                                                                        sgst = Convert.ToDouble(sgst) + Convert.ToDouble(listDrRate[sr][b2cSGST]);

        //                                                                    if (Utility.IsPMDecimalOrNumber(Convert.ToString(listDrRate[sr][b2cCESS]).Trim()))
        //                                                                        cess = Convert.ToDouble(cess) + Convert.ToDouble(listDrRate[sr][b2cCESS]);
        //                                                                }

        //                                                                newRow[b2cTax] = listDrRate.Cast<DataRow>().Where(x => x[b2cTax] != null).Sum(x => Convert.ToString(x[b2cTax]).Trim() == "" ? 0 : Convert.ToDecimal(x[b2cTax])).ToString();

        //                                                                if (igst != null) { newRow[b2cIGST] = Convert.ToDouble(igst); } // IGST value 
        //                                                                if (cgst != null) { newRow[b2cCGST] = Convert.ToDouble(cgst); } // CGST value
        //                                                                if (sgst != null) { newRow[b2cSGST] = Convert.ToDouble(sgst); } // SGST value
        //                                                                if (cess != null) { newRow[b2cCESS] = Convert.ToDouble(cess); } // CESS value
        //                                                            }
        //                                                            catch (Exception ex)
        //                                                            { }

        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);

        //                                                            dtLTIntra.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            #region Single Entry
        //                                                            DataRow newRow = dtLTIntra.NewRow();
        //                                                            newRow[b2cSupType] = "Intra State";
        //                                                            newRow[b2cPOS] = Convert.ToString(listDrRate[0][b2cPOS]);
        //                                                            newRow[b2cRate] = Convert.ToString(listDrRate[0][b2cRate]);
        //                                                            newRow[b2cTax] = Convert.ToString(listDrRate[0][b2cTax]);
        //                                                            newRow[b2cIGST] = Convert.ToString(listDrRate[0][b2cIGST]);
        //                                                            newRow[b2cCGST] = Convert.ToString(listDrRate[0][b2cCGST]);
        //                                                            newRow[b2cSGST] = Convert.ToString(listDrRate[0][b2cSGST]);
        //                                                            newRow[b2cCESS] = Convert.ToString(listDrRate[0][b2cCESS]);
        //                                                            newRow[b2cEcom] = Convert.ToString(listDrRate[0][b2cEcom]);
        //                                                            newRow[b2cParty] = Convert.ToString(listDrRate[0][b2cParty]);
        //                                                            dtLTIntra.Rows.Add(newRow);
        //                                                            #endregion
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            if (dtLTInter != null && dtLTInter.Rows.Count > 0)
        //            {
        //                foreach (DataRow dr in dtLTInter.Rows)
        //                {
        //                    DataRow newRow = dtLT.NewRow();
        //                    newRow.ItemArray = dr.ItemArray;
        //                    dtLT.Rows.Add(newRow);
        //                }
        //            }
        //            if (dtLTIntra != null && dtLTIntra.Rows.Count > 0)
        //            {
        //                foreach (DataRow dr in dtLTIntra.Rows)
        //                {
        //                    DataRow newRow = dtLT.NewRow();
        //                    newRow.ItemArray = dr.ItemArray;
        //                    dtLT.Rows.Add(newRow);
        //                }
        //            }
        //        }
        //        else
        //        { flg = true; }

        //        #endregion
        //    }
        //    catch (Exception ex)
        //    {
        //        flg = false;
        //        string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
        //        StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
        //        errorWriter.Write(errorMessage);
        //        errorWriter.Close();
        //    }

        //    return flg;
        //}

        private Boolean chkCellValue(string cellValue)
        {
            try
            {
                if (Utility.IsNumber(cellValue))
                    return true;
                else
                    return false;
            }
            catch
            {
                return false;
            }
        }

        public bool chkHSNQOC(string qoc)
        {
            bool flg = false;
            try
            {
                string[] arry = { "BAG-BAGS", "BAL-BALE", "BDL-BUNDLES", "BKL-BUCKLES", "BOU-BILLION OF UNITS", "BOX-BOX", "BTL-BOTTLES", "BUN-BUNCHES", "CAN-CANS", "CBM-CUBIC METERS", "CCM-CUBIC CENTIMETERS", "CMS-CENTIMETERS", "CTN-CARTONS", "DOZ-DOZENS", "DRM-DRUMS", "GGK-GREAT GROSS", "GMS-GRAMMES", "GRS-GROSS", "GYD-GROSS YARDS", "KGS-KILOGRAMS", "KLR-KILOLITRE", "KME-KILOMETRE", "MLT-MILILITRE", "MTR-METERS", "MTS-METRIC TON", "NOS-NUMBERS", "PAC-PACKS", "PCS-PIECES", "PRS-PAIRS", "QTL-QUINTAL", "ROL-ROLLS", "SET-SETS", "SQF-SQUARE FEET", "SQM-SQUARE METERS", "SQY-SQUARE YARDS", "TBS-TABLETS", "TGM-TEN GROSS", "THD-THOUSANDS", "TON-TONNES", "TUB-TUBES", "UGS-US GALLONS", "UNT-UNITS", "YDS-YARDS", "OTH-OTHERS" };

                for (int i = 0; i < arry.Length; i++)
                {
                    if (qoc == arry[i])
                    {
                        flg = true;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }

        public bool chkB2bInvType(string val)
        {
            bool flg = false;
            val = val.ToString();
            try
            {
                if (val == "Regular" || val == "SEZ Exports with payment" || val == "SEZ exports without payment" || val == "Deemed Exports")
                    flg = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }

        public string GetExportType(string inv, string sht)
        {
            string invType = "";
            inv = inv.Trim().ToLower();
            try
            {
                if (sht == "exp")
                {
                    if (inv == "wpay")
                        invType = "Export with payment of GST";
                    else if (inv == "wopay")
                        invType = "Export without payment of GST";
                    else if (inv == "de")
                        invType = "Deemed Exports";
                    else if (inv == "sewp")
                        invType = "SEZ Exports with payment";
                    else if (inv == "sewop")
                        invType = "SEZ exports without payment";
                }
                if (sht == "cdnr")
                {
                    if (inv == "c")
                        invType = "Credit Note";
                    if (inv == "d")
                        invType = "Debit Note";
                    if (inv == "r")
                        invType = "Refund Voucher";
                }
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return invType;
        }

        public bool ValidateData(string inv, string sht)
        {
            bool flg = false;
            inv = inv.Trim();
            try
            {
                if (sht == "exp")
                {
                    if (inv == "Export with payment of GST" || inv == "Export without payment of GST" || inv == "Deemed Exports" || inv == "SEZ Exports with payment" || inv == "SEZ exports without payment")
                        flg = true;
                }
                else if (sht == "cdnType")
                {
                    if (inv == "Credit Note" || inv == "Debit Note" || inv == "Refund Voucher")
                        flg = true;
                }
                else if (sht == "cdnurSup")
                {
                    if (inv == "Export with payment of GST" || inv == "Export without payment of GST" || inv == "B2C Large")
                        flg = true;
                }
                else if (sht == "cdnPre")
                {
                    if (inv == "Yes" || inv == "No")
                        flg = true;
                }
                else if (sht == "cdnReason")
                {
                    if (inv == "01-Sales Return" || inv == "02-Post Sale Discount" || inv == "03-Deficiency in services" || inv == "04-Correction in Invoice" || inv == "05-Change in POS" || inv == "06-Finalization of Provisional assessment" || inv == "07-Others")
                        flg = true;
                }
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }

        public bool chkNilType(string val)
        {
            bool flg = false;
            val = val.Trim();
            try
            {
                if (val == "Nil rated" || val == "Exempted" || val == "Non-GST Supply")
                    flg = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
                return false;
            }

            return flg;
        }

        public DataTable dtColTypeChange(DataTable dtOrg)
        {
            DataTable dtCloned = dtOrg.Clone();
            for (int i = 0; i < dtCloned.Columns.Count; i++)
            {
                dtCloned.Columns[i].DataType = typeof(string);
            }
            foreach (DataRow row in dtOrg.Rows)
            {
                dtCloned.ImportRow(row);
            }

            dtOrg = new DataTable();
            return dtCloned.Copy();
        }

        #endregion

        #region GST Method
        public bool uploadGSTR1(string json)
        {
            bool flag;
            try
            {
                this.Cc = clsPro.Cooki != null ? ((clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID) != null ? clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID).CC1 : null)) : null; //(CookieContainer)HttpContext.Current.Session["loginCookies_0"];
                string[] strArrays = clssummary.ReturnDate();
                string str = strArrays[0];
                string str1 = strArrays[1];
                string assesseeDetails = clssummary.GetAssesseeDetails()[0];
                CommonHelper.ReturnMonthYearStr = string.Concat(str1, str);
                HttpWebRequest httpWebRequest = this.PrepareGetRequest(new Uri(this.DashboardPage), this.GstLoginPage);
                this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                httpWebRequest = this.PrepareGSTR1FileUploadRequest(new Uri("https://return.gst.gov.in/returndocs/offline/upload"), "https://return.gst.gov.in/returns/auth/gstr/offlineupload", json, string.Concat(str1, str));
                this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                Stream responseStream = this.response.GetResponseStream();
                StreamReader streamReader = new StreamReader(responseStream, Encoding.UTF8);
                Gstr1SaveResponsePayload gstr1SaveResponsePayload = JsonConvert.DeserializeObject<Gstr1SaveResponsePayload>(streamReader.ReadToEnd());
                if (gstr1SaveResponsePayload.status != 1)
                {
                    string str2 = gstr1SaveResponsePayload.error.errorCode;
                    string str3 = gstr1SaveResponsePayload.error.message;
                    List<object> objs = gstr1SaveResponsePayload.error.stackTrace;
                    this.getError = string.Concat("Your GSTR1 return Data can not be sent to gstn please try again (ErrorMessage from GSTN : ", str3, ")");

                    #region FilingLog
                    string StatusCode = "";
                    string Status = "";
                    string ErrorMsg = "";
                    //if (refrenceIdsStatu.status.ToString() == null)
                    //    StatusCode = "";
                    //else
                    //    StatusCode = refrenceIdsStatu.status.ToString();

                    if (gstr1SaveResponsePayload.error.errorCode.ToString() == null)
                        Status = "";
                    else
                        Status = gstr1SaveResponsePayload.error.errorCode.ToString();

                    if (getError == null)
                        ErrorMsg = "";
                    else
                        ErrorMsg = getError;

                    Utility.FileingLogs("", "", CommonHelper.CompanyID, CommonHelper.CompanyGSTN, CommonHelper.SelectedMonth, string.Concat(str1, str), "GSTR-1", "Save To GSTIN", System.DateTime.Now.ToString(), "", Status, StatusCode, "", ErrorMsg);
                    #endregion

                    flag = false;
                }
                else
                {
                    string referenceId = gstr1SaveResponsePayload.data.reference_id;
                    httpWebRequest = this.PrepareGSTR1SaveRequestConfirm(new Uri("https://return.gst.gov.in/returns/auth/api/gstr1/upload"), "https://return.gst.gov.in/returns/auth/gstr/offlineupload", referenceId, string.Concat(str1, str));
                    this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                    responseStream = this.response.GetResponseStream();
                    streamReader = new StreamReader(responseStream, Encoding.UTF8);
                    gstr1SaveResponsePayload = JsonConvert.DeserializeObject<Gstr1SaveResponsePayload>(streamReader.ReadToEnd());
                    string transId = gstr1SaveResponsePayload.data.trans_id;
                    referenceId = gstr1SaveResponsePayload.data.reference_id;
                    string str4 = string.Concat(str1, str);
                    httpWebRequest = this.PrepareGetRequest(new Uri(string.Concat("https://return.gst.gov.in/returns/auth/api/offline/upload/summary?rtn_prd=", str4, "&rtn_typ=GSTR1")), "https://return.gst.gov.in/returns/auth/gstr/offlineupload");
                    this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                    responseStream = this.response.GetResponseStream();
                    streamReader = new StreamReader(responseStream, Encoding.UTF8);
                    RefrenceIdsStatus refrenceIdsStatu = JsonConvert.DeserializeObject<RefrenceIdsStatus>(streamReader.ReadToEnd());
                    if (refrenceIdsStatu.status != 1)
                    {
                        this.getError = "Your GSTR1 return Data Can not be Varifed Please Wait for Some time or Please Try To Save Again";
                        flag = false;

                        #region FilingLog
                        string StatusCode = "";
                        string Status = "";
                        string ErrorMsg = "";
                        if (refrenceIdsStatu.status.ToString() == null)
                            StatusCode = "";
                        else
                            StatusCode = refrenceIdsStatu.status.ToString();

                        if (gstr1SaveResponsePayload.error.errorCode.ToString() == null)
                            Status = "";
                        else
                            Status = gstr1SaveResponsePayload.error.errorCode.ToString();

                        if (getError == null)
                            ErrorMsg = "";
                        else
                            ErrorMsg = getError;

                        Utility.FileingLogs("", "", CommonHelper.CompanyID, CommonHelper.CompanyGSTN, CommonHelper.SelectedMonth, string.Concat(str1, str), "GSTR-1", "Save To GSTIN", System.DateTime.Now.ToString(), referenceId, Status, StatusCode, "", ErrorMsg);
                        #endregion
                    }
                    else
                    {
                        bool flag1 = false;
                        Upload upload = new Upload();
                        foreach (Upload datum in refrenceIdsStatu.data.upload)
                        {
                            if (referenceId == datum.ref_id)
                            {
                                upload = datum;
                                flag1 = true;

                                #region FilingLog
                                string StatusCode = "";
                                string Status = "";
                                string ErrorMsg = "";
                                if (upload.er_status == null)
                                    StatusCode = "0";
                                else
                                    StatusCode = refrenceIdsStatu.status.ToString();

                                if (upload.status == null)
                                    Status = "";
                                else
                                    Status = upload.status.ToString();

                                if (upload.er_msg == null)
                                    ErrorMsg = "";
                                else
                                    ErrorMsg = upload.er_msg;

                                Utility.FileingLogs("", "", CommonHelper.CompanyID, CommonHelper.CompanyGSTN, CommonHelper.SelectedMonth, string.Concat(str1, str), "GSTR-1", "Save To GSTIN", System.DateTime.Now.ToString(), referenceId, Status, StatusCode, "", ErrorMsg);
                                #endregion

                                break;
                            }
                        }
                        if (!flag1)
                        {
                            this.getError = string.Concat(this.getError, "Your GSTR1 Return is Not Accpted Please Retry");
                            flag = false;
                        }
                        else if (upload.status == "P")
                        {
                            this.getError = "Your GSTR1 is successfully Saved to GSTIN. Please View and Confirm Your GSTR1 Summary before Submit to GSTN./n (Note: It may take 10 to 15 minutes to updates your summary)";
                            flag = true;
                        }
                        else if (upload.status == "PE")
                        {
                            genrateerrorreort(referenceId, upload.status);

                            this.getError = "Your GSTR1 is  Saved  to GSTIN with Partialy error. Please View and Match Your GSTR1 Summary before Submit to GSTN. Or You can Save again after correcting data (Note: It may take 10 to 15 minutes to updates your summary)";
                            flag = true;
                        }
                        else if (upload.status == "IP")
                        {
                            this.getError = string.Concat("Please login to GSTN and check after sometime.", " Status- " + upload.status);
                            flag = true;
                        }
                        else if (upload.status != "REC")
                        {
                            this.getError = string.Concat(this.getError, " Status- " + upload.status);
                            flag = false;
                        }
                        else
                        {
                            this.getError = "Your GSTR1 Data is Uploaded to GSTIN And its Status is in pending state. Please Wait for some time and then View and Match Your GSTR1 Summary before Submit to GSTN.";
                            flag = true;
                        }
                    }
                }
            }
            catch (WebException ex)
            {
                //using (var stream = ex.Response.GetResponseStream())
                //using (var reader = new StreamReader(stream))
                //{
                //    this.getError = reader.ReadToEnd();
                //    flag = false;
                //}

                this.getError = "please Login your session has been logout";
                flag = false;

                SPQGstLogin objLogin = new SPQGstLogin();
                objLogin.Show();
            }
            catch (Exception exception1)
            {
                Exception exception = exception1;
                if (!exception.Message.Contains("403"))
                {
                    this.getError = exception.Message;
                    flag = false;
                }
                else
                {
                    this.getError = "please Login your session has been logout";
                    flag = false;
                }
            }

            return flag;
        }

        protected HttpWebRequest PrepareGetRequest_Old(Uri uri, string referer)
        {
            HttpWebRequest httpWebRequest;
            try
            {
                HttpWebRequest cc = (HttpWebRequest)WebRequest.Create(uri);
                cc.CookieContainer = this.Cc;
                cc.KeepAlive = true;
                cc.Method = "GET";
                if (uri.ToString().Contains("registration/auth/"))
                {
                    cc.Host = "enroll.gst.gov.in";
                }
                else if (uri.ToString().Contains("payment.gst.gov.in/"))
                {
                    cc.Host = "payment.gst.gov.in";
                }
                else if (!uri.ToString().Contains("return.gst.gov.in/"))
                {
                    cc.Host = "services.gst.gov.in";
                }
                else
                {
                    cc.Host = "return.gst.gov.in";
                }
                if (referer != null)
                {
                    cc.Referer = referer;
                }
                else if (referer == null)
                {
                    cc.Headers.Add("Upgrade-Insecure-Requests", "1");
                }
                cc.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                cc.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36";
                cc.Headers.Add("Accept-Language", "en-US,en;q=0.8");
                httpWebRequest = cc;
            }
            catch (Exception exception)
            {
                this.getError = "Error in requesting to server";
                httpWebRequest = null;
            }
            return httpWebRequest;
        }

        protected HttpWebRequest PrepareGetRequest(Uri uri, string referer)
        {
            HttpWebRequest httpWebRequest;
            try
            {
                HttpWebRequest cc = (HttpWebRequest)WebRequest.Create(uri);
                cc.CookieContainer = this.Cc;
                cc.KeepAlive = true;
                cc.Method = "GET";
                if (uri.ToString().Contains("registration/auth/"))
                {
                    cc.Host = "enroll.gst.gov.in";
                }
                else if (uri.ToString().Contains("payment.gst.gov.in/"))
                {
                    cc.Host = "payment.gst.gov.in";
                }
                else if (uri.ToString().Contains("return.gst.gov.in/"))
                {
                    cc.Host = "return.gst.gov.in";
                }
                else if (!uri.ToString().Contains("files.gst.gov.in"))
                {
                    cc.Host = "services.gst.gov.in";
                }
                else
                {
                    cc.Host = "files.gst.gov.in";
                }
                if (referer != null)
                {
                    cc.Referer = referer;
                }
                else if (referer == null)
                {
                    cc.Headers.Add("Upgrade-Insecure-Requests", "1");
                }
                if (!uri.ToString().Contains("files.gst.gov.in"))
                {
                    cc.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                }
                else
                {
                    cc.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8";
                    cc.Headers.Add("Accept-Encoding", "gzip, deflate, br");
                }
                cc.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36";
                cc.Headers.Add("Accept-Language", "en-US,en;q=0.8");
                httpWebRequest = cc;
            }
            catch (Exception exception)
            {
                this.getError = "Error in requesting to server";
                httpWebRequest = null;
            }
            return httpWebRequest;
        }
        protected HttpWebRequest PrepareGSTR1FileUploadRequest(Uri uri, string referer, string json, string fp)
        {
            HttpWebRequest httpWebRequest;
            try
            {
                string str = "----WebKitFormBoundaryOMCGv8aBlVZ8OwMt";
                HttpWebRequest cc = null;
                cc = (HttpWebRequest)WebRequest.Create(uri);
                cc.ContentType = string.Concat("multipart/form-data; boundary=", str);
                cc.Method = "POST";
                cc.CookieContainer = this.Cc;
                if (referer != null)
                {
                    cc.Referer = referer;
                }
                cc.Accept = "application/json,*/*";
                cc.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36";
                cc.Headers.Add("Accept-Language", "en-US,en;q=0.8");
                cc.Headers.Add("Accept-Encoding", "gzip, deflate, br");
                cc.Headers.Add("Origin", "https://return.gst.gov.in");
                cc.KeepAlive = true;
                cc.Host = "return.gst.gov.in";
                cc.Headers.Add("X-Requested-With: XMLHttpRequest");
                cc.Headers.Add("sz: 7167");
                Encoding uTF8 = Encoding.UTF8;
                Stream requestStream = null;
                byte[] bytes = uTF8.GetBytes(this.GetPostData("upfile", "GSTR1.json", fp, json, str));
                cc.ContentLength = (long)((int)bytes.Length);
                requestStream = cc.GetRequestStream();
                requestStream.Write(bytes, 0, (int)bytes.Length);
                requestStream.Close();
                httpWebRequest = cc;
            }
            catch (Exception exception)
            {
                this.getError = "Error in Creating request to server";
                httpWebRequest = null;
            }
            return httpWebRequest;
        }
        public string GetPostData(string Name, string FileName, string fp, string json, string boundary)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(string.Concat("--", boundary));
            stringBuilder.AppendLine(string.Format("Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"", Name, FileName));
            stringBuilder.AppendLine("Content-Type: application/octet-stream");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine(json);
            stringBuilder.AppendLine(string.Concat("--", boundary));
            stringBuilder.AppendLine("Content-Disposition: form-data; name=\"ty\"");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("ROUZ");
            stringBuilder.AppendLine(string.Concat("--", boundary));
            stringBuilder.AppendLine("Content-Disposition: form-data; name=\"rtn_typ\"");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("GSTR1");
            stringBuilder.AppendLine(string.Concat("--", boundary));
            stringBuilder.AppendLine("Content-Disposition: form-data; name=\"ret_period\"");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine(fp);
            stringBuilder.AppendLine(string.Concat("--", boundary, "--"));
            return stringBuilder.ToString();
        }
        protected HttpWebRequest PrepareGSTR1SaveRequestConfirm(Uri uri, string referer, string refis, string fp)
        {
            HttpWebRequest httpWebRequest;
            try
            {
                HttpWebRequest cc = (HttpWebRequest)WebRequest.Create(uri);
                cc.CookieContainer = this.Cc;
                cc.Method = "POST";
                if (referer != null)
                {
                    cc.Referer = referer;
                }
                cc.Accept = "application/json, text/plain, */*";
                cc.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36";
                cc.Headers.Add("Accept-Language", "en-US,en;q=0.8");
                cc.Headers.Add("Origin", "https://return.gst.gov.in");
                cc.KeepAlive = true;
                cc.Host = "return.gst.gov.in";
                cc.ContentType = "application/json;charset=UTF-8";
                using (StreamWriter streamWriter = new StreamWriter(cc.GetRequestStream()))
                {
                    streamWriter.Write(string.Concat(new string[] { "{\"status\":\"1\",\"data\":{\"reference_id\":\"", refis, "\"},\"fp\":\"", fp, "\"}" }));
                }
                httpWebRequest = cc;
            }
            catch (Exception exception)
            {
                this.getError = string.Concat("Error in requesting to server", exception.Message);
                httpWebRequest = null;
            }
            return httpWebRequest;
        }

        #region Request For Download Error
        public bool genrateerrorreort(string refid, string status)
        {
            bool flag;
            try
            {
                if ((refid == "Saved" || refid == "saved" ? false : status == "PE"))
                {
                    this.Cc = clsPro.Cooki != null ? ((clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID) != null ? clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID).CC1 : null)) : null; //(CookieContainer)HttpContext.Current.Session["loginCookies_0"];
                    string[] strArrays = clssummary.ReturnDate(); // GstClassesHelper.ReturnDate(GstClassesHelper.GetReturnIdCookies(base.Request));
                    string str1 = strArrays[0];
                    string str2 = string.Concat(strArrays[1], str1);
                    HttpWebRequest httpWebRequest = this.PrepareGetRequest(new Uri(string.Concat(new string[] { "https://return.gst.gov.in/returns/auth/api/offline/upload/error/generate?ref_id=", refid, "&rtn_prd=", str2, "&rtn_typ=GSTR1" })), "https://return.gst.gov.in/returns/auth/gstr/offlineupload");
                    this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                    Stream responseStream = this.response.GetResponseStream();
                    (new StreamReader(responseStream, Encoding.UTF8)).ReadToEnd();
                    flag = true;
                }
                else
                {
                    flag = false;
                }
            }
            catch (Exception exception1)
            {
                flag = false;

                Exception exception = exception1;
                if (!exception.Message.Contains("403"))
                {
                    this.getError = exception.Message;
                    flag = false;
                }
                else
                {
                    this.getError = "please Login your session has been logout";
                    flag = false;
                }
            }
            return flag;
        }
        #endregion

        #endregion

        private void pbUploadInv_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do You Want to Save JSON on GST Portal...? ", "Confirmation GSTR-1 JSON", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
            {
                return;
            }
            try
            {
                bool GoAhead = true;

                string Query = "Select * from SPQValidation where Fld_ReturnType='GSTR1' and Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_ReturnForm in ('B2B','B2CL','B2CS','EXPORT','CDN','CDNUR','GROSS-ADVANCE','NET-ADVANCE','HSN','DOC-ISSUE','B2BA','B2CLA','B2CSA','CDNA','CDNURA','EXPA','ATA','TXPA') and Fld_IsValidated='false' ";
                DataTable dt = new DataTable();
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0)
                {
                    string err = "";
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (err == "")
                            err = Convert.ToString(dr["Fld_ReturnForm"]);
                        else
                            err = err + " , " + Convert.ToString(dr["Fld_ReturnForm"]);
                    }

                    DialogResult result = MessageBox.Show(err + " have not been validated do u still want to continue?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    // IF USER CONFIRM FOR DELETING RECORDS
                    if (result == DialogResult.Yes)
                        GoAhead = true;
                    else
                        GoAhead = false;
                }

                if (GoAhead)
                {
                    #region sHTMl code

                    if (Utility.CheckNet())
                    {
                        var obj = clsPro.Cooki != null ? clsPro.Cooki.FirstOrDefault(x => x.ckname == (string.Concat("loginCookies_", CommonHelper.CompanyID))) : null;

                        if (obj != null && obj.CC1 != null)
                        {
                            pbGSTR1.Visible = true;
                            Application.DoEvents();

                            GSTR1Json objJson = new GSTR1Json();
                            if (objJson.generateJSON("GST").Trim() != "")
                            {
                                string jsonFile = File.ReadAllText(CommonHelper.jsonFilePath);

                                if (uploadGSTR1(jsonFile))
                                {
                                    pbGSTR1.Visible = false;
                                    MessageBox.Show(getError, "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                else
                                {
                                    pbGSTR1.Visible = false;
                                    MessageBox.Show(Convert.ToString(getError) == "" ? "Status : ER" : getError, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }

                                CommonHelper.ReturnMonthYearStr = "";
                            }
                        }
                        else
                        {
                            SPQGstLogin frm = new SPQGstLogin();
                            frm.Visible = false;
                            var result = frm.ShowDialog();
                            if (result != DialogResult.OK)
                            {
                                SPQGstLogin objLogin = new SPQGstLogin();
                                objLogin.Show();
                            }
                            else
                            {
                                pbUploadInv_Click(sender, e);
                            }
                        }
                    }
                    else
                    {
                        //MessageBox.Show("It Seems Your Internet Conection is Not Available, Please Connect Internet…!!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        MessageBox.Show("It Seems Your Internet Conection is Not Available, Please Connect Internet…!!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    #endregion

                    pbGSTR1.Visible = false;

                    #region Gst Upload Code
                    //if (SetGSPSetting())
                    //{
                    //    GSTR1Json objJson = new GSTR1Json();
                    //    if (objJson.generateJSON("GST").Trim() != "")
                    //    {
                    //        frmGSTR1Upload obj = new frmGSTR1Upload();
                    //        obj.MdiParent = this.MdiParent;
                    //        Utility.CloseAllOpenForm();
                    //        obj.Dock = DockStyle.Fill;
                    //         
                    //        obj.Show();
                    //    }
                    //}
                    #endregion

                    #region GSP Code
                    //if (SetGSPSetting())
                    //{
                    //    pbGSTR1.Visible = true;
                    //    //pbUploadInv.Enabled = false;

                    //    GSPApisetting builder = new GSPApisetting();
                    //    AppCompany objcompany = new AppCompany();
                    //    DataTable data = new DataTable();
                    //    double mi = 0;

                    //    var request = (HttpWebRequest)WebRequest.Create("http://13.126.181.225:8000/SPEQTAGSTOffLineUtility/GetOffGstnApi?GSTIN=" + CommonHelper.CompanyGSTN + "");
                    //    request.Headers.Add("Token", "MVPLGSPTKN221232");
                    //    string webData = Utility.GetApi(request);
                    //    RootObject b2bs = Newtonsoft.Json.JsonConvert.DeserializeObject<RootObject>(webData);

                    //    if (Convert.ToString(b2bs.RecordId).Trim() != "")
                    //    {
                    //        GSPSetting.RecordId = b2bs.RecordId;
                    //        GSPSetting.ipuser = b2bs.ipuser;
                    //        GSPSetting.statecd = b2bs.statecd;
                    //        GSPSetting.txn = b2bs.txn;
                    //        GSPSetting.AppKey = b2bs.AppKey;
                    //        GSPSetting.AuthToken = b2bs.AuthToken;
                    //        GSPSetting.gstin = b2bs.gstin;
                    //        GSPSetting.GSTINUserName = b2bs.GSTINUserName;
                    //        GSPSetting.Datetime = b2bs.Datetime;
                    //        GSPSetting.Decipher = b2bs.Decipher;
                    //        GSPSetting.SEK = b2bs.SEK;
                    //        GSPSetting.InsertDate = b2bs.InsertDate;
                    //        GSPSetting.UpdateDate = b2bs.UpdateDate;
                    //        GSPSetting.DeleteDate = b2bs.DeleteDate;
                    //        GSPSetting.IsDeleted = b2bs.IsDeleted;

                    //        if (Convert.ToString(GSPSetting.Datetime).Trim() != "")
                    //        {
                    //            DateTime time = Convert.ToDateTime(GSPSetting.Datetime);
                    //            mi = DateTime.Now.Subtract(time).TotalMinutes;
                    //        }

                    //        if (mi >= 720 || mi == 0 || Convert.ToString(GSPSetting.AuthToken).Trim() == "")
                    //        {
                    //            string s1 = builder.OTPRequest(); // if otp is needed
                    //            if (Convert.ToString(s1) != "")
                    //            {
                    //                builder.AuthenticationRequest(s1);

                    //                #region gstr-1

                    //                GSTR1Json objJson = new GSTR1Json();
                    //                if (objJson.generateJSON("GSP").Trim() != "")
                    //                {
                    //                    //pbGetSummary.Enabled = true;
                    //                    //pbUploadInv.Enabled = false;
                    //                    //pbSubmitReturn.Enabled = false;
                    //                    //pbFileGSTR.Enabled = false;
                    //                    ////pbUploadInv.BackgroundImage = (System.Drawing.Image)Properties.Resources.Btn_1_Dark;
                    //                    ////pbGetSummary.BackgroundImage = (System.Drawing.Image)Properties.Resources.Btn_2_Light;
                    //                }
                    //                else
                    //                { //pbUploadInv.Enabled = true; 
                    //                }
                    //                #endregion
                    //            }
                    //        }
                    //        else // if otp no need
                    //        {
                    //            GSTR1Json objJson = new GSTR1Json();
                    //            if (objJson.generateJSON("GSP").Trim() != "")
                    //            {
                    //                //pbGetSummary.Enabled = true;
                    //                //pbUploadInv.Enabled = false;
                    //                //pbSubmitReturn.Enabled = false;
                    //                //pbFileGSTR.Enabled = false;
                    //                ////pbUploadInv.BackgroundImage = (System.Drawing.Image)Properties.Resources.Btn_1_Dark;
                    //                ////pbGetSummary.BackgroundImage = (System.Drawing.Image)Properties.Resources.Btn_2_Light;
                    //            }
                    //            else
                    //            { //pbUploadInv.Enabled = true; 
                    //            }
                    //        }
                    //        pbGSTR1.Visible = false;
                    //        //pbUploadInv.Image = (System.Drawing.Image)Properties.Resources.Btn_1_Light;
                    //    }
                    //    else
                    //    {
                    //        //AppCompany objCompany = new AppCompany();

                    //        //string query = "insert into tb_GstnApi(statecd,gstin, Datetime)Values ('" + CommonHelper.CompanyStateCode + "','" + CommonHelper.CompanyGSTN + "','" + DateTime.Now + "')";

                    //        //objCompany.IUDData(query);

                    //        RootObject obj = new RootObject();
                    //        obj.statecd = CommonHelper.CompanyStateCode;
                    //        obj.gstin = CommonHelper.CompanyGSTN;
                    //        obj.GSTINUserName = Constants.UserName;
                    //        obj.Datetime = DateTime.Now.ToString("yyyy-MM-dd");
                    //        string json = JsonConvert.SerializeObject(obj);

                    //        Application.DoEvents();
                    //        WebRequest request1 = WebRequest.Create("http://13.126.181.225:8000/SPEQTAGSTOffLineUtility/InsertOffGstnApi");
                    //        string responseFromServer = Utility.PostApiGSP(request1, json);

                    //        GSPResClass objAppKey = JsonConvert.DeserializeObject<GSPResClass>(responseFromServer);

                    //        if (objAppKey.Status != "1")
                    //        {
                    //            MessageBox.Show("Error in Insert Data...");
                    //            return;
                    //        }
                    //        Application.DoEvents();


                    //        string s1 = builder.OTPRequest();
                    //        if (Convert.ToString(s1) != "")
                    //        {
                    //            builder.AuthenticationRequest(s1);

                    //            #region gstr-1

                    //            GSTR1Json objJson = new GSTR1Json();
                    //            if (objJson.generateJSON("GSP").Trim() != "")
                    //            {
                    //                //pbGetSummary.Enabled = true;
                    //                //pbUploadInv.Enabled = false;
                    //                //pbSubmitReturn.Enabled = false;
                    //                //pbFileGSTR.Enabled = false;
                    //                ////pbUploadInv.BackgroundImage = (System.Drawing.Image)Properties.Resources._1;
                    //                ////pbGetSummary.BackgroundImage = (System.Drawing.Image)Properties.Resources.Btn_2;
                    //            }
                    //            else
                    //            { //pbUploadInv.Enabled = true; 
                    //            }
                    //            #endregion
                    //        }
                    //    }
                    //}
                    #endregion
                }

            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                if (ex.Message.Contains("403"))
                {
                    SPQGstLogin frm = new SPQGstLogin();
                    frm.Visible = false;
                    var result = frm.ShowDialog();
                    if (result != DialogResult.OK)
                    {
                        SPQGstLogin objLogin = new SPQGstLogin();
                        objLogin.Show();
                    }
                    else
                    {
                        pbUploadInv_Click(sender, e);
                    }
                }
                else if (!ex.Message.Contains("403"))
                {
                    pbGSTR1.Visible = false;
                    string errorMessage = string.Format("Error:{0}{1}Source:{2}{3}Error Time:{4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                    StreamWriter errorWriter = new StreamWriter("Update_Error_File.txt", true);
                    errorWriter.Write(errorMessage);
                    errorWriter.Close();
                }
            }
        }

        private void pbSystemSummary_Click(object sender, EventArgs e)
        {
            try
            {

            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("Error:{0}{1}Source:{2}{3}Error Time:{4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("Update_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        private void pbGetSummary_Click(object sender, EventArgs e)
        {
            try
            {
                ////pbGetSummary.Image = (System.Drawing.Image)Properties.Resources.Btn_2_Light;
                //pbSubmitReturn.Image = (System.Drawing.Image)Properties.Resources.Btn_3_Dark;
                //MessageBox.Show("Successfully Downloaded Summary From GSTN", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //btnCompare.Visible = true;

                //MatchData("-");

                ////bool fl = new GSTRModule.GSTR1().GetGSTR1B2BSummary();

                //SPQGSTR1GetSummary obj = new SPQGSTR1GetSummary();
                SPQGSTR1GetSummaryNew obj = new SPQGSTR1GetSummaryNew();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();                
                obj.Dock = DockStyle.Fill;
                obj.Show();
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("Error:{0}{1}Source:{2}{3}Error Time:{4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("Update_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        public bool submitGSTR1()
        {
            bool flag;
            try
            {
                this.Cc = clsPro.Cooki != null ? ((clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID) != null ? clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID).CC1 : null)) : null; //(CookieContainer)HttpContext.Current.Session["loginCookies_0"];

                string[] strArrays = clssummary.ReturnDate();
                string str = strArrays[0];
                string str1 = string.Concat(strArrays[1], str);
                //string assesseeDetails = clssummary.GetAssesseeDetails(assesseeIdCookies)[0];
                string assesseeDetails = clssummary.GetAssesseeDetails()[0];
                HttpWebRequest httpWebRequest = this.PrepareGetRequest(new Uri(this.DashboardPage), this.GstLoginPage);
                this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                List<string> gstr1SubmitUrl = GetUrlForRequest.GetGstr1SubmitUrl(str1);
                httpWebRequest = this.PrepareGSTR1SubmitRequest(new Uri(gstr1SubmitUrl[0]), gstr1SubmitUrl[1], str1, assesseeDetails);
                this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                Stream responseStream = this.response.GetResponseStream();
                StreamReader streamReader = new StreamReader(responseStream, Encoding.UTF8);
                Gstr1SaveResponsePayload gstr1SaveResponsePayload = JsonConvert.DeserializeObject<Gstr1SaveResponsePayload>(streamReader.ReadToEnd());
                if (gstr1SaveResponsePayload.status != 1)
                {
                    string str2 = gstr1SaveResponsePayload.error.errorCode;
                    string str3 = gstr1SaveResponsePayload.error.message;
                    List<object> objs = gstr1SaveResponsePayload.error.stackTrace;
                    this.getError = string.Concat("Could Not Submit Your Return (", str3, ")");
                    flag = false;
                }
                else
                {
                    string transId = gstr1SaveResponsePayload.data.trans_id;
                    string referenceId = gstr1SaveResponsePayload.data.reference_id;
                    //MethodStore methodStore = new MethodStore();
                    //string returnIdCookies = GstClassesHelper.GetReturnIdCookies(base.Request);
                    //string str4 = DateTime.Now.ToString("yyyy-MM-dd H:mm:ss");
                    //if (methodStore.ExecuteQuery(string.Format("Execute block as begin if(not exists(select * from GSTR1RETURNSTATUS where RETURNID={0})) then begin insert into GSTR1RETURNSTATUS(ReturnId,SUBMITREFID,SUBMITTXNID,SUBMITDATE) values({1},'{2}','{3}','{4}'); end else begin update GSTR1RETURNSTATUS set SUBMITREFID='{5}' ,SUBMITTXNID='{6}',SUBMITDATE='{7}' where ReturnId={8}; end end", new object[] { returnIdCookies, returnIdCookies, referenceId, transId, str4, referenceId, transId, str4, returnIdCookies })))
                    //{
                    //    this.Session["IsError"] = "Your GSTR1 is successfully Submitted to GSTIN. Now You can File Your GSTR1 Return";
                    //}
                    //else
                    //{
                    //    this.Session["IsInfo"] = string.Concat("Your Return is Submitted but Could not be updated on our datbase Submit referenceId in In database , your Submit RefrenceId is ", referenceId, " please Note it Down For any future reference");
                    //}
                    flag = true;
                    return flag;
                }
            }
            catch (Exception exception1)
            {
                Exception exception = exception1;
                if (!exception.Message.Contains("403"))
                {
                    this.getError = "Some error occured please check ur Connection/Data and try again";
                    flag = false;
                }
                else
                {
                    //this.Session[string.Concat("loginCookies_", this.AssesseeId)] = null;
                    //this.getError = "please Login your session has been logout";
                    //this.openSaveModal("submitToGstin1");
                    flag = false;
                }
            }
            return flag;
        }

        protected HttpWebRequest PrepareGSTR1SubmitRequest(Uri uri, string referer, string fp, string gstin)
        {
            HttpWebRequest httpWebRequest;
            try
            {
                HttpWebRequest cc = (HttpWebRequest)WebRequest.Create(uri);
                cc.CookieContainer = this.Cc;
                cc.Method = "POST";
                if (referer != null)
                {
                    cc.Referer = referer;
                }
                cc.Accept = "application/json, text/plain, */*";
                cc.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36";
                cc.Headers.Add("Accept-Language", "en-US,en;q=0.8");
                cc.Headers.Add("Origin", "https://return.gst.gov.in");
                cc.KeepAlive = true;
                cc.Host = "return.gst.gov.in";
                cc.ContentType = "application/json;charset=UTF-8";
                using (StreamWriter streamWriter = new StreamWriter(cc.GetRequestStream()))
                {
                    sunmitrequestpayload _sunmitrequestpayload = new sunmitrequestpayload()
                    {
                        fp = fp,
                        gstin = gstin
                    };
                    streamWriter.Write(JsonConvert.SerializeObject(_sunmitrequestpayload));
                }
                httpWebRequest = cc;
            }
            catch (Exception exception)
            {
                this.getError = string.Concat("Error in requesting to server", exception.Message);
                httpWebRequest = null;
            }
            return httpWebRequest;
        }

        private void pbSubmitReturn_Click(object sender, EventArgs e)
        {
            try
            {
                #region FOR DIRECT TO SUBMIT ON GST PORTAL
                //DialogResult confirmResult = MessageBox.Show("Are you sure? Do you want to submit GSTR-1? Once you have submit you can not do any changes on GST Portal", "Information", MessageBoxButtons.OKCancel);
                //if (confirmResult == DialogResult.OK)
                //{
                //    bool IsSubmitGSTR1 = submitGSTR1();
                //}
                #endregion

                bool isExtensionInstalled = Utility.chromeExtensionCheck();

                if (isExtensionInstalled)
                {
                    string GetMonth = CommonHelper.GetMonth(CommonHelper.SelectedMonth);
                    string Year = CommonHelper.ReturnYear.Replace(" ", "");

                    string[] Years = Year.Split('-');
                    Year = Years[0] + "-" + Years[1].Substring(2, 2);

                    var encodedString = Utility.encoding(Convert.ToString(Constants.UserName) + ',' + Convert.ToString(CommonHelper.CompanyPassword) + ',' + "gstrone" + ',' + GetMonth + ',' + Year);
                    Process.Start("chrome.exe", "https://services.gst.gov.in/services/login?gstrone," + encodedString);
                }
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("Error:{0}{1}Source:{2}{3}Error Time:{4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("Update_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        protected bool BindAuthorizedSignatory()
        {
            bool flag = false;
            try
            {
                this.Cc = clsPro.Cooki != null ? ((clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID) != null ? clsPro.Cooki.FirstOrDefault(x => x.ckname == "loginCookies_" + CommonHelper.CompanyID).CC1 : null)) : null; // (CookieContainer)this.Session[string.Concat("loginCookies_", assesseeIdCookies)];
                string[] strArrays = clssummary.ReturnDate();
                string str = strArrays[0];
                string str1 = strArrays[1];
                string assesseeDetails = clssummary.GetAssesseeDetails()[0];
                HttpWebRequest httpWebRequest = this.PrepareGetRequest(new Uri("https://return.gst.gov.in/returns/auth/api/signatory"), "https://return.gst.gov.in/returns/auth/gstr1");
                this.response = (HttpWebResponse)httpWebRequest.GetResponse();
                Stream responseStream = this.response.GetResponseStream();
                string end = (new StreamReader(responseStream, Encoding.UTF8)).ReadToEnd();
                SignatoryModel signatoryModel = JsonConvert.DeserializeObject<SignatoryModel>(end);
                if (signatoryModel.status != 1)
                {
                    this.getError = "Error Getting Signatory please try again";
                    flag = false;
                }
                else
                {
                    cmbAuthSign.Items.Clear();

                    ComboboxItem _item = new ComboboxItem();
                    _item.Text = "Select";
                    _item.Value = "Select";
                    cmbAuthSign.Items.Add(_item);
                    int num = 0;
                    foreach (Signatory signatory in signatoryModel.data.signatories)
                    {
                        string str2 = signatory.firstName;
                        string str3 = signatory.lastName;
                        int num1 = num;
                        num = num1 + 1;
                        //cmbAuthSign.Items.Add(new ListItem(string.Concat(str2, " ", str3), string.Concat(num1)));

                        ComboboxItem item = new ComboboxItem();
                        item.Text = string.Concat(str2, " ", str3);
                        item.Value = string.Concat(num1);
                        cmbAuthSign.Items.Add(item);
                        //if ((autoemail == "" ? false : autoemail == signatory.emailId))
                        //{
                        //    base.ClientScript.RegisterStartupScript(base.GetType(), "ModalClick2345", string.Concat("<script>document.getElementById('signatoriesList')[0].value='", num - 1, "';document.getElementById('GenrateOtp').click();</script>"));
                        //}
                    }
                    //ViewState["signatoryListJson"] = end;
                    CommonHelper.signatoryListJson = end;
                    //if ((num != 1 ? false : autoemail == ""))
                    //{
                    //    base.ClientScript.RegisterStartupScript(base.GetType(), "ModalClick2345", string.Concat("<script>document.getElementById('signatoriesList').selectedIndex=", num, ";</script>"));
                    //}
                    //base.ClientScript.RegisterStartupScript(base.GetType(), "ModalClick23", "<script>document.getElementById('ModalSignatorybtn').click();</script>");
                    flag = true;

                    cmbAuthSign.Refresh();
                    cmbAuthSign.SelectedIndex = 0;
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("403") || ex.Message.ToLower().Contains("connection was closed"))
                {
                    SPQGstLogin frm = new SPQGstLogin();
                    frm.Visible = false;
                    var result = frm.ShowDialog();
                    if (result != DialogResult.OK)
                    {

                    }
                    else
                    {
                        BindAuthorizedSignatory();
                    }
                    return flag;
                }
            }
            return flag;
        }

        private void pbFileGSTR_Click(object sender, EventArgs e)
        {
            try
            {
                #region FOR DIRECT TO FILE WITH DSC ON GST PORTAL
                if (cmbAuthSign.Items.Count <= 0)
                {
                    BindAuthorizedSignatory();
                }

                if (cmbAuthSign.SelectedIndex <= 0)
                {
                    MessageBox.Show("Please Select Authorised Signatory.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    DialogResult confirmResult = MessageBox.Show("I/We hereby solemnly affirm and declare that the information given herein above is true and correct to the best of my/our knowledge and belief and nothing has been concealed thereform.", "Conformation", MessageBoxButtons.OKCancel);
                    if (confirmResult == DialogResult.OK)
                    {
                        DialogResult _confirmResult = MessageBox.Show("You are about to file GSTR1. Would you like to proceed?", "WARNING", MessageBoxButtons.OKCancel);
                        if (_confirmResult == DialogResult.OK)
                        {
                            // Write Code here
                        }
                    }
                }
                #endregion

                //bool isExtensionInstalled = Utility.chromeExtensionCheck();

                //if (isExtensionInstalled)
                //{
                //    string GetMonth = CommonHelper.GetMonth(CommonHelper.SelectedMonth);
                //    string Year = CommonHelper.ReturnYear.Replace(" ", "");

                //    string[] Years = Year.Split('-');
                //    Year = Years[0] + "-" + Years[1].Substring(2, 2);

                //    var encodedString = Utility.encoding(Convert.ToString(Constants.UserName) + ',' + Convert.ToString(CommonHelper.CompanyPassword) + ',' + "gstrone" + ',' + GetMonth + ',' + Year);
                //    Process.Start("chrome.exe", "https://services.gst.gov.in/services/login?gstrone," + encodedString);
                //}
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("Error:{0}{1}Source:{2}{3}Error Time:{4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("Update_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }
        private void btnFileWithEVC_Click(object sender, EventArgs e)
        {
            try
            {
                #region FOR DIRECT TO FILE WITH EVC ON GST PORTAL
                if (cmbAuthSign.Items.Count <= 0)
                {
                    BindAuthorizedSignatory();
                }

                if (cmbAuthSign.SelectedIndex <= 0)
                {
                    MessageBox.Show("Please Select Authorised Signatory.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    DialogResult confirmResult = MessageBox.Show("I/We hereby solemnly affirm and declare that the information given herein above is true and correct to the best of my/our knowledge and belief and nothing has been concealed thereform.", "Conformation", MessageBoxButtons.OKCancel);
                    if (confirmResult == DialogResult.OK)
                    {
                        SPQEVCOTP frm = new SPQEVCOTP();
                        frm.Visible = false;
                        var result = frm.ShowDialog();
                        if (result != DialogResult.OK)
                        {
                            SPQEVCOTP objEVCOTP = new SPQEVCOTP();
                            objEVCOTP.Show();
                        }
                    }
                }
                #endregion

                //bool isExtensionInstalled = Utility.chromeExtensionCheck();

                //if (isExtensionInstalled)
                //{
                //    string GetMonth = CommonHelper.GetMonth(CommonHelper.SelectedMonth);
                //    string Year = CommonHelper.ReturnYear.Replace(" ", "");

                //    string[] Years = Year.Split('-');
                //    Year = Years[0] + "-" + Years[1].Substring(2, 2);

                //    var encodedString = Utility.encoding(Convert.ToString(Constants.UserName) + ',' + Convert.ToString(CommonHelper.CompanyPassword) + ',' + "gstrone" + ',' + GetMonth + ',' + Year);
                //    Process.Start("chrome.exe", "https://services.gst.gov.in/services/login?gstrone," + encodedString);
                //}
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("Error:{0}{1}Source:{2}{3}Error Time:{4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("Update_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }
        private void btnCompare_Click(object sender, EventArgs e)
        {
            //MatchData("Match");
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == (Keys.Escape))
            {
                Close();
                return true;
            }
            return base.ProcessCmdKey(ref msg, keyData);
        }

        #region CellFormating CellValueChanged KeyDown Events

        private void dgvMainCellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridViewCell cell = dgvMain.Rows[e.RowIndex].Cells[e.ColumnIndex];
            if (cell.Value.ToString() == "Completed")
            {
                e.CellStyle.ForeColor = Color.Green;
            }
            else if (cell.Value.ToString() == "Not-Completed")
            {
                e.CellStyle.ForeColor = Color.Red;
            }
            else if (cell.Value.ToString() == "Draft")
            {
                e.CellStyle.ForeColor = Color.Blue;
            }
        }

        private void dgv3_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridViewCell cell = dgvMain.Rows[e.RowIndex].Cells[e.ColumnIndex];
            if (cell.Value.ToString() == "Completed")
            {
                e.CellStyle.ForeColor = Color.Green;
            }
            else if (cell.Value.ToString() == "Not-Completed")
            {
                e.CellStyle.ForeColor = Color.Red;
            }
            else if (cell.Value.ToString() == "Draft")
            {
                e.CellStyle.ForeColor = Color.Blue;
            }
        }

        private void dgvaccount_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            dgvaccount.Refresh();
            if (chkCellValue(Convert.ToString(dgvaccount.Rows[e.RowIndex].Cells[e.ColumnIndex].Value).Trim()))
            {
                decimal Cvalue = Convert.ToDecimal(dgvaccount.Rows[e.RowIndex].Cells[e.ColumnIndex].Value);
                if (dgvaccount.Columns[e.ColumnIndex].Name == "Document Count")
                {
                    dgvdiff.Rows[0].Cells["Document Count"].Value = Convert.ToDecimal(dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Document Count"].Value) - Cvalue;
                }
                //else if (dgvaccount.Columns[e.ColumnIndex].Name == "Invoice Value")
                //{
                //    dgvdiff.Rows[0].Cells["Invoice Value"].Value = Convert.ToDecimal(dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Invoice Value"].Value) - Cvalue;
                //}
                else if (dgvaccount.Columns[e.ColumnIndex].Name == "Invoice Taxable Value")
                {
                    dgvdiff.Rows[0].Cells["Invoice Taxable Value"].Value = Convert.ToDecimal(dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Invoice Taxable Value"].Value) - Cvalue;
                }
                else if (dgvaccount.Columns[e.ColumnIndex].Name == "IGST")
                {
                    dgvdiff.Rows[0].Cells["IGST"].Value = Convert.ToDecimal(dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["IGST"].Value) - Cvalue;
                }
                else if (dgvaccount.Columns[e.ColumnIndex].Name == "CGST")
                {
                    dgvdiff.Rows[0].Cells["CGST"].Value = Convert.ToDecimal(dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["CGST"].Value) - Cvalue;
                }
                else if (dgvaccount.Columns[e.ColumnIndex].Name == "SGST")
                {
                    dgvdiff.Rows[0].Cells["SGST"].Value = Convert.ToDecimal(dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["SGST"].Value) - Cvalue;

                }
                else if (dgvaccount.Columns[e.ColumnIndex].Name == "Cess")
                {
                    dgvdiff.Rows[0].Cells["Cess"].Value = Convert.ToDecimal(dgvtotal.Rows[dgvtotal.Rows.Count - 1].Cells["Cess"].Value) - Cvalue;

                }
            }
            else { dgvaccount.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = ""; dgvdiff.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = ""; }
        }

        private void dgvaccount_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Delete)
            {
                #region DELETE SELECTED CELLS
                try
                {
                    // CHECK PRESENT RECORDS IN MAIN GRID
                    if (dgvaccount.Rows.Count > 0)
                    {
                        // DELETE SELECTED CELL IN GRID
                        foreach (DataGridViewCell oneCell in dgvaccount.SelectedCells)
                        {
                            if (oneCell.ColumnIndex != 0 && oneCell.ColumnIndex != 1)
                            {
                                oneCell.Value = "";
                                Application.DoEvents();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                #endregion
            }
        }

        #endregion

        #region Extra Events

        private void dgvaccount_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            this.dgvaccount.ClearSelection();
            this.dgvdiff.ClearSelection();
            //this.dgvMain.ClearSelection();
            this.dgvtotal.ClearSelection();
        }

        //private void dgvdiff_Scroll(object sender, ScrollEventArgs e)
        //{
        //    try
        //    {
        //        // SET TOTAL GRID OFFSET AS PAR MAIN GRID SCROLL
        //        this.dgvMain.HorizontalScrollingOffset = this.dgvdiff.HorizontalScrollingOffset;
        //        this.dgvaccount.HorizontalScrollingOffset = this.dgvdiff.HorizontalScrollingOffset;
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show("Error : " + ex.Message);
        //    }
        //}

        private void dgvaccount_Scroll(object sender, ScrollEventArgs e)
        {
            try
            {
                // SET TOTAL GRID OFFSET AS PAR MAIN GRID SCROLL
                // this.dgvMain.HorizontalScrollingOffset = this.dgvaccount.HorizontalScrollingOffset;
                this.dgvdiff.HorizontalScrollingOffset = this.dgvaccount.HorizontalScrollingOffset;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message);
            }
        }

        #endregion

        #region Class
        public class RootObject
        {
            public string RecordId { get; set; }
            public string ipuser { get; set; }
            public string statecd { get; set; }
            public string txn { get; set; }
            public string AppKey { get; set; }
            public string AuthToken { get; set; }
            public string gstin { get; set; }
            public string GSTINUserName { get; set; }
            public string Datetime { get; set; }
            public string Decipher { get; set; }
            public string SEK { get; set; }
            public string InsertDate { get; set; }
            public string UpdateDate { get; set; }
            public string DeleteDate { get; set; }
            public string IsDeleted { get; set; }
        }

        public class GSPResClass
        {
            public string Message { get; set; }
            public string Result { get; set; }
            public string Status { get; set; }
        }
        #endregion

        private void msImpJson_Click(object sender, EventArgs e)
        {
            try
            {
                //Download Json Data
                OpenFileDialog ofdJson = new OpenFileDialog();

                ofdJson.Title = "Browse Json File";
                ofdJson.CheckFileExists = true;
                ofdJson.CheckPathExists = true;
                ofdJson.DefaultExt = "txt";
                ofdJson.Filter = "Json File|*.json";
                ofdJson.FilterIndex = 2;
                ofdJson.RestoreDirectory = true;
                ofdJson.ReadOnlyChecked = true;
                ofdJson.ShowReadOnly = true;

                if (ofdJson.ShowDialog() == DialogResult.OK)
                {
                    pbGSTR1.Visible = true;

                    StreamReader sr = new StreamReader(ofdJson.FileName);
                    string jsonString = sr.ReadToEnd();

                    JsonImportMethod(jsonString, CommonHelper.SelectedMonth, CommonHelper.ReturnYear);

                    pbGSTR1.Visible = false;
                    MessageBox.Show("Data saved successfully..", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
            finally {

                pbGSTR1.Visible = false;
            }
        }

        public void JsonImportMethod(string jsonString, string strMonth, string ReturnYear)
        {
            if (strMonth == null || strMonth == "") strMonth = CommonHelper.SelectedMonth;
            if (ReturnYear == null || ReturnYear == "") ReturnYear = CommonHelper.ReturnYear;

            string _str = string.Empty;
            int _Result = 0;
            DataTable dt = new DataTable();

            #region first delete old data from database
            string Query = "Delete from SPQR1B2B where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - b2b!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            Query = "Delete from SPQR1B2CL where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - b2cl!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            Query = "Delete from SPQR1B2CS where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - b2cs!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            //Zero Retad - Export
            Query = "Delete from SPQR1ZeroRated where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - Export!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            Query = "Delete from SPQR1CDN where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - CDN!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            Query = "Delete from SPQR1CDNUR where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - CDNUR!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            Query = "Delete from SPQR1NilRated where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - Nil-Rated!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            Query = "Delete from SPQR1GrossAdvance where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - Adv-Rec!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            Query = "Delete from SPQR1NetAdvance where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - Adv-Adj!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            Query = "Delete from SPQR1Document where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - DocIssue!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            Query = "Delete from SPQR1HSN where Fld_Month='" + strMonth + "' AND Fld_FinancialYear = '" + ReturnYear + "'";
            _Result = objGSTR5.IUDData(Query);
            if (_Result != 1)
            {
                MessageBox.Show("System error.\nPlease try after sometime - HSN!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            #endregion

            if (Convert.ToString(jsonString).Trim() != "")
            {
                bool flg = false;
                #region b2b
                flg = b2bEntry(jsonString, strMonth, ReturnYear);
                if (flg == false)
                    _str += "B2b data entry error...\n";
                #endregion

                #region b2cl
                if (flg)
                {
                    flg = b2clEntry(jsonString, strMonth, ReturnYear);
                    if (flg == false)
                        _str += "B2CL data entry error...\n";
                }
                #endregion

                #region b2cs
                if (flg)
                {
                    flg = b2csEntry(jsonString, strMonth, ReturnYear);
                    if (flg == false)
                        _str += "B2CS data entry error...\n";
                }
                #endregion

                #region Zero Retad (Export)
                if (flg)
                {
                    flg = ExpEntry(jsonString, strMonth, ReturnYear);
                    if (flg == false)
                        _str += "Export data entry error...\n";
                }
                #endregion

                #region cdn
                if (flg)
                {
                    flg = cdnEntry(jsonString, strMonth, ReturnYear);
                    if (flg == false)
                        _str += "Cdn data entry error...\n";
                }
                #endregion

                #region cdn-ur
                if (flg)
                {
                    flg = cdnurEntry(jsonString, strMonth, ReturnYear);
                    if (flg == false)
                        _str += "Cdn-ur data entry error...\n";
                }
                #endregion

                #region nil (Adv-Rec)
                flg = nilEntry(jsonString, strMonth, ReturnYear);
                if (flg == false)
                    _str += "Nil-Rated data entry error...\n";
                #endregion

                #region at (Adv-Rec)
                flg = atEntry(jsonString, strMonth, ReturnYear);
                if (flg == false)
                    _str += "Adv-Rec data entry error...\n";
                #endregion

                #region txpd (Adv-Adj)
                flg = txpdEntry(jsonString, strMonth, ReturnYear);
                if (flg == false)
                    _str += "Adv-Adj data entry error...\n";
                #endregion

                #region DocIssue
                if (flg)
                {
                    flg = DocIssueEntry(jsonString, strMonth, ReturnYear);
                    if (flg == false)
                        _str += "DocIssue data entry error...\n";
                }
                #endregion

                #region HSN
                if (flg)
                {
                    flg = HSNEntry(jsonString, strMonth, ReturnYear);
                    if (flg == false)
                        _str += "HSN data entry error...\n";
                }
                #endregion

                #region Amendment
                #region B2BA
                flg = b2baEntry(jsonString);
                if (flg == false)
                    _str += "B2ba data entry error...\n";
                #endregion

                #region B2CLA
                if (flg)
                {
                    flg = b2claEntry(jsonString);
                    if (flg == false)
                        _str += "B2CLA data entry error...\n";
                }
                #endregion

                #region B2CSA
                if (flg)
                {
                    flg = b2csaEntry(jsonString);
                    if (flg == false)
                        _str += "B2CSA data entry error...\n";
                }
                #endregion

                #region EXPA
                if (flg)
                {
                    flg = ExpaEntry(jsonString);
                    if (flg == false)
                        _str += "Exporta data entry error...\n";
                }
                #endregion

                #region CDNRA
                if (flg)
                {
                    flg = cdnaEntry(jsonString);
                    if (flg == false)
                        _str += "Cdna data entry error...\n";
                }
                #endregion

                #region CDNURA
                if (flg)
                {
                    flg = cdnuraEntry(jsonString);
                    if (flg == false)
                        _str += "Cdn-ura data entry error...\n";
                }
                #endregion

                #region ATA
                flg = ataEntry(jsonString);
                if (flg == false)
                    _str += "AdvA-Rec data entry error...\n";
                #endregion

                #region TXPA
                flg = txpdaEntry(jsonString);
                if (flg == false)
                    _str += "Adv-AdjA data entry error...\n";
                #endregion

                #endregion
            }

            if (_str != "")
            {
                Getdata();
                GetGSTR1VsGSTR3B();
                CommonHelper.ErrorList = Convert.ToString(_str);
                SPQErrorList obje = new SPQErrorList();
                obje.ShowDialog();
            }
            else
            {
                Getdata();
                GetGSTR1VsGSTR3B();
            }
        }

        #region Methods for json
        public bool b2bEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                //if (obj != null && obj.b2b != null && obj.b2b.Count > 0)
                //    obj.b2b = obj.b2b.Where(x => x.cfs == "Y").ToList();

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2B

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                //dt.Columns.Add("Fld_ShareHolderName");
                dt.Columns.Add("Fld_CustomerName");
                dt.Columns.Add("Fld_PartyName");
                dt.Columns.Add("Fld_InvoiceNo");
                dt.Columns.Add("Fld_InvoiceDate");
                dt.Columns.Add("Fld_InvoiceValue");
                dt.Columns.Add("Fld_IGSTRate");
                dt.Columns.Add("Fld_InvoiceTaxableVal");
                dt.Columns.Add("Fld_IGSTAmnt");
                dt.Columns.Add("Fld_CGSTAmnt");
                dt.Columns.Add("Fld_SGSTAmnt");
                dt.Columns.Add("Fld_CessAmount");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_IndSupAttac");
                dt.Columns.Add("Fld_InvType");
                dt.Columns.Add("Fld_GSTINofEcom");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.b2b != null)
                {
                    for (int i = 0; i < obj.b2b.Count; i++)
                    {
                        for (int j = 0; j < obj.b2b[i].inv.Count; j++)
                        {
                            for (int k = 0; k < obj.b2b[i].inv[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                //dt.Rows[dt.Rows.Count - 1]["Fld_ShareHolderName"] = Convert.ToString(obj.b2b[i].ctin);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CustomerName"] = Convert.ToString(obj.b2b[i].ctin);
                                //dt.Rows[dt.Rows.Count - 1]["Fld_Submitted"] = (Convert.ToString(obj.b2b[i].cfs) == "Y" ? "Yes" : "No");
                                #endregion

                                #region invoice details
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceNo"] = Convert.ToString(obj.b2b[i].inv[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceDate"] = Convert.ToString(obj.b2b[i].inv[j].idt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceValue"] = Convert.ToString(obj.b2b[i].inv[j].val);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvType"] = GetVal(Convert.ToString(obj.b2b[i].inv[j].inv_typ));
                                if (Convert.ToString(obj.b2b[i].inv[j].pos) != null)
                                    dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.b2b[i].inv[j].pos));
                                dt.Rows[dt.Rows.Count - 1]["Fld_IndSupAttac"] = (Convert.ToString(obj.b2b[i].inv[j].rchrg) == "Y" ? "Yes" : "No");
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTRate"] = Convert.ToString(obj.b2b[i].inv[j].itms[k].itm_det.rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceTaxableVal"] = Convert.ToString(obj.b2b[i].inv[j].itms[k].itm_det.txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmnt"] = Convert.ToString(obj.b2b[i].inv[j].itms[k].itm_det.iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmnt"] = Convert.ToString(obj.b2b[i].inv[j].itms[k].itm_det.camt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmnt"] = Convert.ToString(obj.b2b[i].inv[j].itms[k].itm_det.samt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CessAmount"] = Convert.ToString(obj.b2b[i].inv[j].itms[k].itm_det.csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    //dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    #region Invoice no
                    //var result = (from row in dt.AsEnumerable()
                    //              where row.Field<string>("Fld_InvoiceNo") != "" && row.Field<string>("Fld_ShareHolderName") != ""
                    //              group row by new { colGSTIN = row.Field<string>("Fld_ShareHolderName"), colInvNo = row.Field<string>("Fld_InvoiceNo") } into grp
                    //              select new
                    //              {
                    //                  colGSTIN = grp.Key.colGSTIN,
                    //                  colInvNo = grp.Key.colInvNo,
                    //              }).ToList();

                    var result = (from row in dt.AsEnumerable()
                                  where row.Field<string>("Fld_InvoiceNo") != "" && row.Field<string>("Fld_CustomerName") != ""
                                  group row by new { colGSTIN = row.Field<string>("Fld_CustomerName"), colInvNo = row.Field<string>("Fld_InvoiceNo") } into grp
                                  select new
                                  {
                                      colGSTIN = grp.Key.colGSTIN,
                                      colInvNo = grp.Key.colInvNo,
                                  }).ToList();

                    if (result != null && result.Count > 0)
                        dr["Fld_InvoiceNo"] = result.Count;
                    else
                        dr["Fld_InvoiceNo"] = 0;
                    #endregion

                    #region Total Invoice Value (Unique by invoice no)
                    //dr["Fld_InvoiceValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_InvoiceValue"] != null).Sum(x => x["Fld_InvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_InvoiceValue"])).ToString();

                    DataTable dtNew = new DataTable();
                    dtNew = dt.DefaultView.ToTable(true, "Fld_InvoiceNo", "Fld_InvoiceValue");
                    dr["Fld_InvoiceValue"] = dtNew.AsEnumerable()
                    .Sum(r => r.Field<string>("Fld_InvoiceValue") == "" ? 0 : Convert.ToDecimal(r.Field<string>("Fld_InvoiceValue")))
                    .ToString();
                    #endregion

                    dr["Fld_InvoiceTaxableVal"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_InvoiceTaxableVal"] != null).Sum(x => x["Fld_InvoiceTaxableVal"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_InvoiceTaxableVal"])).ToString();
                    dr["Fld_IGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmnt"] != null).Sum(x => x["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmnt"])).ToString();
                    dr["Fld_CGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmnt"] != null).Sum(x => x["Fld_CGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmnt"])).ToString();
                    dr["Fld_SGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmnt"] != null).Sum(x => x["Fld_SGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmnt"])).ToString();
                    dr["Fld_CessAmount"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CessAmount"] != null).Sum(x => x["Fld_CessAmount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CessAmount"])).ToString();

                    //dr["Fld_POS"] = "Completed";
                    //dr["Fld_ReverseCharge"] = "False";
                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonB2B(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool b2clEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2CL

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_Party");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_InvoiceNo");
                dt.Columns.Add("Fld_InvoiceDate");
                dt.Columns.Add("Fld_InvoiceValue");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxableValue");
                dt.Columns.Add("Fld_IGST");
                dt.Columns.Add("Fld_Cess");
                dt.Columns.Add("Fld_GSTINEComm");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.b2cl != null)
                {
                    for (int i = 0; i < obj.b2cl.Count; i++)
                    {

                        for (int j = 0; j < obj.b2cl[i].inv.Count; j++)
                        {
                            for (int k = 0; k < obj.b2cl[i].inv[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                if (Convert.ToString(obj.b2cl[i].pos) != null)
                                    dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.b2cl[i].pos));
                                #endregion

                                #region invoice details
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceNo"] = Convert.ToString(obj.b2cl[i].inv[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceDate"] = Convert.ToString(obj.b2cl[i].inv[j].idt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceValue"] = Convert.ToString(obj.b2cl[i].inv[j].val);
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.b2cl[i].inv[j].itms[k].itm_det.rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_TaxableValue"] = Convert.ToString(obj.b2cl[i].inv[j].itms[k].itm_det.txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGST"] = Convert.ToString(obj.b2cl[i].inv[j].itms[k].itm_det.iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_Cess"] = Convert.ToString(obj.b2cl[i].inv[j].itms[k].itm_det.csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    #region Total Invoice Value (Unique by invoice no)
                    dr["Fld_InvoiceValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_InvoiceValue"] != null).Sum(x => x["Fld_InvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_InvoiceValue"])).ToString();

                    DataTable dtNew = new DataTable();
                    dtNew = dt.DefaultView.ToTable(true, "Fld_InvoiceNo", "Fld_InvoiceValue");
                    dr["Fld_InvoiceValue"] = dtNew.AsEnumerable()
                    .Sum(r => r.Field<string>("Fld_InvoiceValue") == "" ? 0 : Convert.ToDecimal(r.Field<string>("Fld_InvoiceValue")))
                    .ToString();
                    #endregion

                    dr["Fld_TaxableValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TaxableValue"] != null).Sum(x => x["Fld_TaxableValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TaxableValue"])).ToString();
                    dr["Fld_IGST"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGST"] != null).Sum(x => x["Fld_IGST"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGST"])).ToString();
                    dr["Fld_Cess"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Cess"] != null).Sum(x => x["Fld_Cess"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Cess"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonB2CL(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool b2csEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                //if (obj != null && obj.b2b != null && obj.b2b.Count > 0)
                //    obj.b2b = obj.b2b.Where(x => x.cfs == "Y").ToList();

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2CS

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_SupplyType");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxableValue");
                dt.Columns.Add("Fld_IGST");
                dt.Columns.Add("Fld_CGST");
                dt.Columns.Add("Fld_SGST");
                dt.Columns.Add("Fld_Cess");
                dt.Columns.Add("Fld_GSTINofEcom");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.b2cs != null)
                {
                    for (int i = 0; i < obj.b2cs.Count; i++)
                    {
                        dt.Rows.Add();

                        #region root element
                        dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = GetSuppplyTypeVal(Convert.ToString(obj.b2cs[i].sply_ty));
                        if (Convert.ToString(obj.b2cs[i].pos) != null)
                            dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.b2cs[i].pos));
                        dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.b2cs[i].rt);
                        dt.Rows[dt.Rows.Count - 1]["Fld_TaxableValue"] = Convert.ToString(obj.b2cs[i].txval);
                        dt.Rows[dt.Rows.Count - 1]["Fld_IGST"] = Convert.ToString(obj.b2cs[i].iamt);
                        dt.Rows[dt.Rows.Count - 1]["Fld_CGST"] = Convert.ToString(obj.b2cs[i].camt);
                        dt.Rows[dt.Rows.Count - 1]["Fld_SGST"] = Convert.ToString(obj.b2cs[i].samt);
                        dt.Rows[dt.Rows.Count - 1]["Fld_Cess"] = Convert.ToString(obj.b2cs[i].csamt);
                        #endregion
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    #region Rate Count
                    var result2 = (from row in dt.AsEnumerable()
                                   where row.Field<string>("Fld_POS") != "" && row.Field<string>("Fld_Rate") != ""
                                   group row by new { Fld_POS = row.Field<string>("Fld_POS"), Fld_Rate = row.Field<string>("Fld_Rate") } into grp
                                   select new
                                   {
                                       Fld_POS = grp.Key.Fld_POS,
                                       Fld_Rate = grp.Key.Fld_Rate
                                   }).ToList();

                    if (result2.Count != null && result2.Count > 0)
                        dr["Fld_Rate"] = result2.Count;
                    else
                        dr["Fld_Rate"] = 0;
                    #endregion

                    //dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();                    

                    dr["Fld_TaxableValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TaxableValue"] != null).Sum(x => x["Fld_TaxableValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TaxableValue"])).ToString();
                    dr["Fld_IGST"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGST"] != null).Sum(x => x["Fld_IGST"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGST"])).ToString();
                    dr["Fld_CGST"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGST"] != null).Sum(x => x["Fld_CGST"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGST"])).ToString();
                    dr["Fld_SGST"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGST"] != null).Sum(x => x["Fld_SGST"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGST"])).ToString();
                    dr["Fld_Cess"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Cess"] != null).Sum(x => x["Fld_Cess"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Cess"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonB2CS(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool ExpEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For Export

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_Type");
                dt.Columns.Add("Fld_party");
                dt.Columns.Add("Fld_InvoiceNo");
                dt.Columns.Add("Fld_InvoiceDate");
                dt.Columns.Add("Fld_InvoiceValue");
                dt.Columns.Add("Fld_PortCode");
                dt.Columns.Add("Fld_Shipingbill");
                dt.Columns.Add("Fld_Billdate");
                dt.Columns.Add("Fld_IGSTRate");
                dt.Columns.Add("Fld_IGSTInvoiceTaxableVal");
                dt.Columns.Add("Fld_IGSTAmnt");
                dt.Columns.Add("Fld_CESS");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.exp != null)
                {
                    for (int i = 0; i < obj.exp.Count; i++)
                    {
                        for (int j = 0; j < obj.exp[i].inv.Count; j++)
                        {
                            for (int k = 0; k < obj.exp[i].inv[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                if (Convert.ToString(obj.exp[i].exp_typ) == "WPAY")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_Type"] = "Export with payment of GST";
                                else if (Convert.ToString(obj.exp[i].exp_typ) == "WOPAY")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_Type"] = "Export without payment of GST";
                                #endregion

                                #region invoice details
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceNo"] = Convert.ToString(obj.exp[i].inv[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceDate"] = Convert.ToString(obj.exp[i].inv[j].idt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceValue"] = Convert.ToString(obj.exp[i].inv[j].val);
                                dt.Rows[dt.Rows.Count - 1]["Fld_PortCode"] = Convert.ToString(obj.exp[i].inv[j].sbpcode);
                                dt.Rows[dt.Rows.Count - 1]["Fld_Shipingbill"] = Convert.ToString(obj.exp[i].inv[j].sbnum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_Billdate"] = Convert.ToString(obj.exp[i].inv[j].sbdt);
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTRate"] = Convert.ToString(obj.exp[i].inv[j].itms[k].rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTInvoiceTaxableVal"] = Convert.ToString(obj.exp[i].inv[j].itms[k].txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmnt"] = Convert.ToString(obj.exp[i].inv[j].itms[k].iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CESS"] = Convert.ToString(obj.exp[i].inv[j].itms[k].csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    #region Total Invoice Value (Unique by invoice no)
                    dr["Fld_InvoiceValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_InvoiceValue"] != null).Sum(x => x["Fld_InvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_InvoiceValue"])).ToString();

                    DataTable dtNew = new DataTable();
                    dtNew = dt.DefaultView.ToTable(true, "Fld_InvoiceNo", "Fld_InvoiceValue");
                    dr["Fld_InvoiceValue"] = dtNew.AsEnumerable()
                    .Sum(r => r.Field<string>("Fld_InvoiceValue") == "" ? 0 : Convert.ToDecimal(r.Field<string>("Fld_InvoiceValue")))
                    .ToString();
                    #endregion

                    dr["Fld_IGSTInvoiceTaxableVal"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTInvoiceTaxableVal"] != null).Sum(x => x["Fld_IGSTInvoiceTaxableVal"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTInvoiceTaxableVal"])).ToString();
                    dr["Fld_IGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmnt"] != null).Sum(x => x["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmnt"])).ToString();
                    dr["Fld_CESS"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CESS"] != null).Sum(x => x["Fld_CESS"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CESS"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonExp(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool cdnEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For CDN
                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_GSTIN");
                dt.Columns.Add("Fld_PartyName");
                dt.Columns.Add("Fld_TypeOfNote");
                dt.Columns.Add("Fld_PreGST");
                dt.Columns.Add("Fld_DbtCrdtNoteNo");
                dt.Columns.Add("Fld_DbtCrdtNoteDate");
                dt.Columns.Add("Fld_OrgInvoiceNo");
                dt.Columns.Add("Fld_OrginvoiceDate");
                dt.Columns.Add("Fld_OrgInvoiceValue");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_Taxable");
                dt.Columns.Add("Fld_IGSTAmnt");
                dt.Columns.Add("Fld_CGSTAmnt");
                dt.Columns.Add("Fld_SGSTAmnt");
                dt.Columns.Add("Fld_CessAmnt");
                dt.Columns.Add("Fld_PlaceOfSupply");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.cdnr != null)
                {
                    for (int i = 0; i < obj.cdnr.Count; i++)
                    {
                        for (int j = 0; j < obj.cdnr[i].nt.Count; j++)
                        {
                            for (int k = 0; k < obj.cdnr[i].nt[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                dt.Rows[dt.Rows.Count - 1]["Fld_GSTIN"] = Convert.ToString(obj.cdnr[i].ctin);
                                #endregion

                                #region invoice details
                                if (Convert.ToString(obj.cdnr[i].nt[j].ntty) == "C")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_TypeOfNote"] = "Credit Note";
                                else if (Convert.ToString(obj.cdnr[i].nt[j].ntty) == "D")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_TypeOfNote"] = "Debit Note";
                                else if (Convert.ToString(obj.cdnr[i].nt[j].ntty) == "R")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_TypeOfNote"] = "Refund Voucher";

                                dt.Rows[dt.Rows.Count - 1]["Fld_PreGST"] = (Convert.ToString(obj.cdnr[i].nt[j].p_gst) == "Y" ? "Yes" : "No");
                                dt.Rows[dt.Rows.Count - 1]["Fld_DbtCrdtNoteNo"] = Convert.ToString(obj.cdnr[i].nt[j].nt_num);
                                dt.Rows[dt.Rows.Count - 1]["Fld_DbtCrdtNoteDate"] = Convert.ToString(obj.cdnr[i].nt[j].nt_dt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceNo"] = Convert.ToString(obj.cdnr[i].nt[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrginvoiceDate"] = Convert.ToString(obj.cdnr[i].nt[j].idt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceValue"] = Convert.ToString(obj.cdnr[i].nt[j].val);
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.cdnr[i].nt[j].itms[k].itm_det.rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_Taxable"] = Convert.ToString(obj.cdnr[i].nt[j].itms[k].itm_det.txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmnt"] = Convert.ToString(obj.cdnr[i].nt[j].itms[k].itm_det.iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmnt"] = Convert.ToString(obj.cdnr[i].nt[j].itms[k].itm_det.camt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmnt"] = Convert.ToString(obj.cdnr[i].nt[j].itms[k].itm_det.samt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CessAmnt"] = Convert.ToString(obj.cdnr[i].nt[j].itms[k].itm_det.csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    #region CDN no
                    var result = (from row in dt.AsEnumerable()
                                  where row.Field<string>("Fld_DbtCrdtNoteNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                                  group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_DbtCrdtNoteNo") } into grp
                                  select new
                                  {
                                      colGSTIN = grp.Key.colGSTIN,
                                      colInvNo = grp.Key.colInvNo,
                                  }).ToList();

                    if (result != null && result.Count > 0)
                        dr["Fld_DbtCrdtNoteNo"] = result.Count;
                    else
                        dr["Fld_DbtCrdtNoteNo"] = 0;
                    #endregion

                    #region Original Invoice No
                    result = (from row in dt.AsEnumerable()
                              where row.Field<string>("Fld_OrgInvoiceNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                              group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_OrgInvoiceNo") } into grp
                              select new
                              {
                                  colGSTIN = grp.Key.colGSTIN,
                                  colInvNo = grp.Key.colInvNo,
                              }).ToList();

                    if (result != null && result.Count > 0)
                        dr["Fld_OrgInvoiceNo"] = result.Count;
                    else
                        dr["Fld_OrgInvoiceNo"] = 0;
                    #endregion

                    #region Old
                    //dr["Fld_OrgInvoiceValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_OrgInvoiceValue"] != null).Sum(x => x["Fld_OrgInvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_OrgInvoiceValue"])).ToString();
                    //dr["Fld_Taxable"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Taxable"] != null).Sum(x => x["Fld_Taxable"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Taxable"])).ToString();
                    //dr["Fld_IGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmnt"] != null).Sum(x => x["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmnt"])).ToString();
                    //dr["Fld_CGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmnt"] != null).Sum(x => x["Fld_CGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmnt"])).ToString();
                    //dr["Fld_SGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmnt"] != null).Sum(x => x["Fld_SGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmnt"])).ToString();
                    //dr["Fld_CessAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CessAmnt"] != null).Sum(x => x["Fld_CessAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CessAmnt"])).ToString();
                    #endregion

                    #region New
                    DataTable dtNew = new DataTable();
                    dtNew = dt.AsEnumerable()
                        .GroupBy(row => new
                        {
                            Member1 = row.Field<string>("Fld_TypeOfNote")
                        })
                        .Select(g =>
                        {
                            var row = dt.NewRow();
                            row["Fld_TypeOfNote"] = g.Key.Member1;
                            row["Fld_OrgInvoiceValue"] = g.Sum(r => r["Fld_OrgInvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_OrgInvoiceValue"]));
                            row["Fld_Taxable"] = g.Sum(r => r["Fld_Taxable"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_Taxable"]));
                            row["Fld_IGSTAmnt"] = g.Sum(r => r["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_IGSTAmnt"]));
                            row["Fld_CGSTAmnt"] = g.Sum(r => r["Fld_CGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CGSTAmnt"]));
                            row["Fld_SGSTAmnt"] = g.Sum(r => r["Fld_SGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_SGSTAmnt"]));
                            row["Fld_CessAmnt"] = g.Sum(r => r["Fld_CessAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CessAmnt"]));
                            return row;
                        }).CopyToDataTable();

                    decimal invval = 0, tax = 0, igst = 0, cgst = 0, sgst = 0, cess = 0;
                    foreach (DataRow drNew in dtNew.Rows)
                    {
                        if (Convert.ToString(drNew["Fld_TypeOfNote"]) == "Credit Note")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_OrgInvoiceValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_OrgInvoiceValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_Taxable"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_Taxable"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmnt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmnt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmnt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CessAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CessAmnt"]));
                        }
                        else if (Convert.ToString(drNew["Fld_TypeOfNote"]) == "Refund Voucher")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_OrgInvoiceValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_OrgInvoiceValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_Taxable"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_Taxable"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmnt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmnt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmnt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CessAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CessAmnt"]));
                        }
                        else
                        {
                            invval = invval + (Convert.ToString(drNew["Fld_OrgInvoiceValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_OrgInvoiceValue"]));
                            tax = tax + (Convert.ToString(drNew["Fld_Taxable"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_Taxable"]));
                            igst = igst + (Convert.ToString(drNew["Fld_IGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmnt"]));
                            cgst = cgst + (Convert.ToString(drNew["Fld_CGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmnt"]));
                            sgst = sgst + (Convert.ToString(drNew["Fld_SGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmnt"]));
                            cess = cess + (Convert.ToString(drNew["Fld_CessAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CessAmnt"]));
                        }
                    }

                    dr["Fld_OrgInvoiceValue"] = invval;
                    dr["Fld_Taxable"] = tax;
                    dr["Fld_IGSTAmnt"] = igst;
                    dr["Fld_CGSTAmnt"] = cgst;
                    dr["Fld_SGSTAmnt"] = sgst;
                    dr["Fld_CessAmnt"] = cess;
                    #endregion

                    //dr["Fld_POS"] = "Completed";
                    //dr["Fld_ReverseCharge"] = "False";
                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonCDN(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool cdnurEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For CDN
                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_PartyName");
                dt.Columns.Add("Fld_SupplyType");
                dt.Columns.Add("Fld_TypeOfNote");
                dt.Columns.Add("Fld_PreGST");
                dt.Columns.Add("Fld_DbtCrdtNoteNo");
                dt.Columns.Add("Fld_DbtCrdtNoteDate");
                dt.Columns.Add("Fld_OrgInvoiceNo");
                dt.Columns.Add("Fld_OrginvoiceDate");
                dt.Columns.Add("Fld_OrgInvoiceValue");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_Taxable");
                dt.Columns.Add("Fld_IGSTAmnt");
                dt.Columns.Add("Fld_CGSTAmnt");
                dt.Columns.Add("Fld_SGSTAmnt");
                dt.Columns.Add("Fld_CessAmnt");
                dt.Columns.Add("Fld_PlaceOfSupply");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.cdnur != null)
                {
                    for (int i = 0; i < obj.cdnur.Count; i++)
                    {
                        for (int j = 0; j < obj.cdnur[i].itms.Count; j++)
                        {
                            dt.Rows.Add();

                            #region root element
                            if (Convert.ToString(obj.cdnur[i].typ) == "EXPWP")
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = "Export with payment of GST";
                            else if (Convert.ToString(obj.cdnur[i].typ) == "EXPWOP")
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = "Export without payment of GST";
                            else if (Convert.ToString(obj.cdnur[i].typ) == "B2CL")
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = "B2C Large";

                            if (Convert.ToString(obj.cdnur[i].ntty) == "C")
                                dt.Rows[dt.Rows.Count - 1]["Fld_TypeOfNote"] = "Credit Note";
                            else if (Convert.ToString(obj.cdnur[i].ntty) == "D")
                                dt.Rows[dt.Rows.Count - 1]["Fld_TypeOfNote"] = "Debit Note";
                            else if (Convert.ToString(obj.cdnur[i].ntty) == "R")
                                dt.Rows[dt.Rows.Count - 1]["Fld_TypeOfNote"] = "Refund Voucher";

                            dt.Rows[dt.Rows.Count - 1]["Fld_PreGST"] = (Convert.ToString(obj.cdnur[i].p_gst) == "Y" ? "Yes" : "No");
                            dt.Rows[dt.Rows.Count - 1]["Fld_DbtCrdtNoteNo"] = Convert.ToString(obj.cdnur[i].nt_num);
                            dt.Rows[dt.Rows.Count - 1]["Fld_DbtCrdtNoteDate"] = Convert.ToString(obj.cdnur[i].nt_dt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceNo"] = Convert.ToString(obj.cdnur[i].inum);
                            dt.Rows[dt.Rows.Count - 1]["Fld_OrginvoiceDate"] = Convert.ToString(obj.cdnur[i].idt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceValue"] = Convert.ToString(obj.cdnur[i].val);
                            #endregion

                            #region item details
                            dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.cdnur[i].itms[j].itm_det.rt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_Taxable"] = Convert.ToString(obj.cdnur[i].itms[j].itm_det.txval);
                            dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmnt"] = Convert.ToString(obj.cdnur[i].itms[j].itm_det.iamt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmnt"] = Convert.ToString(obj.cdnur[i].itms[j].itm_det.camt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmnt"] = Convert.ToString(obj.cdnur[i].itms[j].itm_det.samt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CessAmnt"] = Convert.ToString(obj.cdnur[i].itms[j].itm_det.csamt);
                            #endregion

                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    //#region CDN no
                    //var result = (from row in dt.AsEnumerable()
                    //              where row.Field<string>("Fld_DbtCrdtNoteNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                    //              group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_DbtCrdtNoteNo") } into grp
                    //              select new
                    //              {
                    //                  colGSTIN = grp.Key.colGSTIN,
                    //                  colInvNo = grp.Key.colInvNo,
                    //              }).ToList();

                    //if (result != null && result.Count > 0)
                    //    dr["Fld_DbtCrdtNoteNo"] = result.Count;
                    //else
                    //    dr["Fld_DbtCrdtNoteNo"] = 0;
                    //#endregion

                    //#region Original Invoice No
                    //result = (from row in dt.AsEnumerable()
                    //          where row.Field<string>("Fld_OrgInvoiceNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                    //          group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_OrgInvoiceNo") } into grp
                    //          select new
                    //          {
                    //              colGSTIN = grp.Key.colGSTIN,
                    //              colInvNo = grp.Key.colInvNo,
                    //          }).ToList();

                    //if (result != null && result.Count > 0)
                    //    dr["Fld_OrgInvoiceNo"] = result.Count;
                    //else
                    //    dr["Fld_OrgInvoiceNo"] = 0;
                    //#endregion

                    dr["Fld_DbtCrdtNoteNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_DbtCrdtNoteNo"]).Trim() != "").GroupBy(x => x["Fld_DbtCrdtNoteNo"]).Select(x => x.First()).Distinct().Count();

                    dr["Fld_OrgInvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_OrgInvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_OrgInvoiceNo"]).Select(x => x.First()).Distinct().Count();


                    #region Old
                    //dr["Fld_OrgInvoiceValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_OrgInvoiceValue"] != null).Sum(x => x["Fld_OrgInvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_OrgInvoiceValue"])).ToString();
                    //dr["Fld_Taxable"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Taxable"] != null).Sum(x => x["Fld_Taxable"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Taxable"])).ToString();
                    //dr["Fld_IGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmnt"] != null).Sum(x => x["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmnt"])).ToString();
                    //dr["Fld_CGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmnt"] != null).Sum(x => x["Fld_CGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmnt"])).ToString();
                    //dr["Fld_SGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmnt"] != null).Sum(x => x["Fld_SGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmnt"])).ToString();
                    //dr["Fld_CessAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CessAmnt"] != null).Sum(x => x["Fld_CessAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CessAmnt"])).ToString();
                    #endregion

                    #region New
                    DataTable dtNew = new DataTable();
                    dtNew = dt.AsEnumerable()
                        .GroupBy(row => new
                        {
                            Member1 = row.Field<string>("Fld_TypeOfNote")
                        })
                        .Select(g =>
                        {
                            var row = dt.NewRow();
                            row["Fld_TypeOfNote"] = g.Key.Member1;
                            row["Fld_OrgInvoiceValue"] = g.Sum(r => r["Fld_OrgInvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_OrgInvoiceValue"]));
                            row["Fld_Taxable"] = g.Sum(r => r["Fld_Taxable"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_Taxable"]));
                            row["Fld_IGSTAmnt"] = g.Sum(r => r["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_IGSTAmnt"]));
                            row["Fld_CGSTAmnt"] = g.Sum(r => r["Fld_CGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CGSTAmnt"]));
                            row["Fld_SGSTAmnt"] = g.Sum(r => r["Fld_SGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_SGSTAmnt"]));
                            row["Fld_CessAmnt"] = g.Sum(r => r["Fld_CessAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CessAmnt"]));
                            return row;
                        }).CopyToDataTable();

                    decimal invval = 0, tax = 0, igst = 0, cgst = 0, sgst = 0, cess = 0;
                    foreach (DataRow drNew in dtNew.Rows)
                    {
                        if (Convert.ToString(drNew["Fld_TypeOfNote"]) == "Credit Note")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_OrgInvoiceValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_OrgInvoiceValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_Taxable"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_Taxable"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmnt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmnt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmnt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CessAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CessAmnt"]));
                        }
                        else if (Convert.ToString(drNew["Fld_TypeOfNote"]) == "Refund Voucher")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_OrgInvoiceValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_OrgInvoiceValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_Taxable"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_Taxable"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmnt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmnt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmnt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CessAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CessAmnt"]));
                        }
                        else
                        {
                            invval = invval + (Convert.ToString(drNew["Fld_OrgInvoiceValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_OrgInvoiceValue"]));
                            tax = tax + (Convert.ToString(drNew["Fld_Taxable"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_Taxable"]));
                            igst = igst + (Convert.ToString(drNew["Fld_IGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmnt"]));
                            cgst = cgst + (Convert.ToString(drNew["Fld_CGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmnt"]));
                            sgst = sgst + (Convert.ToString(drNew["Fld_SGSTAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmnt"]));
                            cess = cess + (Convert.ToString(drNew["Fld_CessAmnt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CessAmnt"]));
                        }
                    }

                    dr["Fld_OrgInvoiceValue"] = invval;
                    dr["Fld_Taxable"] = tax;
                    dr["Fld_IGSTAmnt"] = igst;
                    dr["Fld_CGSTAmnt"] = cgst;
                    dr["Fld_SGSTAmnt"] = sgst;
                    dr["Fld_CessAmnt"] = cess;
                    #endregion

                    //dr["Fld_POS"] = "Completed";
                    //dr["Fld_ReverseCharge"] = "False";
                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonCDNUR(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool nilEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                //if (obj != null && obj.b2b != null && obj.b2b.Count > 0)
                //    obj.b2b = obj.b2b.Where(x => x.cfs == "Y").ToList();

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For nil

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_Description");
                dt.Columns.Add("Fld_NilRatedSupply");
                dt.Columns.Add("Fld_Exempted");
                dt.Columns.Add("Fld_NonGSTSupplies");
                dt.Columns.Add("Fld_FileStatus");

                dt.Rows.Add("", "Inter-State supplies to registered persons", "", "", "", "");
                dt.Rows.Add("", "Intra-State supplies to registered persons", "", "", "", "");
                dt.Rows.Add("", "Inter-State supplies to unregistered persons", "", "", "", "");
                dt.Rows.Add("", "Intra-State supplies to unregistered persons", "", "", "", "");

                if (obj != null && obj.nil != null)
                {
                    for (int i = 0; i < obj.nil.inv.Count; i++)
                    {
                        int j = -1;

                        if (obj.nil.inv[i].sply_ty == "INTRB2B")
                            j = 0;
                        else if (obj.nil.inv[i].sply_ty == "INTRAB2B")
                            j = 1;
                        else if (obj.nil.inv[i].sply_ty == "INTRB2C")
                            j = 2;
                        else if (obj.nil.inv[i].sply_ty == "INTRAB2C")
                            j = 3;

                        #region item details
                        dt.Rows[j]["Fld_NilRatedSupply"] = Convert.ToString(obj.nil.inv[i].nil_amt);
                        dt.Rows[j]["Fld_Exempted"] = Convert.ToString(obj.nil.inv[i].expt_amt);
                        dt.Rows[j]["Fld_NonGSTSupplies"] = Convert.ToString(obj.nil.inv[i].ngsup_amt);
                        #endregion

                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    int _Result = objGSTR5.GSTR1BulkEntryJsonNIL(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool atEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                //if (obj != null && obj.b2b != null && obj.b2b.Count > 0)
                //    obj.b2b = obj.b2b.Where(x => x.cfs == "Y").ToList();

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For at

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_GSTIN");
                dt.Columns.Add("Fld_Name");
                dt.Columns.Add("Fld_ARNNo");
                dt.Columns.Add("Fld_ARNDate");
                dt.Columns.Add("Fld_GrossAdvRcv");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_IGSTAmnt");
                dt.Columns.Add("Fld_CGSTAmnt");
                dt.Columns.Add("Fld_SGSTAmnt");
                dt.Columns.Add("Fld_CessAmount");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.at != null)
                {
                    for (int i = 0; i < obj.at.Count; i++)
                    {
                        for (int j = 0; j < obj.at[i].itms.Count; j++)
                        {
                            dt.Rows.Add();

                            #region root element
                            if (Convert.ToString(obj.at[i].pos) != null)
                                dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.at[i].pos));
                            #endregion

                            #region item details
                            dt.Rows[dt.Rows.Count - 1]["Fld_GrossAdvRcv"] = Convert.ToString(obj.at[i].itms[j].ad_amt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.at[i].itms[j].rt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmnt"] = Convert.ToString(obj.at[i].itms[j].iamt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmnt"] = Convert.ToString(obj.at[i].itms[j].camt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmnt"] = Convert.ToString(obj.at[i].itms[j].samt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CessAmount"] = Convert.ToString(obj.at[i].itms[j].csamt);
                            #endregion

                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    #region POS Count
                    var result2 = (from row in dt.AsEnumerable()
                                   where row.Field<string>("Fld_POS") != ""
                                   group row by new { Fld_POS = row.Field<string>("Fld_POS") } into grp
                                   select new
                                   {
                                       Fld_POS = grp.Key.Fld_POS,
                                   }).ToList();

                    if (result2.Count != null && result2.Count > 0)
                        dr["Fld_POS"] = result2.Count;
                    else
                        dr["Fld_POS"] = 0;
                    #endregion

                    dr["Fld_ARNNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_ARNNo"]).Trim() != "").GroupBy(x => x["Fld_ARNNo"]).Select(x => x.First()).Distinct().Count();
                    dr["Fld_GrossAdvRcv"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_GrossAdvRcv"] != null).Sum(x => x["Fld_GrossAdvRcv"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_GrossAdvRcv"])).ToString();
                    dr["Fld_IGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmnt"] != null).Sum(x => x["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmnt"])).ToString();
                    dr["Fld_CGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmnt"] != null).Sum(x => x["Fld_CGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmnt"])).ToString();
                    dr["Fld_SGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmnt"] != null).Sum(x => x["Fld_SGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmnt"])).ToString();
                    dr["Fld_CessAmount"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CessAmount"] != null).Sum(x => x["Fld_CessAmount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CessAmount"])).ToString();

                    //dr["Fld_POS"] = "Completed";
                    //dr["Fld_ReverseCharge"] = "False";
                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonAT(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool txpdEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                //if (obj != null && obj.b2b != null && obj.b2b.Count > 0)
                //    obj.b2b = obj.b2b.Where(x => x.cfs == "Y").ToList();

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2B

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_GSTIN");
                dt.Columns.Add("Fld_Name");
                dt.Columns.Add("Fld_InvoiceNo");
                dt.Columns.Add("Fld_InvoiceDate");
                dt.Columns.Add("Fld_ARNNo");
                dt.Columns.Add("Fld_ARNDate");
                dt.Columns.Add("Fld_Advadj");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_IGSTAmnt");
                dt.Columns.Add("Fld_CGSTAmnt");
                dt.Columns.Add("Fld_SGSTAmnt");
                dt.Columns.Add("Fld_CessAmount");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.txpd != null)
                {
                    for (int i = 0; i < obj.txpd.Count; i++)
                    {
                        for (int j = 0; j < obj.txpd[i].itms.Count; j++)
                        {
                            dt.Rows.Add();

                            #region root element
                            if (Convert.ToString(obj.txpd[i].pos) != null)
                                dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.txpd[i].pos));
                            #endregion

                            #region item details
                            dt.Rows[dt.Rows.Count - 1]["Fld_Advadj"] = Convert.ToString(obj.txpd[i].itms[j].ad_amt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.txpd[i].itms[j].rt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmnt"] = Convert.ToString(obj.txpd[i].itms[j].iamt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmnt"] = Convert.ToString(obj.txpd[i].itms[j].camt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmnt"] = Convert.ToString(obj.txpd[i].itms[j].samt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CessAmount"] = Convert.ToString(obj.txpd[i].itms[j].csamt);
                            #endregion

                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    #region POS Count
                    var result2 = (from row in dt.AsEnumerable()
                                   where row.Field<string>("Fld_POS") != ""
                                   group row by new { Fld_POS = row.Field<string>("Fld_POS") } into grp
                                   select new
                                   {
                                       Fld_POS = grp.Key.Fld_POS,
                                   }).ToList();

                    if (result2.Count != null && result2.Count > 0)
                        dr["Fld_POS"] = result2.Count;
                    else
                        dr["Fld_POS"] = 0;
                    #endregion

                    dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();
                    dr["Fld_Advadj"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Advadj"] != null).Sum(x => x["Fld_Advadj"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Advadj"])).ToString();
                    dr["Fld_IGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmnt"] != null).Sum(x => x["Fld_IGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmnt"])).ToString();
                    dr["Fld_CGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmnt"] != null).Sum(x => x["Fld_CGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmnt"])).ToString();
                    dr["Fld_SGSTAmnt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmnt"] != null).Sum(x => x["Fld_SGSTAmnt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmnt"])).ToString();
                    dr["Fld_CessAmount"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CessAmount"] != null).Sum(x => x["Fld_CessAmount"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CessAmount"])).ToString();

                    //dr["Fld_POS"] = "Completed";
                    //dr["Fld_ReverseCharge"] = "False";
                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonTXPD(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool HSNEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For HSN

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_HSN");
                dt.Columns.Add("Fld_Desciption");
                dt.Columns.Add("Fld_UQC");
                dt.Columns.Add("Fld_TotalQuantity");
                dt.Columns.Add("Fld_TotalValue");
                dt.Columns.Add("Fld_TotalTaxableValue");
                dt.Columns.Add("Fld_IGST");
                dt.Columns.Add("Fld_CGST");
                dt.Columns.Add("Fld_SGST");
                dt.Columns.Add("Fld_Cess");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.hsn != null)
                {
                    for (int i = 0; i < obj.hsn.data.Count; i++)
                    {
                        dt.Rows.Add();

                        #region root element
                        dt.Rows[dt.Rows.Count - 1]["Fld_HSN"] = Convert.ToString(obj.hsn.data[i].hsn_sc);
                        dt.Rows[dt.Rows.Count - 1]["Fld_Desciption"] = Convert.ToString(obj.hsn.data[i].desc);
                        dt.Rows[dt.Rows.Count - 1]["Fld_UQC"] = Utility.StrHNSUQC(Convert.ToString(obj.hsn.data[i].uqc));
                        dt.Rows[dt.Rows.Count - 1]["Fld_TotalQuantity"] = Convert.ToString(obj.hsn.data[i].qty);
                        dt.Rows[dt.Rows.Count - 1]["Fld_TotalValue"] = Convert.ToString(obj.hsn.data[i].val);
                        dt.Rows[dt.Rows.Count - 1]["Fld_TotalTaxableValue"] = Convert.ToString(obj.hsn.data[i].txval);
                        dt.Rows[dt.Rows.Count - 1]["Fld_IGST"] = Convert.ToString(obj.hsn.data[i].iamt);
                        dt.Rows[dt.Rows.Count - 1]["Fld_CGST"] = Convert.ToString(obj.hsn.data[i].camt);
                        dt.Rows[dt.Rows.Count - 1]["Fld_SGST"] = Convert.ToString(obj.hsn.data[i].samt);
                        dt.Rows[dt.Rows.Count - 1]["Fld_Cess"] = Convert.ToString(obj.hsn.data[i].csamt);
                        #endregion
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    dr["Fld_TotalQuantity"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TotalQuantity"] != null).Sum(x => x["Fld_TotalQuantity"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TotalQuantity"])).ToString();
                    dr["Fld_TotalValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TotalValue"] != null).Sum(x => x["Fld_TotalValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TotalValue"])).ToString();
                    dr["Fld_TotalTaxableValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TotalTaxableValue"] != null).Sum(x => x["Fld_TotalTaxableValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TotalTaxableValue"])).ToString();

                    dr["Fld_IGST"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGST"] != null).Sum(x => x["Fld_IGST"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGST"])).ToString();
                    dr["Fld_CGST"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGST"] != null).Sum(x => x["Fld_CGST"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGST"])).ToString();
                    dr["Fld_SGST"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGST"] != null).Sum(x => x["Fld_SGST"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGST"])).ToString();
                    dr["Fld_Cess"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Cess"] != null).Sum(x => x["Fld_Cess"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Cess"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonHSN(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        public bool DocIssueEntry(string jsonData, string strMonth, string ReturnYear)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For doc_issue

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_NatureOfDocument");
                dt.Columns.Add("Fld_From");
                dt.Columns.Add("Fld_To");
                dt.Columns.Add("Fld_Total");
                dt.Columns.Add("Fld_Cancelled");
                dt.Columns.Add("Fld_NetIssued");
                dt.Columns.Add("Fld_FileStatus");

                if (obj != null && obj.doc_issue != null)
                {
                    for (int i = 0; i < obj.doc_issue.doc_det.Count; i++)
                    {
                        for (int j = 0; j < obj.doc_issue.doc_det[i].docs.Count; j++)
                        {
                            dt.Rows.Add();

                            #region root element
                            dt.Rows[dt.Rows.Count - 1]["Fld_NatureOfDocument"] = GetNatureOfDocument(Convert.ToString(obj.doc_issue.doc_det[i].doc_num));
                            #endregion

                            #region invoice details
                            dt.Rows[dt.Rows.Count - 1]["Fld_From"] = Convert.ToString(obj.doc_issue.doc_det[i].docs[j].from);
                            dt.Rows[dt.Rows.Count - 1]["Fld_To"] = Convert.ToString(obj.doc_issue.doc_det[i].docs[j].to);
                            dt.Rows[dt.Rows.Count - 1]["Fld_Total"] = Convert.ToString(obj.doc_issue.doc_det[i].docs[j].totnum);
                            dt.Rows[dt.Rows.Count - 1]["Fld_Cancelled"] = Convert.ToString(obj.doc_issue.doc_det[i].docs[j].cancel);
                            dt.Rows[dt.Rows.Count - 1]["Fld_NetIssued"] = Convert.ToString(obj.doc_issue.doc_det[i].docs[j].net_issue);
                            #endregion
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    dr["Fld_Total"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Total"] != null).Sum(x => x["Fld_Total"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Total"])).ToString();
                    dr["Fld_Cancelled"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_Cancelled"] != null).Sum(x => x["Fld_Cancelled"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_Cancelled"])).ToString();
                    dr["Fld_NetIssued"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_NetIssued"] != null).Sum(x => x["Fld_NetIssued"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_NetIssued"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonDocIssue(dt, strMonth, ReturnYear);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }

        #region Amendment
        #region B2BA
        public bool b2baEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2BA

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_GSTIN");
                dt.Columns.Add("Fld_NameofParty");
                dt.Columns.Add("Fld_OrgInvoiceNo");
                dt.Columns.Add("Fld_OrgInvoiceDate");
                dt.Columns.Add("Fld_RevInvoiceNo");
                dt.Columns.Add("Fld_RevInvoiceDate");
                dt.Columns.Add("Fld_InvoiceVal");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_ReverseCharge");
                dt.Columns.Add("Fld_EcomOperator");
                dt.Columns.Add("Fld_InvoiceType");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxVal");
                dt.Columns.Add("Fld_IGSTAmt");
                dt.Columns.Add("Fld_CGSTAmt");
                dt.Columns.Add("Fld_SGSTAmt");
                dt.Columns.Add("Fld_CESSAmt");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");
                dt.Columns.Add("Fld_Submitted");

                if (obj != null && obj.b2ba != null)
                {
                    for (int i = 0; i < obj.b2ba.Count; i++)
                    {
                        for (int j = 0; j < obj.b2ba[i].inv.Count; j++)
                        {
                            for (int k = 0; k < obj.b2ba[i].inv[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                dt.Rows[dt.Rows.Count - 1]["Fld_GSTIN"] = Convert.ToString(obj.b2ba[i].ctin);
                                //dt.Rows[dt.Rows.Count - 1]["Fld_Submitted"] = (Convert.ToString(obj.b2ba[i].cfs) == "Y" ? "Yes" : "No");
                                #endregion

                                #region invoice details
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceNo"] = Convert.ToString(obj.b2ba[i].inv[j].oinum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceDate"] = Convert.ToString(obj.b2ba[i].inv[j].oidt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_RevInvoiceNo"] = Convert.ToString(obj.b2ba[i].inv[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_RevInvoiceDate"] = Convert.ToString(obj.b2ba[i].inv[j].idt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceVal"] = Convert.ToString(obj.b2ba[i].inv[j].val);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceType"] = GetVal(Convert.ToString(obj.b2ba[i].inv[j].inv_typ));

                                if (Convert.ToString(obj.b2ba[i].inv[j].pos) != null)
                                    dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.b2ba[i].inv[j].pos));

                                dt.Rows[dt.Rows.Count - 1]["Fld_ReverseCharge"] = (Convert.ToString(obj.b2ba[i].inv[j].rchrg) == "Y" ? "Yes" : "No");

                                dt.Rows[dt.Rows.Count - 1]["Fld_DiffPerc"] = Convert.ToString(obj.b2ba[i].inv[j].diff_percent);
                                dt.Rows[dt.Rows.Count - 1]["Fld_EcomOperator"] = Convert.ToString(obj.b2ba[i].inv[j].etin);
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.b2ba[i].inv[j].itms[k].itm_det.rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_TaxVal"] = Convert.ToString(obj.b2ba[i].inv[j].itms[k].itm_det.txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmt"] = Convert.ToString(obj.b2ba[i].inv[j].itms[k].itm_det.iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmt"] = Convert.ToString(obj.b2ba[i].inv[j].itms[k].itm_det.camt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmt"] = Convert.ToString(obj.b2ba[i].inv[j].itms[k].itm_det.samt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CESSAmt"] = Convert.ToString(obj.b2ba[i].inv[j].itms[k].itm_det.csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    //dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    #region Org Invoice No
                    var result = (from row in dt.AsEnumerable()
                                  where row.Field<string>("Fld_OrgInvoiceNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                                  group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_OrgInvoiceNo") } into grp
                                  select new
                                  {
                                      colGSTIN = grp.Key.colGSTIN,
                                      colInvNo = grp.Key.colInvNo,
                                  }).ToList();

                    if (result != null && result.Count > 0)
                        dr["Fld_OrgInvoiceNo"] = result.Count;
                    else
                        dr["Fld_InvoiceNo"] = 0;
                    #endregion

                    #region Org Invoice No
                    var result1 = (from row in dt.AsEnumerable()
                                   where row.Field<string>("Fld_RevInvoiceNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                                   group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_RevInvoiceNo") } into grp
                                   select new
                                   {
                                       colGSTIN = grp.Key.colGSTIN,
                                       colInvNo = grp.Key.colInvNo,
                                   }).ToList();

                    if (result1 != null && result1.Count > 0)
                        dr["Fld_RevInvoiceNo"] = result1.Count;
                    else
                        dr["Fld_RevInvoiceNo"] = 0;
                    #endregion

                    #region Total Invoice Value (Unique by invoice no)
                    //dr["Fld_InvoiceValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_InvoiceValue"] != null).Sum(x => x["Fld_InvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_InvoiceValue"])).ToString();

                    DataTable dtNew = new DataTable();
                    dtNew = dt.DefaultView.ToTable(true, "Fld_OrgInvoiceNo", "Fld_InvoiceVal");
                    dr["Fld_InvoiceVal"] = dtNew.AsEnumerable()
                    .Sum(r => r.Field<string>("Fld_InvoiceVal") == "" ? 0 : Convert.ToDecimal(r.Field<string>("Fld_InvoiceVal")))
                    .ToString();
                    #endregion

                    dr["Fld_TaxVal"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TaxVal"] != null).Sum(x => x["Fld_TaxVal"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TaxVal"])).ToString();
                    dr["Fld_IGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmt"] != null).Sum(x => x["Fld_IGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmt"])).ToString();
                    dr["Fld_CGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmt"] != null).Sum(x => x["Fld_CGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmt"])).ToString();
                    dr["Fld_SGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmt"] != null).Sum(x => x["Fld_SGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmt"])).ToString();
                    dr["Fld_CESSAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CESSAmt"] != null).Sum(x => x["Fld_CESSAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CESSAmt"])).ToString();

                    //dr["Fld_POS"] = "Completed";
                    //dr["Fld_ReverseCharge"] = "False";
                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonB2BA(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #region B2CLA
        public bool b2claEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2CLA

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_OrgInvoiceNo");
                dt.Columns.Add("Fld_OrgInvoiceDate");
                dt.Columns.Add("Fld_SupInvoiceNo");
                dt.Columns.Add("Fld_SupInvoiceDate");
                dt.Columns.Add("Fld_InvoiceType");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_SupInvoiceVal");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxVal");
                dt.Columns.Add("Fld_IGSTAmt");
                dt.Columns.Add("Fld_CESSAmt");
                dt.Columns.Add("Fld_EcomOperator");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");
                dt.Columns.Add("Fld_Submitted");

                if (obj != null && obj.b2cla != null)
                {
                    for (int i = 0; i < obj.b2cla.Count; i++)
                    {

                        for (int j = 0; j < obj.b2cla[i].inv.Count; j++)
                        {
                            for (int k = 0; k < obj.b2cla[i].inv[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                if (Convert.ToString(obj.b2cla[i].pos) != null)
                                    dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.b2cla[i].pos));

                                dt.Rows[dt.Rows.Count - 1]["Fld_EcomOperator"] = Convert.ToString(obj.b2cla[i].inv[j].etin);
                                dt.Rows[dt.Rows.Count - 1]["Fld_DiffPerc"] = Convert.ToString(obj.b2cla[i].inv[j].diff_percent);
                                #endregion

                                #region invoice details
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceNo"] = Convert.ToString(obj.b2cla[i].inv[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgInvoiceDate"] = Convert.ToString(obj.b2cla[i].inv[j].idt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_SupInvoiceNo"] = Convert.ToString(obj.b2cla[i].inv[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupInvoiceDate"] = Convert.ToString(obj.b2cla[i].inv[j].idt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_SupInvoiceVal"] = Convert.ToString(obj.b2cla[i].inv[j].val);
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.b2cla[i].inv[j].itms[k].itm_det.rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_TaxVal"] = Convert.ToString(obj.b2cla[i].inv[j].itms[k].itm_det.txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmt"] = Convert.ToString(obj.b2cla[i].inv[j].itms[k].itm_det.iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CESSAmt"] = Convert.ToString(obj.b2cla[i].inv[j].itms[k].itm_det.csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    dr["Fld_OrgInvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_OrgInvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_OrgInvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    dr["Fld_SupInvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_SupInvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_SupInvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    #region Total Invoice Value (Unique by invoice no)
                    dr["Fld_SupInvoiceVal"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SupInvoiceVal"] != null).Sum(x => x["Fld_SupInvoiceVal"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SupInvoiceVal"])).ToString();

                    DataTable dtNew = new DataTable();
                    dtNew = dt.DefaultView.ToTable(true, "Fld_OrgInvoiceNo", "Fld_SupInvoiceVal");
                    dr["Fld_SupInvoiceVal"] = dtNew.AsEnumerable()
                    .Sum(r => r.Field<string>("Fld_SupInvoiceVal") == "" ? 0 : Convert.ToDecimal(r.Field<string>("Fld_SupInvoiceVal")))
                    .ToString();
                    #endregion

                    dr["Fld_TaxVal"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TaxVal"] != null).Sum(x => x["Fld_TaxVal"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TaxVal"])).ToString();
                    dr["Fld_IGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmt"] != null).Sum(x => x["Fld_IGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmt"])).ToString();
                    dr["Fld_CESSAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CESSAmt"] != null).Sum(x => x["Fld_CESSAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CESSAmt"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonB2CLA(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #region B2CSA
        public bool b2csaEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2CSA

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_FinanialYear");
                dt.Columns.Add("Fld_OrgMonthofInvoice");
                dt.Columns.Add("Fld_OrgPOS");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_SupplyType");
                dt.Columns.Add("Fld_Type");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxVal");
                dt.Columns.Add("Fld_IGSTAmt");
                dt.Columns.Add("Fld_CGSTAmt");
                dt.Columns.Add("Fld_SGSTAmt");
                dt.Columns.Add("Fld_CESSAmt");
                dt.Columns.Add("Fld_EcomOperatorGstin");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");
                dt.Columns.Add("Fld_Submitted");

                if (obj != null && obj.b2csa != null)
                {
                    for (int i = 0; i < obj.b2csa.Count; i++)
                    {
                        if (obj.b2csa[i].items != null)
                        {
                            for (int j = 0; j < obj.b2csa[i].items.Count; j++)
                            {
                                dt.Rows.Add();

                                #region root element
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = GetSuppplyTypeVal(Convert.ToString(obj.b2csa[i].sply_ty));

                                string GetMonthYear = "";
                                if (Convert.ToString(obj.b2csa[i].omon) != "")
                                {
                                    GetMonthYear = Utility.GetMonthYearStr(Convert.ToString(obj.b2csa[i].omon));
                                    string[] MonthYear = GetMonthYear.Split(',');

                                    if (MonthYear[0].Trim() != "")
                                        dt.Rows[dt.Rows.Count - 1]["Fld_OrgMonthofInvoice"] = MonthYear[0].Trim();

                                    if (MonthYear[1].Trim() != "")
                                        dt.Rows[dt.Rows.Count - 1]["Fld_FinanialYear"] = MonthYear[1].Trim();
                                }

                                if (Convert.ToString(obj.b2csa[i].typ) == "E")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_Type"] = "Ecom";
                                else
                                    dt.Rows[dt.Rows.Count - 1]["Fld_Type"] = "Other than Ecom";

                                dt.Rows[dt.Rows.Count - 1]["Fld_EcomOperatorGstin"] = Convert.ToString(obj.b2csa[i].etin);
                                if (Convert.ToString(obj.b2csa[i].opos) != null)
                                    dt.Rows[dt.Rows.Count - 1]["Fld_OrgPOS"] = Utility.strValidStateName(Convert.ToString(obj.b2csa[i].opos));

                                if (Convert.ToString(obj.b2csa[i].pos) != null)
                                    dt.Rows[dt.Rows.Count - 1]["Fld_POS"] = Utility.strValidStateName(Convert.ToString(obj.b2csa[i].pos));

                                dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.b2csa[i].items[j].rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_TaxVal"] = Convert.ToString(obj.b2csa[i].items[j].txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmt"] = Convert.ToString(obj.b2csa[i].items[j].iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmt"] = Convert.ToString(obj.b2csa[i].items[j].camt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmt"] = Convert.ToString(obj.b2csa[i].items[j].samt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CESSAmt"] = Convert.ToString(obj.b2csa[i].items[j].csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    dr["Fld_TaxVal"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TaxVal"] != null).Sum(x => x["Fld_TaxVal"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TaxVal"])).ToString();
                    dr["Fld_IGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmt"] != null).Sum(x => x["Fld_IGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmt"])).ToString();
                    dr["Fld_CGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmt"] != null).Sum(x => x["Fld_CGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmt"])).ToString();
                    dr["Fld_SGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmt"] != null).Sum(x => x["Fld_SGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmt"])).ToString();
                    dr["Fld_CESSAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CESSAmt"] != null).Sum(x => x["Fld_CESSAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CESSAmt"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonB2CSA(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #region EXPA
        public bool ExpaEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For Export

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_ExportType");
                dt.Columns.Add("Fld_ShipBillPortCode");
                dt.Columns.Add("Fld_OrgSupInvoiceNo");
                dt.Columns.Add("Fld_OrgSupInvoiceDate");
                dt.Columns.Add("Fld_SupInvoiceNo");
                dt.Columns.Add("Fld_SupInvoiceDate");
                dt.Columns.Add("Fld_ShipBillNoOrExpNo");
                dt.Columns.Add("Fld_ShipBillNoOrExpDate");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_SupInvoiceVal");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxableValue");
                dt.Columns.Add("Fld_IGSTAmt");
                dt.Columns.Add("Fld_CESSAmt");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");
                dt.Columns.Add("Fld_Submitted");

                if (obj != null && obj.expa != null)
                {
                    for (int i = 0; i < obj.expa.Count; i++)
                    {
                        for (int j = 0; j < obj.expa[i].inv.Count; j++)
                        {
                            for (int k = 0; k < obj.expa[i].inv[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                if (Convert.ToString(obj.expa[i].exp_typ) == "WPAY")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_ExportType"] = "Export with payment of GST";
                                else if (Convert.ToString(obj.expa[i].exp_typ) == "WOPAY")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_ExportType"] = "Export without payment of GST";
                                #endregion

                                #region invoice details
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgSupInvoiceNo"] = Convert.ToString(obj.expa[i].inv[j].oinum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgSupInvoiceDate"] = Convert.ToString(obj.expa[i].inv[j].oidt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_SupInvoiceNo"] = Convert.ToString(obj.expa[i].inv[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupInvoiceDate"] = Convert.ToString(obj.expa[i].inv[j].idt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_SupInvoiceVal"] = Convert.ToString(obj.expa[i].inv[j].val);
                                dt.Rows[dt.Rows.Count - 1]["Fld_ShipBillPortCode"] = Convert.ToString(obj.expa[i].inv[j].sbpcode);
                                dt.Rows[dt.Rows.Count - 1]["Fld_ShipBillNoOrExpNo"] = Convert.ToString(obj.expa[i].inv[j].sbnum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_ShipBillNoOrExpDate"] = Convert.ToString(obj.expa[i].inv[j].sbdt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_DiffPerc"] = Convert.ToString(obj.expa[i].inv[j].diff_percent);
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.expa[i].inv[j].itms[k].rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_TaxableValue"] = Convert.ToString(obj.expa[i].inv[j].itms[k].txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmt"] = Convert.ToString(obj.expa[i].inv[j].itms[k].iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CESSAmt"] = Convert.ToString(obj.expa[i].inv[j].itms[k].csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    dr["Fld_OrgSupInvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_OrgSupInvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_OrgSupInvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    dr["Fld_SupInvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_SupInvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_SupInvoiceNo"]).Select(x => x.First()).Distinct().Count();

                    #region Total Invoice Value (Unique by invoice no)
                    dr["Fld_SupInvoiceVal"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SupInvoiceVal"] != null).Sum(x => x["Fld_SupInvoiceVal"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SupInvoiceVal"])).ToString();

                    DataTable dtNew = new DataTable();
                    dtNew = dt.DefaultView.ToTable(true, "Fld_OrgSupInvoiceNo", "Fld_SupInvoiceVal");
                    dr["Fld_SupInvoiceVal"] = dtNew.AsEnumerable()
                    .Sum(r => r.Field<string>("Fld_SupInvoiceVal") == "" ? 0 : Convert.ToDecimal(r.Field<string>("Fld_SupInvoiceVal")))
                    .ToString();
                    #endregion

                    dr["Fld_TaxableValue"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_TaxableValue"] != null).Sum(x => x["Fld_TaxableValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_TaxableValue"])).ToString();
                    dr["Fld_IGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmt"] != null).Sum(x => x["Fld_IGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmt"])).ToString();
                    dr["Fld_CESSAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CESSAmt"] != null).Sum(x => x["Fld_CESSAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CESSAmt"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonExpa(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #region CDNRA
        public bool cdnaEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For CDNA
                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_GSTIN");
                dt.Columns.Add("Fld_CDNType");
                dt.Columns.Add("Fld_PreGST");
                dt.Columns.Add("Fld_OrgCDNNo");
                dt.Columns.Add("Fld_OrgCDNDate");
                dt.Columns.Add("Fld_CDNNo");
                dt.Columns.Add("Fld_CDNDate");
                dt.Columns.Add("Fld_InvoiceNo");
                dt.Columns.Add("Fld_InvoiceDate");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_TotalNoteValue");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxableValue");
                dt.Columns.Add("Fld_IGSTAmt");
                dt.Columns.Add("Fld_CGSTAmt");
                dt.Columns.Add("Fld_SGSTAmt");
                dt.Columns.Add("Fld_CESSAmt");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");

                if (obj != null && obj.cdnra != null)
                {
                    for (int i = 0; i < obj.cdnra.Count; i++)
                    {
                        for (int j = 0; j < obj.cdnra[i].nt.Count; j++)
                        {
                            for (int k = 0; k < obj.cdnra[i].nt[j].itms.Count; k++)
                            {
                                dt.Rows.Add();

                                #region root element
                                dt.Rows[dt.Rows.Count - 1]["Fld_GSTIN"] = Convert.ToString(obj.cdnra[i].ctin);
                                #endregion

                                #region invoice details
                                if (Convert.ToString(obj.cdnra[i].nt[j].ntty) == "C")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_CDNType"] = "Credit Note";
                                else if (Convert.ToString(obj.cdnra[i].nt[j].ntty) == "D")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_CDNType"] = "Debit Note";
                                else if (Convert.ToString(obj.cdnra[i].nt[j].ntty) == "R")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_CDNType"] = "Refund Voucher";

                                dt.Rows[dt.Rows.Count - 1]["Fld_PreGST"] = (Convert.ToString(obj.cdnra[i].nt[j].p_gst) == "Y" ? "Yes" : "No");

                                dt.Rows[dt.Rows.Count - 1]["Fld_DiffPerc"] = Convert.ToString(obj.cdnra[i].nt[j].diff_percent);

                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgCDNNo"] = Convert.ToString(obj.cdnra[i].nt[j].ont_num);
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgCDNDate"] = Convert.ToString(obj.cdnra[i].nt[j].ont_dt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_CDNNo"] = Convert.ToString(obj.cdnra[i].nt[j].nt_num);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CDNDate"] = Convert.ToString(obj.cdnra[i].nt[j].nt_dt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceNo"] = Convert.ToString(obj.cdnra[i].nt[j].inum);
                                dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceDate"] = Convert.ToString(obj.cdnra[i].nt[j].idt);

                                dt.Rows[dt.Rows.Count - 1]["Fld_TotalNoteValue"] = Convert.ToString(obj.cdnra[i].nt[j].val);
                                #endregion

                                #region item details
                                dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.cdnra[i].nt[j].itms[k].itm_det.rt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_TaxableValue"] = Convert.ToString(obj.cdnra[i].nt[j].itms[k].itm_det.txval);
                                dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmt"] = Convert.ToString(obj.cdnra[i].nt[j].itms[k].itm_det.iamt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmt"] = Convert.ToString(obj.cdnra[i].nt[j].itms[k].itm_det.camt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmt"] = Convert.ToString(obj.cdnra[i].nt[j].itms[k].itm_det.samt);
                                dt.Rows[dt.Rows.Count - 1]["Fld_CESSAmt"] = Convert.ToString(obj.cdnra[i].nt[j].itms[k].itm_det.csamt);
                                #endregion
                            }
                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    #region CDN no
                    var result = (from row in dt.AsEnumerable()
                                  where row.Field<string>("Fld_OrgCDNNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                                  group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_OrgCDNNo") } into grp
                                  select new
                                  {
                                      colGSTIN = grp.Key.colGSTIN,
                                      colInvNo = grp.Key.colInvNo,
                                  }).ToList();

                    if (result != null && result.Count > 0)
                        dr["Fld_OrgCDNNo"] = result.Count;
                    else
                        dr["Fld_OrgCDNNo"] = 0;
                    #endregion

                    #region Original Invoice No
                    result = (from row in dt.AsEnumerable()
                              where row.Field<string>("Fld_CDNNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                              group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_CDNNo") } into grp
                              select new
                              {
                                  colGSTIN = grp.Key.colGSTIN,
                                  colInvNo = grp.Key.colInvNo,
                              }).ToList();

                    if (result != null && result.Count > 0)
                        dr["Fld_CDNNo"] = result.Count;
                    else
                        dr["Fld_CDNNo"] = 0;
                    #endregion

                    #region Original Invoice No
                    result = (from row in dt.AsEnumerable()
                              where row.Field<string>("Fld_InvoiceNo") != "" && row.Field<string>("Fld_GSTIN") != ""
                              group row by new { colGSTIN = row.Field<string>("Fld_GSTIN"), colInvNo = row.Field<string>("Fld_InvoiceNo") } into grp
                              select new
                              {
                                  colGSTIN = grp.Key.colGSTIN,
                                  colInvNo = grp.Key.colInvNo,
                              }).ToList();

                    if (result != null && result.Count > 0)
                        dr["Fld_InvoiceNo"] = result.Count;
                    else
                        dr["Fld_InvoiceNo"] = 0;
                    #endregion

                    #region New
                    DataTable dtNew = new DataTable();
                    dtNew = dt.AsEnumerable()
                        .GroupBy(row => new
                        {
                            Member1 = row.Field<string>("Fld_CDNType")
                        })
                        .Select(g =>
                        {
                            var row = dt.NewRow();
                            row["Fld_CDNType"] = g.Key.Member1;
                            row["Fld_TotalNoteValue"] = g.Sum(r => r["Fld_TotalNoteValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_TotalNoteValue"]));
                            row["Fld_TaxableValue"] = g.Sum(r => r["Fld_TaxableValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_TaxableValue"]));
                            row["Fld_IGSTAmt"] = g.Sum(r => r["Fld_IGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_IGSTAmt"]));
                            row["Fld_CGSTAmt"] = g.Sum(r => r["Fld_CGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CGSTAmt"]));
                            row["Fld_SGSTAmt"] = g.Sum(r => r["Fld_SGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_SGSTAmt"]));
                            row["Fld_CESSAmt"] = g.Sum(r => r["Fld_CESSAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CESSAmt"]));
                            return row;
                        }).CopyToDataTable();

                    decimal invval = 0, tax = 0, igst = 0, cgst = 0, sgst = 0, cess = 0;
                    foreach (DataRow drNew in dtNew.Rows)
                    {
                        if (Convert.ToString(drNew["Fld_CDNType"]) == "Credit Note")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_TotalNoteValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TotalNoteValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_TaxableValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TaxableValue"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CESSAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CESSAmt"]));
                        }
                        else if (Convert.ToString(drNew["Fld_CDNType"]) == "Refund Voucher")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_TotalNoteValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TotalNoteValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_TaxableValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TaxableValue"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CESSAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CESSAmt"]));
                        }
                        else
                        {
                            invval = invval + (Convert.ToString(drNew["Fld_TotalNoteValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TotalNoteValue"]));
                            tax = tax + (Convert.ToString(drNew["Fld_TaxableValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TaxableValue"]));
                            igst = igst + (Convert.ToString(drNew["Fld_IGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmt"]));
                            cgst = cgst + (Convert.ToString(drNew["Fld_CGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmt"]));
                            sgst = sgst + (Convert.ToString(drNew["Fld_SGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmt"]));
                            cess = cess + (Convert.ToString(drNew["Fld_CESSAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CESSAmt"]));
                        }
                    }

                    dr["Fld_TotalNoteValue"] = invval;
                    dr["Fld_TaxableValue"] = tax;
                    dr["Fld_IGSTAmt"] = igst;
                    dr["Fld_CGSTAmt"] = cgst;
                    dr["Fld_SGSTAmt"] = sgst;
                    dr["Fld_CESSAmt"] = cess;
                    #endregion

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonCDNA(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #region CDNURA
        public bool cdnuraEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For CDN
                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_SupplyType");
                dt.Columns.Add("Fld_CDNType");
                dt.Columns.Add("Fld_PreGST");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_POS");
                dt.Columns.Add("Fld_OrgCDNRefVouNo");
                dt.Columns.Add("Fld_OrgCDNRefVouDate");
                dt.Columns.Add("Fld_CDNRefVouNo");
                dt.Columns.Add("Fld_CDNRefVouDate");
                dt.Columns.Add("Fld_InvoiceNo");
                dt.Columns.Add("Fld_InvoiceDate");
                dt.Columns.Add("Fld_TotalNoteValue");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_TaxableValue");
                dt.Columns.Add("Fld_IGSTAmt");
                dt.Columns.Add("Fld_CGSTAmt");
                dt.Columns.Add("Fld_SGSTAmt");
                dt.Columns.Add("Fld_CESSAmt");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");

                if (obj != null && obj.cdnura != null)
                {
                    for (int i = 0; i < obj.cdnura.Count; i++)
                    {
                        for (int j = 0; j < obj.cdnura[i].itms.Count; j++)
                        {
                            dt.Rows.Add();

                            #region root element
                            if (Convert.ToString(obj.cdnura[i].typ) == "EXPWP")
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = "Export with payment of GST";
                            else if (Convert.ToString(obj.cdnura[i].typ) == "EXPWOP")
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = "Export without payment of GST";
                            else if (Convert.ToString(obj.cdnura[i].typ) == "B2CL")
                                dt.Rows[dt.Rows.Count - 1]["Fld_SupplyType"] = "B2C Large";

                            if (Convert.ToString(obj.cdnura[i].ntty) == "C")
                                dt.Rows[dt.Rows.Count - 1]["Fld_CDNType"] = "Credit Note";
                            else if (Convert.ToString(obj.cdnura[i].ntty) == "D")
                                dt.Rows[dt.Rows.Count - 1]["Fld_CDNType"] = "Debit Note";
                            else if (Convert.ToString(obj.cdnura[i].ntty) == "R")
                                dt.Rows[dt.Rows.Count - 1]["Fld_CDNType"] = "Refund Voucher";

                            dt.Rows[dt.Rows.Count - 1]["Fld_PreGST"] = (Convert.ToString(obj.cdnura[i].p_gst) == "Y" ? "Yes" : "No");

                            dt.Rows[dt.Rows.Count - 1]["Fld_OrgCDNRefVouNo"] = Convert.ToString(obj.cdnura[i].ont_num);
                            dt.Rows[dt.Rows.Count - 1]["Fld_OrgCDNRefVouDate"] = Convert.ToString(obj.cdnura[i].ont_dt);

                            dt.Rows[dt.Rows.Count - 1]["Fld_CDNRefVouNo"] = Convert.ToString(obj.cdnura[i].nt_num);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CDNRefVouDate"] = Convert.ToString(obj.cdnura[i].nt_dt);

                            dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceNo"] = Convert.ToString(obj.cdnura[i].inum);
                            dt.Rows[dt.Rows.Count - 1]["Fld_InvoiceDate"] = Convert.ToString(obj.cdnura[i].idt);

                            dt.Rows[dt.Rows.Count - 1]["Fld_TotalNoteValue"] = Convert.ToString(obj.cdnura[i].val);
                            #endregion

                            #region item details
                            dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.cdnura[i].itms[j].itm_det.rt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_TaxableValue"] = Convert.ToString(obj.cdnura[i].itms[j].itm_det.txval);
                            dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmt"] = Convert.ToString(obj.cdnura[i].itms[j].itm_det.iamt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmt"] = Convert.ToString(obj.cdnura[i].itms[j].itm_det.camt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmt"] = Convert.ToString(obj.cdnura[i].itms[j].itm_det.samt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CESSAmt"] = Convert.ToString(obj.cdnura[i].itms[j].itm_det.csamt);
                            #endregion

                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    dr["Fld_OrgCDNRefVouNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_OrgCDNRefVouNo"]).Trim() != "").GroupBy(x => x["Fld_OrgCDNRefVouNo"]).Select(x => x.First()).Distinct().Count();

                    dr["Fld_CDNRefVouNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_CDNRefVouNo"]).Trim() != "").GroupBy(x => x["Fld_CDNRefVouNo"]).Select(x => x.First()).Distinct().Count();

                    dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();


                    #region New
                    DataTable dtNew = new DataTable();
                    dtNew = dt.AsEnumerable()
                        .GroupBy(row => new
                        {
                            Member1 = row.Field<string>("Fld_CDNType")
                        })
                        .Select(g =>
                        {
                            var row = dt.NewRow();
                            row["Fld_CDNType"] = g.Key.Member1;
                            row["Fld_TotalNoteValue"] = g.Sum(r => r["Fld_TotalNoteValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_TotalNoteValue"]));
                            row["Fld_TaxableValue"] = g.Sum(r => r["Fld_TaxableValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_TaxableValue"]));
                            row["Fld_IGSTAmt"] = g.Sum(r => r["Fld_IGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_IGSTAmt"]));
                            row["Fld_CGSTAmt"] = g.Sum(r => r["Fld_CGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CGSTAmt"]));
                            row["Fld_SGSTAmt"] = g.Sum(r => r["Fld_SGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_SGSTAmt"]));
                            row["Fld_CESSAmt"] = g.Sum(r => r["Fld_CESSAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(r["Fld_CESSAmt"]));
                            return row;
                        }).CopyToDataTable();

                    decimal invval = 0, tax = 0, igst = 0, cgst = 0, sgst = 0, cess = 0;
                    foreach (DataRow drNew in dtNew.Rows)
                    {
                        if (Convert.ToString(drNew["Fld_CDNType"]) == "Credit Note")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_TotalNoteValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TotalNoteValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_TaxableValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TaxableValue"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CESSAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CESSAmt"]));
                        }
                        else if (Convert.ToString(drNew["Fld_CDNType"]) == "Refund Voucher")
                        {
                            invval = invval - (Convert.ToString(drNew["Fld_TotalNoteValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TotalNoteValue"]));
                            tax = tax - (Convert.ToString(drNew["Fld_TaxableValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TaxableValue"]));
                            igst = igst - (Convert.ToString(drNew["Fld_IGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmt"]));
                            cgst = cgst - (Convert.ToString(drNew["Fld_CGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmt"]));
                            sgst = sgst - (Convert.ToString(drNew["Fld_SGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmt"]));
                            cess = cess - (Convert.ToString(drNew["Fld_CESSAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CESSAmt"]));
                        }
                        else
                        {
                            invval = invval + (Convert.ToString(drNew["Fld_TotalNoteValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TotalNoteValue"]));
                            tax = tax + (Convert.ToString(drNew["Fld_TaxableValue"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_TaxableValue"]));
                            igst = igst + (Convert.ToString(drNew["Fld_IGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_IGSTAmt"]));
                            cgst = cgst + (Convert.ToString(drNew["Fld_CGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CGSTAmt"]));
                            sgst = sgst + (Convert.ToString(drNew["Fld_SGSTAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_SGSTAmt"]));
                            cess = cess + (Convert.ToString(drNew["Fld_CESSAmt"]) == "" ? 0 : Convert.ToDecimal(drNew["Fld_CESSAmt"]));
                        }
                    }

                    dr["Fld_TotalNoteValue"] = invval;
                    dr["Fld_TaxableValue"] = tax;
                    dr["Fld_IGSTAmt"] = igst;
                    dr["Fld_CGSTAmt"] = cgst;
                    dr["Fld_SGSTAmt"] = sgst;
                    dr["Fld_CESSAmt"] = cess;
                    #endregion

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonCDNURA(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #region ATA
        public bool ataEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For at

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_FinanialYear");
                dt.Columns.Add("Fld_OrgMonthofInvoice");
                dt.Columns.Add("Fld_OrgPos");
                dt.Columns.Add("Fld_OrgSupType");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_AdvReceived");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_IGSTRate");
                dt.Columns.Add("Fld_CGSTRate");
                dt.Columns.Add("Fld_SGSTRate");
                dt.Columns.Add("Fld_CESSRate");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");

                if (obj != null && obj.ata != null)
                {
                    for (int i = 0; i < obj.ata.Count; i++)
                    {
                        for (int j = 0; j < obj.ata[i].itms.Count; j++)
                        {
                            dt.Rows.Add();

                            #region root element
                            if (Convert.ToString(obj.ata[i].pos) != null)
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgPos"] = Utility.strValidStateName(Convert.ToString(obj.ata[i].pos));

                            if (Convert.ToString(obj.ata[i].sply_ty) != null)
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgSupType"] = Utility.Strb2csSupType(Convert.ToString(obj.ata[i].sply_ty));

                            dt.Rows[dt.Rows.Count - 1]["Fld_DiffPerc"] = Convert.ToString(obj.ata[i].diff_percent);

                            string GetMonthYear = "";
                            if (Convert.ToString(obj.ata[i].omon) != "")
                            {
                                GetMonthYear = Utility.GetMonthYearStr(Convert.ToString(obj.ata[i].omon));
                                string[] MonthYear = GetMonthYear.Split(',');

                                if (MonthYear[0].Trim() != "")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_OrgMonthofInvoice"] = MonthYear[0].Trim();

                                if (MonthYear[1].Trim() != "")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_FinanialYear"] = MonthYear[1].Trim();
                            }
                            #endregion

                            #region item details
                            dt.Rows[dt.Rows.Count - 1]["Fld_AdvReceived"] = Convert.ToString(obj.ata[i].itms[j].ad_amt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.ata[i].itms[j].rt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_IGSTRate"] = Convert.ToString(obj.ata[i].itms[j].iamt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CGSTRate"] = Convert.ToString(obj.ata[i].itms[j].camt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_SGSTRate"] = Convert.ToString(obj.ata[i].itms[j].samt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CESSRate"] = Convert.ToString(obj.ata[i].itms[j].csamt);
                            #endregion

                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();

                    dr["Fld_AdvReceived"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_AdvReceived"] != null).Sum(x => x["Fld_AdvReceived"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_AdvReceived"])).ToString();
                    dr["Fld_IGSTRate"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTRate"] != null).Sum(x => x["Fld_IGSTRate"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTRate"])).ToString();
                    dr["Fld_CGSTRate"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTRate"] != null).Sum(x => x["Fld_CGSTRate"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTRate"])).ToString();
                    dr["Fld_SGSTRate"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTRate"] != null).Sum(x => x["Fld_SGSTRate"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTRate"])).ToString();
                    dr["Fld_CESSRate"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CESSRate"] != null).Sum(x => x["Fld_CESSRate"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CESSRate"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonATA(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #region TXPA
        public bool txpdaEntry(string jsonData)
        {
            bool flg = false;
            try
            {
                DataTable dt = new DataTable();
                RootObjectJson obj = JsonConvert.DeserializeObject<RootObjectJson>(jsonData);

                #region ASSIGN GRIDVIEW ROWS IN DATATABLE For B2B

                dt = new DataTable();
                dt.Columns.Add("Fld_Sequence");
                dt.Columns.Add("Fld_FinanialYear");
                dt.Columns.Add("Fld_OrgMonth");
                dt.Columns.Add("Fld_OrgPOS");
                dt.Columns.Add("Fld_OrgSupType");
                dt.Columns.Add("Fld_DiffPerc");
                dt.Columns.Add("Fld_AdvToAdjusted");
                dt.Columns.Add("Fld_Rate");
                dt.Columns.Add("Fld_IGSTAmt");
                dt.Columns.Add("Fld_CGSTAmt");
                dt.Columns.Add("Fld_SGSTAmt");
                dt.Columns.Add("Fld_CESSAmt");
                dt.Columns.Add("Fld_FileStatus");
                dt.Columns.Add("Fld_Month");

                if (obj != null && obj.txpda != null)
                {
                    for (int i = 0; i < obj.txpda.Count; i++)
                    {
                        for (int j = 0; j < obj.txpda[i].itms.Count; j++)
                        {
                            dt.Rows.Add();

                            #region root element
                            if (Convert.ToString(obj.txpda[i].pos) != null)
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgPOS"] = Utility.strValidStateName(Convert.ToString(obj.txpda[i].pos));


                            if (Convert.ToString(obj.txpda[i].sply_ty) != null)
                                dt.Rows[dt.Rows.Count - 1]["Fld_OrgSupType"] = Utility.Strb2csSupType(Convert.ToString(obj.txpda[i].sply_ty));

                            dt.Rows[dt.Rows.Count - 1]["Fld_DiffPerc"] = Convert.ToString(obj.txpda[i].diff_percent);

                            string GetMonthYear = "";
                            if (Convert.ToString(obj.txpda[i].omon) != "")
                            {
                                GetMonthYear = Utility.GetMonthYearStr(Convert.ToString(obj.txpda[i].omon));
                                string[] MonthYear = GetMonthYear.Split(',');

                                if (MonthYear[0].Trim() != "")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_OrgMonth"] = MonthYear[0].Trim();

                                if (MonthYear[1].Trim() != "")
                                    dt.Rows[dt.Rows.Count - 1]["Fld_FinanialYear"] = MonthYear[1].Trim();
                            }

                            #endregion

                            #region item details
                            dt.Rows[dt.Rows.Count - 1]["Fld_AdvToAdjusted"] = Convert.ToString(obj.txpda[i].itms[j].ad_amt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_Rate"] = Convert.ToString(obj.txpda[i].itms[j].rt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_IGSTAmt"] = Convert.ToString(obj.txpda[i].itms[j].iamt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CGSTAmt"] = Convert.ToString(obj.txpda[i].itms[j].camt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_SGSTAmt"] = Convert.ToString(obj.txpda[i].itms[j].samt);
                            dt.Rows[dt.Rows.Count - 1]["Fld_CESSAmt"] = Convert.ToString(obj.txpda[i].itms[j].csamt);
                            #endregion

                        }
                    }
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dt.Rows[i]["Fld_Sequence"] = Convert.ToString(i + 1);
                        dt.Rows[i]["Fld_FileStatus"] = "Completed";
                    }
                    dt.AcceptChanges();
                }
                else
                {
                    return true;
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow dr = dt.NewRow();
                    //dr["Fld_InvoiceNo"] = dt.Rows.Cast<DataRow>().Where(x => Convert.ToString(x["Fld_InvoiceNo"]).Trim() != "").GroupBy(x => x["Fld_InvoiceNo"]).Select(x => x.First()).Distinct().Count();
                    dr["Fld_AdvToAdjusted"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_AdvToAdjusted"] != null).Sum(x => x["Fld_AdvToAdjusted"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_AdvToAdjusted"])).ToString();
                    dr["Fld_IGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_IGSTAmt"] != null).Sum(x => x["Fld_IGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_IGSTAmt"])).ToString();
                    dr["Fld_CGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CGSTAmt"] != null).Sum(x => x["Fld_CGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CGSTAmt"])).ToString();
                    dr["Fld_SGSTAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_SGSTAmt"] != null).Sum(x => x["Fld_SGSTAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_SGSTAmt"])).ToString();
                    dr["Fld_CESSAmt"] = dt.Rows.Cast<DataRow>().Where(x => x["Fld_CESSAmt"] != null).Sum(x => x["Fld_CESSAmt"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(x["Fld_CESSAmt"])).ToString();

                    dr["Fld_FileStatus"] = "Total";
                    dt.Rows.Add(dr);

                    int _Result = objGSTR5.GSTR1BulkEntryJsonTXPDA(dt);
                    if (_Result == 1)
                        flg = true;
                }
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }

            return flg;
        }
        #endregion

        #endregion

        #endregion

        #region Methods for json value validation
        public string GetVal(string val)
        {
            string retVal = "";
            if (val == "R")
                retVal = "Regular";
            else if (val == "DE")
                retVal = "Deemed Exports";
            else if (val == "SEWP")
                retVal = "SEZ Exports with payment";
            else if (val == "SEWOP")
                retVal = "SEZ exports without payment";

            return retVal;
        }
        public string GetSuppplyTypeVal(string val)
        {
            string retVal = "";
            if (val == "INTER")
                retVal = "Inter";
            else if (val == "INTRA")
                retVal = "Intra";

            return retVal;
        }
        public string GetNatureOfDocument(string val)
        {
            string retVal = "";
            if (val == "1")
                retVal = "Invoice for outward supply";
            else if (val == "2")
                retVal = "Invoice for inward supply from unregistered person";
            else if (val == "3")
                retVal = "Revised Invoice";
            else if (val == "4")
                retVal = "Debit Note";
            else if (val == "5")
                retVal = "Credit Note";
            else if (val == "6")
                retVal = "Receipt voucher";
            else if (val == "7")
                retVal = "Payment Voucher";
            else if (val == "8")
                retVal = "Refund voucher";
            else if (val == "9")
                retVal = "Delivery Challan for job work";
            else if (val == "10")
                retVal = "Delivery Challan for supply on approval";
            else if (val == "11")
                retVal = "Delivery Challan in case of liquid gas";
            else if (val == "12")
                retVal = "Delivery Challan in cases other than by way of supply (excluding at S no. 9 to 11)";

            return retVal;
        }
        #endregion

        #region Json Class for import
        public class ItmDet
        {
            public double rt { get; set; }
            public double txval { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Itm
        {
            public int num { get; set; }
            public ItmDet itm_det { get; set; }
        }

        public class Inv
        {
            public double val { get; set; }
            public List<Itm> itms { get; set; }
            public string inv_typ { get; set; }
            public string flag { get; set; }
            public string updby { get; set; }
            public string pos { get; set; }
            public string idt { get; set; }
            public string rchrg { get; set; }
            public string cflag { get; set; }
            public string inum { get; set; }
            public string chksum { get; set; }
        }

        public class B2b
        {
            public string ctin { get; set; }
            public string cfs { get; set; }
            public object cname { get; set; }
            public List<Inv> inv { get; set; }
        }

        public class ItmDet2
        {
            public double rt { get; set; }
            public double txval { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Itm2
        {
            public int num { get; set; }
            public ItmDet2 itm_det { get; set; }
        }

        public class Inv2
        {
            public double val { get; set; }
            public List<Itm2> itms { get; set; }
            public string flag { get; set; }
            public string idt { get; set; }
            public string inum { get; set; }
            public string chksum { get; set; }
        }

        public class B2cl
        {
            public List<Inv2> inv { get; set; }
            public string pos { get; set; }
        }

        public class ItmDet3
        {
            public double rt { get; set; }
            public double txval { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Itm3
        {
            public int num { get; set; }
            public ItmDet3 itm_det { get; set; }
        }

        public class Nt
        {
            public List<Itm3> itms { get; set; }
            public double val { get; set; }
            public string flag { get; set; }
            public string updby { get; set; }
            public string idt { get; set; }
            public string ntty { get; set; }
            public string nt_num { get; set; }
            public string cflag { get; set; }
            public string inum { get; set; }
            public string nt_dt { get; set; }
            public string p_gst { get; set; }
            public string chksum { get; set; }
        }

        public class Cdnr
        {
            public string cfs { get; set; }
            public string ctin { get; set; }
            public List<Nt> nt { get; set; }
        }

        public class Itm4
        {
            public double rt { get; set; }
            public double txval { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Inv3
        {
            public List<Itm4> itms { get; set; }
            public double val { get; set; }
            public string flag { get; set; }
            public string sbnum { get; set; }
            public string idt { get; set; }
            public string sbdt { get; set; }
            public string inum { get; set; }
            public string sbpcode { get; set; }
            public string chksum { get; set; }
        }

        public class Exp
        {
            public List<Inv3> inv { get; set; }
            public string exp_typ { get; set; }
        }

        public class ItmDet4
        {
            public double rt { get; set; }
            public double txval { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Itm5
        {
            public int num { get; set; }
            public ItmDet4 itm_det { get; set; }
        }

        public class Cdnur
        {
            public double val { get; set; }
            public List<Itm5> itms { get; set; }
            public string flag { get; set; }
            public string ntty { get; set; }
            public string p_gst { get; set; }
            public string idt { get; set; }
            public string nt_num { get; set; }
            public string typ { get; set; }
            public string inum { get; set; }
            public string nt_dt { get; set; }
            public string chksum { get; set; }
        }

        public class B2cs
        {
            public double rt { get; set; }
            public string flag { get; set; }
            public string pos { get; set; }
            public double txval { get; set; }
            public string typ { get; set; }
            public string chksum { get; set; }
            public string sply_ty { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Itm6
        {
            public double rt { get; set; }
            public double ad_amt { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Txpd
        {
            public List<Itm6> itms { get; set; }
            public string flag { get; set; }
            public string pos { get; set; }
            public string chksum { get; set; }
            public string sply_ty { get; set; }
        }

        public class Inv4
        {
            public double expt_amt { get; set; }
            public double nil_amt { get; set; }
            public double ngsup_amt { get; set; }
            public string sply_ty { get; set; }
        }

        public class Nil
        {
            public List<Inv4> inv { get; set; }
            public string flag { get; set; }
            public string chksum { get; set; }
        }

        public class Datum
        {
            public double val { get; set; }
            public string uqc { get; set; }
            public double txval { get; set; }
            public int num { get; set; }
            public double qty { get; set; }
            public string hsn_sc { get; set; }
            public string desc { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class Hsn
        {
            public string flag { get; set; }
            public List<Datum> data { get; set; }
            public string chksum { get; set; }
        }

        public class Doc
        {
            public int cancel { get; set; }
            public int num { get; set; }
            public int totnum { get; set; }
            public string from { get; set; }
            public string to { get; set; }
            public int net_issue { get; set; }
        }

        public class Itm7
        {
            public double rt { get; set; }
            public double ad_amt { get; set; }
            public double? iamt { get; set; }
            public double? camt { get; set; }
            public double? samt { get; set; }
            public double? csamt { get; set; }
        }

        public class At
        {
            public List<Itm7> itms { get; set; }
            public string flag { get; set; }
            public string pos { get; set; }
            public string chksum { get; set; }
            public string sply_ty { get; set; }
        }

        public class DocDet
        {
            public List<Doc> docs { get; set; }
            public int doc_num { get; set; }
        }

        public class DocIssue
        {
            public string flag { get; set; }
            public List<DocDet> doc_det { get; set; }
            public string chksum { get; set; }
        }

        #region Amendment
        public class ItmDet8
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double txval { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double camt { get; set; }
            [DefaultValue("")]
            public double samt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }
        }
        public class Itm8
        {
            [DefaultValue("")]
            public int num { get; set; }
            public ItmDet8 itm_det { get; set; }
        }
        public class Inv8
        {
            public string flag { get; set; }
            // public string chksum { get; set; }

            public string inum { get; set; }
            [DefaultValue("")]
            public string idt { get; set; }
            [DefaultValue("")]

            public string oinum { get; set; }
            [DefaultValue("")]
            public string oidt { get; set; }


            //public string opd { get; set; }

            public double diff_percent { get; set; }
            [DefaultValue("")]
            public double val { get; set; }
            [DefaultValue("")]
            public string pos { get; set; }
            public string rchrg { get; set; }

            [DefaultValue(null)]
            public string etin { get; set; }
            public string inv_typ { get; set; }

            public List<Itm8> itms { get; set; }
        }
        public class B2ba
        {
            public string ctin { get; set; }
            public List<Inv8> inv { get; set; }
        }


        public class ItmDet9
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double txval { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }
        }
        public class Itm9
        {
            [DefaultValue("")]
            public int num { get; set; }
            public ItmDet9 itm_det { get; set; }
        }
        public class Inv9
        {
            [DefaultValue("")]
            public string etin { get; set; }
            public string inum { get; set; }
            public string idt { get; set; }
            [DefaultValue("")]
            public double diff_percent { get; set; }
            public string oinum { get; set; }
            public string oidt { get; set; }
            [DefaultValue("")]
            public double val { get; set; }
            public List<Itm9> itms { get; set; }
        }
        public class B2cla
        {
            public string pos { get; set; }
            public List<Inv9> inv { get; set; }
        }

        public class B2csaItms
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double txval { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double camt { get; set; }
            [DefaultValue("")]
            public double samt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }

        }
        public class B2csa
        {
            public string omon { get; set; }
            [DefaultValue("")]
            public string sply_ty { get; set; }
            [DefaultValue("")]
            public string typ { get; set; }
            [DefaultValue("")]
            public string etin { get; set; }
            public string pos { get; set; }
            [DefaultValue("")]
            public string opos { get; set; }
            [DefaultValue("")]

            public List<B2csaItms> items { get; set; }

        }

        public class ItmDet10
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double txval { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double camt { get; set; }
            [DefaultValue("")]
            public double samt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }
        }
        public class Itm10
        {
            [DefaultValue("")]
            public int num { get; set; }
            public ItmDet10 itm_det { get; set; }
        }
        public class Nt10
        {
            public string ntty { get; set; }
            public string ont_num { get; set; }
            public string ont_dt { get; set; }
            public string nt_num { get; set; }
            public string nt_dt { get; set; }
            public string p_gst { get; set; }
            //public string rsn { get; set; }
            public double diff_percent { get; set; }
            public string inum { get; set; }
            public string idt { get; set; }
            [DefaultValue("")]
            public double val { get; set; }
            public List<Itm10> itms { get; set; }
        }
        public class Cdnra
        {
            public string ctin { get; set; }
            public List<Nt10> nt { get; set; }
        }

        public class ItmDet11
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double txval { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double camt { get; set; }
            [DefaultValue("")]
            public double samt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }
        }
        public class Itm11
        {
            [DefaultValue("")]
            public int num { get; set; }
            public ItmDet11 itm_det { get; set; }
        }
        public class Cdnura
        {
            public string typ { get; set; }
            public string ntty { get; set; }
            public string nt_num { get; set; }
            public string nt_dt { get; set; }
            public string ont_num { get; set; }
            public string ont_dt { get; set; }
            public double diff_percent { get; set; }
            public string p_gst { get; set; }
            //public string rsn { get; set; }
            public string inum { get; set; }
            public string idt { get; set; }
            public double val { get; set; }
            public List<Itm11> itms { get; set; }
        }

        public class Itm12
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double ad_amt { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double camt { get; set; }
            [DefaultValue("")]
            public double samt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }
        }
        public class Ata
        {
            public string pos { get; set; }
            public string sply_ty { get; set; }
            public string omon { get; set; }
            public double diff_percent { get; set; }
            public List<Itm12> itms { get; set; }
        }

        public class Itm13
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double txval { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }
        }
        public class Inv13
        {
            public string oinum { get; set; }
            public string oidt { get; set; }
            public string inum { get; set; }
            public string idt { get; set; }
            public double diff_percent { get; set; }
            public double val { get; set; }
            [DefaultValue("")]
            public string sbpcode { get; set; }
            [DefaultValue("")]
            public string sbnum { get; set; }
            [DefaultValue("")]
            public string sbdt { get; set; }
            public List<Itm13> itms { get; set; }
        }
        public class Expa
        {
            public string exp_typ { get; set; }
            public List<Inv13> inv { get; set; }
        }

        public class Itm14
        {
            [DefaultValue("")]
            public double rt { get; set; }
            [DefaultValue("")]
            public double ad_amt { get; set; }
            [DefaultValue("")]
            public double iamt { get; set; }
            [DefaultValue("")]
            public double camt { get; set; }
            [DefaultValue("")]
            public double samt { get; set; }
            [DefaultValue("")]
            public double csamt { get; set; }
        }
        public class Txpda
        {
            public string pos { get; set; }
            public string sply_ty { get; set; }
            public string omon { get; set; }
            public double diff_percent { get; set; }
            public List<Itm14> itms { get; set; }
        }
        #endregion

        public class RootObjectJson
        {
            public string gstin { get; set; }
            public string fp { get; set; }
            public string filing_typ { get; set; }
            public double gt { get; set; }
            public double cur_gt { get; set; }
            public string version { get; set; }
            public string hash { get; set; }
            public List<B2b> b2b { get; set; }
            public List<B2cl> b2cl { get; set; }
            public List<Cdnr> cdnr { get; set; }
            public List<Exp> exp { get; set; }
            public List<Cdnur> cdnur { get; set; }
            public List<B2cs> b2cs { get; set; }
            public List<Txpd> txpd { get; set; }
            public List<At> at { get; set; }
            public Nil nil { get; set; }
            public Hsn hsn { get; set; }
            public DocIssue doc_issue { get; set; }

            public List<B2ba> b2ba { get; set; }
            public List<B2cla> b2cla { get; set; }
            public List<B2csa> b2csa { get; set; }
            public List<Cdnra> cdnra { get; set; }
            public List<Cdnura> cdnura { get; set; }
            public List<Ata> ata { get; set; }
            public List<Expa> expa { get; set; }
            public List<Txpda> txpda { get; set; }
        }
        #endregion

        public void GetMessage()
        {
            try
            {
                DataTable dt = new DataTable();
                string Query = "Select * from SPQJsonDownloadMsg where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_ReturnType='GSTR1'";
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (Convert.ToDateTime(dt.Rows[0]["Fld_DownloadTime"]) > DateTime.Now)
                    {
                        label2.Text = Convert.ToString(dt.Rows[0]["Fld_Msg"]) + "...";
                    }
                    else
                    {
                        label2.Text = "You can download file now...";
                    }
                }
                else
                {
                    label2.Text = "";
                }
            }
            catch
            {
            }
        }

        private void msRequest_Click(object sender, EventArgs e)
        {
            try
            {
                pbGSTR1.Visible = true;
                new PrefillHelper().genratenewrequest("GSTR1");
                pbGSTR1.Visible = false;
            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        private void msDownload_Click(object sender, EventArgs e)
        {
            try
            {
                pbGSTR1.Visible = true;
                new PrefillHelper().downloadgstrfile("GSTR1", CommonHelper.SelectedMonth);
                pbGSTR1.Visible = false;
            }
            catch (Exception ex)
            {
                pbGSTR1.Visible = false;
                MessageBox.Show("Error : " + ex.Message, "Technical Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                string errorMessage = string.Format("Error: {0}{1}Source: {2}{3}Error Time: {4}{5}", ex.Message, Environment.NewLine, ex.StackTrace, Environment.NewLine, DateTime.Now, Environment.NewLine);
                StreamWriter errorWriter = new StreamWriter("SPEQTA_Error_File.txt", true);
                errorWriter.Write(errorMessage);
                errorWriter.Close();
            }
        }

        public void GetFilingStatusMsg()
        {
            try
            {
                DataTable dt = new DataTable();
                string Query = "Select * from SPQReturnStatus where Fld_Month='" + CommonHelper.SelectedMonth + "' AND Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_ReturnType='GSTR-1' order by Fld_Id DESC LIMIT 1;";
                dt = objGSTR5.GetDataGSTR1(Query);
                if (dt != null && dt.Rows.Count > 0)
                {
                    string Message = "";
                    string Status = "";
                    if (dt.Rows[0]["Fld_Status"].ToString() == "0")
                        Status = "Not File";
                    else
                        Status = "File";

                    Message = "Last Action " + dt.Rows[0]["Fld_Action"].ToString() + ", " + dt.Rows[0]["Fld_ActionDate"].ToString() + ", Status " + Status + ".";
                    if (Message != "")
                    {
                        label1.Text = Message;
                    }
                }
                else
                {
                    label1.Text = "";
                }
            }
            catch { }
        }

        private void dgvReport_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == 1)
            {
                CommonHelper.IsMainFormType = "3B";
                CommonHelper.ReturnName = "GSTR 3B";
                SPQGSTR3BMain obj = new SPQGSTR3BMain();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).HideExtraToolsMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
            }
        }

        private void btnDownloadPDF_Click(object sender, EventArgs e)
        {
            bool isExtensionInstalled = Utility.chromeExtensionCheck();

            if (true)
            {
                string GetMonth = CommonHelper.GetMonth(CommonHelper.SelectedMonth);
                string Year = CommonHelper.ReturnYear.Replace(" ", "");

                string[] Years = Year.Split('-');
                Year = Years[0] + "-" + Years[1].Substring(2, 2);

                var encodedString = Utility.encoding(Convert.ToString(Constants.UserName) + ',' + Convert.ToString(CommonHelper.CompanyPassword) + ',' + "downloadgst1" + ',' + GetMonth + ',' + Year);
                Process.Start("chrome.exe", "https://services.gst.gov.in/services/login?downloadgst1," + encodedString);
            }
        }

        private void DgvMain_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            CommonHelper.IsMainFormType = "1";
            if (e.RowIndex == 0 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2B obj = new SPQGSTR1B2B();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 1 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2CL obj = new SPQGSTR1B2CL();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 2 && e.ColumnIndex == 0)
            {
                SPQGSTR1B2CS obj = new SPQGSTR1B2CS();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 3 && e.ColumnIndex == 0)
            {
                SPQGSTR1ZeroRated obj = new SPQGSTR1ZeroRated();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 4 && e.ColumnIndex == 0)
            {
                SPQGSTR1CDN obj = new SPQGSTR1CDN();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 5 && e.ColumnIndex == 0)
            {
                SPQGSTR1CDNUR obj = new SPQGSTR1CDNUR();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 6 && e.ColumnIndex == 0)
            {
                SPQGSTR1NilRated obj = new SPQGSTR1NilRated();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 7 && e.ColumnIndex == 0)
            {
                //****** Asif Working
                //SPQGSTR1AdvanceReceived obj = new SPQGSTR1AdvanceReceived();
                SPQGSTR1GrossAdvance obj = new SPQGSTR1GrossAdvance();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();


                //((SPQMDI)Application.OpenForms["SPQMDI"]).HideExtraToolsMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
            }
            else if (e.RowIndex == 8 && e.ColumnIndex == 0)
            {
                //****** Asif Working
                //SPQGSTR1AdvanceAdjusted obj = new SPQGSTR1AdvanceAdjusted();
                SPQGSTR1NetAdvance obj = new SPQGSTR1NetAdvance();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();


                //((SPQMDI)Application.OpenForms["SPQMDI"]).HideExtraToolsMenu();
                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();

            }
            else if (e.RowIndex == 10 && e.ColumnIndex == 0)
            {
                SPQGSTR1HSNOutwardSummary obj = new SPQGSTR1HSNOutwardSummary();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
            else if (e.RowIndex == 11 && e.ColumnIndex == 0)
            {
                SPQGSTR1DocumentIssued obj = new SPQGSTR1DocumentIssued();
                obj.MdiParent = this.MdiParent;
                Utility.CloseAllOpenForm();
                obj.Dock = DockStyle.Fill;
                obj.Show();

                ((SPQMDI)Application.OpenForms["SPQMDI"]).ShowCompanyDetailMenu();
                //((SPQMDI)Application.OpenForms["SPQMDI"]).ShowExtraToolsMenu();
            }
        }

        private void DgvMain_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridViewCell cell = dgvMain.Rows[e.RowIndex].Cells[e.ColumnIndex];
            if (cell.Value.ToString() == "Completed")
            {
                e.CellStyle.ForeColor = Color.Green;
            }
            else if (cell.Value.ToString() == "Not-Completed")
            {
                e.CellStyle.ForeColor = Color.Red;
            }
            else if (cell.Value.ToString() == "Draft")
            {
                e.CellStyle.ForeColor = Color.Blue;
            }
            else if (cell.Value.ToString() == "Completed")
            {
                e.CellStyle.ForeColor = Color.Green;
            }
            else if (cell.Value.ToString() == "Not-Completed")
            {
                e.CellStyle.ForeColor = Color.Red;
            }
            else if (cell.Value.ToString() == "Draft")
            {
                e.CellStyle.ForeColor = Color.Blue;
            }
        }

        private void GSTR1Dashboard_FormClosed(object sender, FormClosedEventArgs e)
        {
            ((SPQMDI)Application.OpenForms["SPQMDI"]).SetReturnName("");

            Form frm = (Form)this.MdiParent;
            MenuStrip CompanyDetailStrip = (MenuStrip)frm.Controls["CompanyDetailStrip"];
            CompanyDetailStrip.Visible = true;
            
        }

        private void pnlnewgstr3vs1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void GetGSTR1VsGSTR3B()
        {
            #region GSTR-3B Query


            #region Monthly GSTR-3B

            string monthQuery3B = " select distinct tempheader.Month_Name, ifnull(Outward,0.00)Outward, ifnull(ZeroRated,0.00)ZeroRated,ifnull(NilExempt,0.00) NilExempt,ifnull(NonGst,0.00) NonGst, cast(((ifnull(Outward,0.00) + ifnull(ZeroRated,0.00) + ifnull(NilExempt,0.00) + ifnull(NonGst,0.00)))as decimal) as TotalSupply, " +
                                " ifnull(IGST,0.00) IGST,ifnull(CGST,0.00) CGST,ifnull(SGST,0.00) SGST,ifnull(CESS,0.00) CESS ,ifnull(IGST_Ex,0.00) IGST_Ex,ifnull(CESS_Ex,0.00) CESS_Ex , cast(((ifnull(IGST,0.00) + ifnull(CGST,0.00) + ifnull(SGST,0.00) + ifnull(CESS,0.00) + ifnull(IGST_Ex,0.00) + ifnull(CESS_Ex,0.00)) ) as decimal) TotalGST " +
                            " from (    select * from SPQMonthtaxType ) as tempheader " +
                            " left join  " +
                            " (  " +
                            " select Month_Name, Sum(OutWard) OutWard, Sum(ZeroRated) ZeroRated, Sum(NilExempt) NilExempt, sum(NonGst) NonGst  " +
                            " from (  " +
                            "     select Fld_Month as Month_Name , " +
                            "     case when Fld_Sequence='1' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as Outward,  " +
                            "     case when Fld_Sequence='2' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as ZeroRated , " +
                            "     case when Fld_Sequence='3' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as NilExempt, " +
                            "     case when Fld_Sequence='5' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as NonGst " +
                            " from SPQR3BOutwardSupplies where Fld_FileStatus!='Total' and Fld_FinancialYear='" + CommonHelper.ReturnYear + "'  and Fld_Sequence in( '1','2','3','5')  " +
                            " ) as tempresult group by Month_Name " +
                            " ) as supply on tempheader.Month_Name= supply.Month_Name " +

                            " left join " +
                            " ( " +
                            "     select Fld_Month as Month_Name ,Fld_Sequence, " +
                            "     cast((sum(replace(ifnull(Fld_IGST,0.00),',','')))as decimal) as IGST,  " +
                            "     cast((sum(replace(ifnull(Fld_CGST,0.00),',','')))as decimal) as CGST,  " +
                            "     cast((sum(replace(ifnull(Fld_SGST,0.00),',','')))as decimal) as SGST,  " +
                            "     cast((sum(replace(ifnull(Fld_CESS,0.00),',','')))as decimal) as CESS " +
                            " from SPQR3BOutwardSupplies where Fld_FileStatus!='Total' and  Fld_FinancialYear='" + CommonHelper.ReturnYear + "' and Fld_Sequence='1' group by  Fld_Sequence,Fld_Month " +
                            " ) gsttax on tempheader.Month_Name= gsttax.Month_Name " +

                            " left join  " +
                            " (  " +
                            "     select Fld_Month as Month_Name ,Fld_Sequence, " +
                            "     cast((sum(replace(ifnull(Fld_IGST,0.00),',','')))as decimal) as IGST_Ex,  " +
                            "     cast((sum(replace(ifnull(Fld_CESS,0.00),',','')))as decimal) as CESS_Ex " +
                            " from SPQR3BOutwardSupplies where Fld_FileStatus!='Total' and  Fld_FinancialYear='" + CommonHelper.ReturnYear + "' and Fld_Sequence='2' group by  Fld_Sequence,Fld_Month " +
                            " ) exporttax on tempheader.Month_Name= exporttax.Month_Name  where  tempheader.Month_Name='" + CommonHelper.SelectedMonth + "'";
            #endregion

            #region Quarterly GSTR-3B
            string QuarterQuery3B = "select Quarter_Name as Month_Name,  Sum(OutWard) OutWard, Sum(ZeroRated) ZeroRated, Sum(NilExempt) NilExempt, sum(NonGst) NonGst , Sum(TotalSupply) TotalSupply, " +
                            " Sum(IGST) IGST,Sum(CGST) CGST, Sum(SGST) SGST, Sum(CESS) CESS, Sum(IGST_Ex) IGST_Ex, Sum(CESS_Ex) CESS_Ex, " +
                            " (Sum(IGST) + Sum(CGST) + Sum(SGST) + Sum(CESS) + Sum(IGST_Ex) + Sum(CESS_Ex)) TotalGST " +
                            " from (" +
                         " select tempheader.Month_Name,tempheader.Quarter_ID, tempheader.Quarter_Name ,ifnull(Outward,0.00)Outward, ifnull(ZeroRated,0.00)ZeroRated,ifnull(NilExempt,0.00) NilExempt,ifnull(NonGst,0.00) NonGst, cast(((ifnull(Outward,0.00) + ifnull(ZeroRated,0.00) + ifnull(NilExempt,0.00) + ifnull(NonGst,0.00)))as decimal)as TotalSupply, " +
                               " ifnull(IGST,0.00) IGST,ifnull(CGST,0.00) CGST,ifnull(SGST,0.00) SGST,ifnull(CESS,0.00) CESS ,ifnull(IGST_Ex,0.00) IGST_Ex,ifnull(CESS_Ex,0.00) CESS_Ex , cast(((ifnull(IGST,0.00) + ifnull(CGST,0.00) + ifnull(SGST,0.00) + ifnull(CESS,0.00) + ifnull(IGST_Ex,0.00) + ifnull(CESS_Ex,0.00)) ) as decimal) TotalGST " +
                           " from (    SELECT Month_Name,Quarter_ID,Quarter_Name FROM SPQMonthtaxType group by Month_Name ) as tempheader " +
                           " left join  " +
                           " (  " +
                           " select distinct Month_Name, Sum(OutWard) OutWard, Sum(ZeroRated) ZeroRated, Sum(NilExempt) NilExempt, sum(NonGst) NonGst  " +
                           " from (  " +
                           "     select Fld_Month as Month_Name , " +
                           "     case when Fld_Sequence='1' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as Outward,  " +
                           "     case when Fld_Sequence='2' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as ZeroRated , " +
                           "     case when Fld_Sequence='3' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as NilExempt, " +
                           "     case when Fld_Sequence='5' then cast(replace(ifnull(Fld_TotalTaxableValue,0.00),',','')as decimal) else 0.00 end as NonGst " +
                           " from SPQR3BOutwardSupplies where Fld_FileStatus!='Total' and Fld_FinancialYear='" + CommonHelper.ReturnYear + "'  and Fld_Sequence in( '1','2','3','5')  " +
                           " ) as tempresult group by Month_Name " +
                           " ) as supply on tempheader.Month_Name= supply.Month_Name " +

                           " left join " +
                           " ( " +
                           "     select Fld_Month as Month_Name ,Fld_Sequence, " +
                           "     cast((sum(replace(ifnull(Fld_IGST,0.00),',','')))as decimal) as IGST,  " +
                           "     cast((sum(replace(ifnull(Fld_CGST,0.00),',','')))as decimal) as CGST,  " +
                           "     cast((sum(replace(ifnull(Fld_SGST,0.00),',','')))as decimal) as SGST,  " +
                           "     cast((sum(replace(ifnull(Fld_CESS,0.00),',','')))as decimal) as CESS " +
                           " from SPQR3BOutwardSupplies where Fld_FileStatus!='Total' and  Fld_FinancialYear='" + CommonHelper.ReturnYear + "' and Fld_Sequence='1' group by  Fld_Sequence,Fld_Month " +
                           " ) gsttax on tempheader.Month_Name= gsttax.Month_Name " +

                           " left join  " +
                           " (  " +
                           "     select Fld_Month as Month_Name ,Fld_Sequence, " +
                           "     cast((sum(replace(ifnull(Fld_IGST,0.00),',','')))as decimal) as IGST_Ex,  " +
                           "     cast((sum(replace(ifnull(Fld_CESS,0.00),',','')))as decimal) as CESS_Ex " +
                           " from SPQR3BOutwardSupplies where Fld_FileStatus!='Total' and  Fld_FinancialYear='" + CommonHelper.ReturnYear + "' and Fld_Sequence='2' group by  Fld_Sequence,Fld_Month " +
                           " ) exporttax on tempheader.Month_Name= exporttax.Month_Name  ) as quarterly group by Quarter_Name ";
            #endregion

            #endregion

            #region GSTR-1 Query

            #region Monthly GSTR-1
            string monthlyQuery1 = " select Month_Name, cast(OutWard as decimal)OutWard,cast(ZeroRated as decimal)ZeroRated,cast(NilRated_Exempted as decimal) NilRated_Exempted, cast(NonGst as decimal)NonGst,cast(Total_Supply as decimal) Total_Supply, " +
                                 " cast(IGST as decimal) IGST,cast(CGST as decimal) CGST,cast(SGST as decimal) SGST,cast(CESS as decimal) CESS,cast(Zero_IGST as decimal) Zero_IGST,cast(Zero_CESS as decimal) Zero_CESS, " +
                                 " cast(((IGST + CGST + SGST + CESS + Zero_IGST + Zero_CESS)) as decimal) as TotalGst " +
                                    " from ( " +
                                    " select distinct tempheader.Month_Name, " +
                                    "       ( cast(ifnull(b2b.B2B,0.00) as decimal) + cast(ifnull(b2cl.B2CL,0.00) as decimal) + cast(ifnull(b2cs.B2CS,0.00) as decimal)  " +
                                    "                   +  cast(ifnull( cd.CDN,0.00) as decimal) + cast(ifnull( cdnur.CDNUR,0.00) as decimal)  " +
                                    "                   +  cast(ifnull( adv_rcv.Advance_Receive,0.00) as decimal) - cast(ifnull( adv_adj.Advance_Adjusted,0.00) as decimal) " +
                                    "                   )  as OutWard,  " +

                                    "                    ifnull(zerorated.ZeroRated,0.00) ZeroRated,  " +
                                    "                    ifnull(nilExmp_nongst.NilRated_Exempted,0.00) NilRated_Exempted,  " +
                                    "                    ifnull(nilExmp_nongst.NonGst,0.00) NonGst,       " +

                                     "      ( cast(ifnull(b2b.B2B,0.00) as decimal) +  cast(ifnull(b2cl.B2CL,0.00) as decimal) +   cast(ifnull( b2cs.B2CS,0.00) as decimal)  " +
                                     "                  +  cast(ifnull( cd.CDN,0.00) as decimal) + cast(ifnull( cdnur.CDNUR,0.00) as decimal)  " +
                                     "                  +  cast(ifnull( zerorated.ZeroRated,0.00) as decimal) +  ifnull(nilExmp_nongst.NilRated_Exempted,0.00) + ifnull(nilExmp_nongst.NonGst,0.00)  " +
                                     "                  +  cast(ifnull( adv_rcv.Advance_Receive,0.00) as decimal) -   cast(ifnull( adv_adj.Advance_Adjusted,0.00) as decimal))  as Total_Supply,  " +

                                     "      ( cast(ifnull(b2b.IGST_Value,0.00) as decimal) + cast(ifnull(b2cl.IGST_Value,0.00) as decimal) + cast(ifnull(b2cs.IGST_Value,0.00) as decimal)  " +
                                     "                  +  cast(ifnull(cd.IGST_Value,0.00) as decimal) + cast(ifnull(cdnur.IGST_Value,0.00) as decimal) + cast(ifnull(adv_rcv.IGST_Value,0.00) as decimal) " +
                                     "                  -  cast(ifnull(adv_adj.IGST_Value,0.00) as decimal) " +
                                     "                   ) as IGST, " +

                                     "      ( cast(ifnull(b2b.CGST_Value,0.00) as decimal) + cast(ifnull(b2cl.CGST_Value,0.00) as decimal) + cast(ifnull(b2cs.CGST_Value,0.00) as decimal)  " +
                                     "                  +  cast(ifnull(cd.CGST_Value,0.00) as decimal) + cast(ifnull(cdnur.CGST_Value,0.00) as decimal) + cast(ifnull(adv_rcv.cGST_Value,0.00) as decimal) " +
                                     "                  -  cast(ifnull(adv_adj.CGST_Value,0.00) as decimal) " +
                                     "                   ) as CGST,                             " +

                                     "      ( cast(ifnull(b2b.SGST_Value,0.00) as decimal) + cast(ifnull(b2cs.SGST_Value,0.00) as decimal) + cast(ifnull(b2cl.SGST_Value,0.00) as decimal)  " +
                                     "                  +  cast(ifnull(cd.SGST_Value,0.00) as decimal) + cast(ifnull(cdnur.SGST_Value,0.00) as decimal) + cast(ifnull(adv_rcv.SGST_Value,0.00) as decimal) " +
                                     "                  -  cast(ifnull(adv_adj.SGST_Value,0.00) as decimal) " +
                                     "                   ) as SGST, " +

                                     "     ( cast(ifnull(b2b.CESS_Value,0.00) as decimal) + cast(ifnull(b2cs.CESS_Value,0.00) as decimal) + cast(ifnull(b2cl.CESS_Value,0.00) as decimal)  " +
                                     "                  +  cast(ifnull(cd.CESS_Value,0.00) as decimal) + cast(ifnull(cdnur.CESS_Value,0.00) as decimal) + cast(ifnull(adv_rcv.CESS_Value,0.00) as decimal) " +
                                     "                  -  cast(ifnull(adv_adj.CESS_Value,0.00) as decimal) " +
                                     "                   ) as CESS , " +
                                     "                   cast(ifnull( zerorated.IGST_Value,0.00) as decimal) as Zero_IGST, " +
                                     "                   cast(ifnull( zerorated.CESS_Value,0.00) as decimal) as Zero_Cess " +

                                    " from(  select * from SPQMonthtaxType ) as tempheader " +
                                    " Left join " +
                                    " ( " +
                                    "     SELECT  Fld_Month, replace(Fld_InvoiceTaxableVal,',','') as B2B ,  " +
                                    "     replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmount,',','') as CESS_Value  " +
                                    "     FROM SPQR1B2B  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total'    " +
                                    "  ) as b2b on tempheader.Month_Name= b2b.Fld_Month  " +

                                   "  left join " +
                                   "  ( " +
                                   "      SELECT  Fld_Month, replace(Fld_TaxableValue,',','') as B2CL , " +
                                   "      replace(Fld_IGST,',','') as IGST_Value ,0.00 as CGST_Value ,0.00 as SGST_Value,replace(Fld_Cess,',','') as CESS_Value  " +
                                   "      FROM SPQR1B2CL WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total'  " +
                                   "  ) as b2cl on tempheader.Month_Name= b2cl.Fld_Month " +

                                   "  left join  " +
                                   "  ( " +
                                   "      SELECT  Fld_Month, replace(Fld_TaxableValue,',','') as B2CS , " +
                                   "      replace(Fld_IGST,',','') as IGST_Value ,replace(Fld_CGST,',','') as CGST_Value ,replace(Fld_SGST,',','') as SGST_Value,replace(Fld_Cess,',','') as CESS_Value      " +
                                   "      FROM SPQR1B2CS WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total' " +
                                   "  ) as b2cs  on tempheader.Month_Name= b2cs.Fld_Month " +

                                  "   left join  " +
                                  "   ( " +
                                  "       SELECT  Fld_Month, replace(Fld_Taxable,',','') as CDN , " +
                                  "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmnt,',','') as CESS_Value    " +
                                  "       FROM SPQR1CDN  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total' " +
                                  "   ) as cd  on tempheader.Month_Name= cd.Fld_Month  " +

                                  "   left join  " +
                                  "   ( " +
                                  "       SELECT  Fld_Month,replace(Fld_Taxable,',','') as CDNUR,  " +
                                  "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmnt,',','') as CESS_Value    " +
                                  "       FROM SPQR1CDNUR  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total'  " +
                                  "   ) as cdnur  on tempheader.Month_Name= cdnur.Fld_Month  " +

                                  "   left join  " +
                                  "   ( " +
                                  "       SELECT  Fld_Month,replace(Fld_IGSTInvoiceTaxableVal,',','') as ZeroRated , " +
                                  "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,0.00 as CGST_Value ,0.00 as SGST_Value,replace(Fld_Cess,',','') as CESS_Value    " +
                                  "       FROM SPQR1ZeroRated WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total'  " +
                                  "   ) as zerorated  on tempheader.Month_Name= zerorated.Fld_Month  " +

                                  "   left join  " +
                                  "   ( " +
                                  "       SELECT  Fld_Month, sum(replace(ifnull(Fld_NilRatedSupply,0.00),',','')) + sum(replace(ifnull(Fld_Exempted,0.00),',','')) as NilRated_Exempted, sum(replace(ifnull(Fld_NonGSTSupplies,0.00),',','')) as NonGst  " +
                                  "       FROM SPQR1NilRated WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus !='Total' group by Fld_Month" +
                                  "   ) as nilExmp_nongst  on tempheader.Month_Name= nilExmp_nongst.Fld_Month  " +
                                  "   left join  " +
                                  "   ( " +
                                  "       SELECT  Fld_Month, replace(Fld_GrossAdvRcv,',','') as Advance_Receive , " +
                                  "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value, replace(Fld_CessAmount,',','') as CESS_Value  " +
                                  "      FROM SPQR1GrossAdvance  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total' " +

                                  "   ) as adv_rcv  on tempheader.Month_Name= adv_rcv.Fld_Month  " +

                                 "    left join  " +
                                 "    ( " +
                                  "       SELECT  Fld_Month, replace(Fld_Advadj,',','') as Advance_Adjusted,  " +
                                  "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmount,',','') as CESS_Value  " +
                                  "       FROM SPQR1NetAdvance  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total' " +
                                  "   ) as adv_adj  on tempheader.Month_Name= adv_adj.Fld_Month " +
                                  "   ) as result  where Month_Name='" + CommonHelper.SelectedMonth + "'";

            #endregion

            #region Quarterly GSTR-1
            string QuarterQuery1 = " select Quarter_Name as Month_Name, Sum(cast(OutWard as decimal))OutWard ,sum(cast(ZeroRated as decimal))ZeroRated,sum(cast(NilRated_Exempted as decimal) )NilRated_Exempted, Sum(cast(NonGst as decimal))NonGst,sum(cast(Total_Supply as decimal)) Total_Supply, " +
                                " sum(cast(IGST as decimal)) IGST,sum(cast(CGST as decimal)) CGST,sum(cast(SGST as decimal)) SGST,sum(cast(CESS as decimal)) CESS,sum(cast(Zero_IGST as decimal)) Zero_IGST,sum(cast(Zero_CESS as decimal)) Zero_CESS, " +
                                " cast(Sum(IGST) + sum(CGST) + sum(SGST) + Sum(CESS) + Sum(Zero_IGST) + Sum(Zero_CESS) as decimal) as TotalGst " +
                                  " from ( " +
                                  " select distinct tempheader.Month_Name,tempheader.Quarter_ID, tempheader.Quarter_Name , " +
                                  "       ( cast(ifnull(b2b.B2B,0.00) as decimal) + cast(ifnull(b2cl.B2CL,0.00) as decimal) + cast(ifnull(b2cs.B2CS,0.00) as decimal)  " +
                                  "                   +  cast(ifnull( cd.CDN,0.00) as decimal) + cast(ifnull( cdnur.CDNUR,0.00) as decimal)  " +
                                  "                   +  cast(ifnull( adv_rcv.Advance_Receive,0.00) as decimal) - cast(ifnull( adv_adj.Advance_Adjusted,0.00) as decimal) " +
                                  "                   )  as OutWard,  " +

                                  "                    ifnull(zerorated.ZeroRated,0.00) ZeroRated,  " +
                                  "                    ifnull(nilExmp_nongst.NilRated_Exempted,0.00) NilRated_Exempted,  " +
                                  "                    ifnull(nilExmp_nongst.NonGst,0.00) NonGst,       " +

                                   "      ( cast(ifnull(b2b.B2B,0.00) as decimal) +  cast(ifnull(b2cl.B2CL,0.00) as decimal) +   cast(ifnull( b2cs.B2CS,0.00) as decimal)  " +
                                   "                  +  cast(ifnull( cd.CDN,0.00) as decimal) + cast(ifnull( cdnur.CDNUR,0.00) as decimal)  " +
                                   "                  +  cast(ifnull( zerorated.ZeroRated,0.00) as decimal) +  ifnull(nilExmp_nongst.NilRated_Exempted,0.00) + ifnull(nilExmp_nongst.NonGst,0.00)  " +
                                   "                  +  cast(ifnull( adv_rcv.Advance_Receive,0.00) as decimal) -  cast(ifnull( adv_adj.Advance_Adjusted,0.00) as decimal))  as Total_Supply,  " +

                                   "      ( cast(ifnull(b2b.IGST_Value,0.00) as decimal) + cast(ifnull(b2cl.IGST_Value,0.00) as decimal) + cast(ifnull(b2cs.IGST_Value,0.00) as decimal)  " +
                                   "                  +  cast(ifnull(cd.IGST_Value,0.00) as decimal) + cast(ifnull(cdnur.IGST_Value,0.00) as decimal) + cast(ifnull(adv_rcv.IGST_Value,0.00) as decimal) " +
                                   "                  -  cast(ifnull(adv_adj.IGST_Value,0.00) as decimal) " +
                                   "                   ) as IGST, " +

                                   "      ( cast(ifnull(b2b.CGST_Value,0.00) as decimal) + cast(ifnull(b2cl.CGST_Value,0.00) as decimal) + cast(ifnull(b2cs.CGST_Value,0.00) as decimal)  " +
                                   "                  +  cast(ifnull(cd.CGST_Value,0.00) as decimal) + cast(ifnull(cdnur.CGST_Value,0.00) as decimal) + cast(ifnull(adv_rcv.cGST_Value,0.00) as decimal) " +
                                   "                  -  cast(ifnull(adv_adj.CGST_Value,0.00) as decimal) " +
                                   "                   ) as CGST,                             " +

                                   "      ( cast(ifnull(b2b.SGST_Value,0.00) as decimal) + cast(ifnull(b2cs.SGST_Value,0.00) as decimal) + cast(ifnull(b2cl.SGST_Value,0.00) as decimal)  " +
                                   "                  +  cast(ifnull(cd.SGST_Value,0.00) as decimal) + cast(ifnull(cdnur.SGST_Value,0.00) as decimal) + cast(ifnull(adv_rcv.SGST_Value,0.00) as decimal) " +
                                   "                  -  cast(ifnull(adv_adj.SGST_Value,0.00) as decimal) " +
                                   "                   ) as SGST, " +

                                   "     ( cast(ifnull(b2b.CESS_Value,0.00) as decimal) + cast(ifnull(b2cs.CESS_Value,0.00) as decimal) + cast(ifnull(b2cl.CESS_Value,0.00) as decimal)  " +
                                   "                  +  cast(ifnull(cd.CESS_Value,0.00) as decimal) + cast(ifnull(cdnur.CESS_Value,0.00) as decimal) + cast(ifnull(adv_rcv.CESS_Value,0.00) as decimal) " +
                                   "                  -  cast(ifnull(adv_adj.CESS_Value,0.00) as decimal) " +
                                   "                   ) as CESS , " +
                                   "                   cast(ifnull( zerorated.IGST_Value,0.00) as decimal) as Zero_IGST, " +
                                   "                   cast(ifnull( zerorated.CESS_Value,0.00) as decimal) as Zero_Cess " +

                                  " from(  SELECT Month_Name,Quarter_ID,Quarter_Name FROM SPQMonthtaxType group by Month_Name ) as tempheader " +
                                  " Left join " +
                                  " ( " +
                                  "     SELECT  Fld_Month, replace(Fld_InvoiceTaxableVal,',','') as B2B ,  " +
                                  "     replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmount,',','') as CESS_Value  " +
                                  "     FROM SPQR1B2B  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus='Total'    " +
                                  "  ) as b2b on tempheader.Month_Name= b2b.Fld_Month  " +

                                 "  left join " +
                                 "  ( " +
                                 "      SELECT  Fld_Month, replace(Fld_TaxableValue,',','') as B2CL , " +
                                 "      replace(Fld_IGST,',','') as IGST_Value ,0.00 as CGST_Value ,0.00 as SGST_Value,replace(Fld_Cess,',','') as CESS_Value  " +
                                 "      FROM SPQR1B2CL WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total'  " +
                                 "  ) as b2cl on tempheader.Month_Name= b2cl.Fld_Month " +

                                 "  left join  " +
                                 "  ( " +
                                 "      SELECT  Fld_Month, replace(Fld_TaxableValue,',','') as B2CS , " +
                                 "      replace(Fld_IGST,',','') as IGST_Value ,replace(Fld_CGST,',','') as CGST_Value ,replace(Fld_SGST,',','') as SGST_Value,replace(Fld_Cess,',','') as CESS_Value      " +
                                 "      FROM SPQR1B2CS WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total' " +
                                 "  ) as b2cs  on tempheader.Month_Name= b2cs.Fld_Month " +

                                "   left join  " +
                                "   ( " +
                                "       SELECT  Fld_Month, replace(Fld_Taxable,',','') as CDN , " +
                                "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmnt,',','') as CESS_Value    " +
                                "       FROM SPQR1CDN  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total' " +
                                "   ) as cd  on tempheader.Month_Name= cd.Fld_Month  " +

                                "   left join  " +
                                "   ( " +
                                "       SELECT  Fld_Month,replace(Fld_Taxable,',','') as CDNUR,  " +
                                "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmnt,',','') as CESS_Value    " +
                                "       FROM SPQR1CDNUR  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total'  " +
                                "   ) as cdnur  on tempheader.Month_Name= cdnur.Fld_Month  " +

                                "   left join  " +
                                "   ( " +
                                "       SELECT  Fld_Month,replace(Fld_IGSTInvoiceTaxableVal,',','') as ZeroRated , " +
                                "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,0.00 as CGST_Value ,0.00 as SGST_Value,replace(Fld_Cess,',','') as CESS_Value    " +
                                "       FROM SPQR1ZeroRated WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total'  " +
                                "   ) as zerorated  on tempheader.Month_Name= zerorated.Fld_Month  " +

                                  "   left join  " +
                                  "   ( " +
                                  "       SELECT  Fld_Month, sum(replace(ifnull(Fld_NilRatedSupply,0.00),',','')) + sum(replace(ifnull(Fld_Exempted,0.00),',','')) as NilRated_Exempted, sum(replace(ifnull(Fld_NonGSTSupplies,0.00),',','')) as NonGst  " +
                                  "       FROM SPQR1NilRated WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear + "' and Fld_FileStatus !='Total' group by Fld_Month" +
                                  "   ) as nilExmp_nongst  on tempheader.Month_Name= nilExmp_nongst.Fld_Month  " +

                                //"   left join  " +
                                //"   ( " +
                                //"       SELECT  Fld_Month, (replace(ifnull(Fld_NilRatedSupply,0.00),',','') + replace(ifnull(Fld_Exempted,0.00),',','')) as NilRated_Exempted, replace(ifnull(Fld_NonGSTSupplies,0.00),',','') as NonGst  " +
                                //"       FROM SPQR1NilRated WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total' " +
                                //"   ) as nilExmp_nongst  on tempheader.Month_Name= nilExmp_nongst.Fld_Month  " +
                                "   left join  " +
                                "   ( " +
                                "       SELECT  Fld_Month, replace(Fld_GrossAdvRcv,',','') as Advance_Receive , " +
                                "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value, replace(Fld_CessAmount,',','') as CESS_Value  " +
                                "      FROM SPQR1GrossAdvance  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total' " +

                                "   ) as adv_rcv  on tempheader.Month_Name= adv_rcv.Fld_Month  " +

                               "    left join  " +
                               "    ( " +
                                "       SELECT  Fld_Month, replace(Fld_Advadj,',','') as Advance_Adjusted,  " +
                                "       replace(Fld_IGSTAmnt,',','') as IGST_Value ,replace(Fld_CGSTAmnt,',','') as CGST_Value ,replace(Fld_SGSTAmnt,',','') as SGST_Value,replace(Fld_CessAmount,',','') as CESS_Value  " +
                                "       FROM SPQR1NetAdvance  WHERE Fld_FinancialYear = '" + CommonHelper.ReturnYear+ "' and Fld_FileStatus='Total' " +
                                "   ) as adv_adj  on tempheader.Month_Name= adv_adj.Fld_Month " +
                                "   ) as result group by Quarter_Name ";
            #endregion


            #endregion


            DataTable dt = new DataTable();
            DataRow dr = null;
            //dt = MC.GetValueindatatable(monthQuery3B + " union all " + monthlyQuery1);

            string strQuerter = "";
            if (CommonHelper.SelectedMonth == "June") strQuerter = "Quarter-1";
            if (CommonHelper.SelectedMonth == "September") strQuerter = "Quarter-2";
            if (CommonHelper.SelectedMonth == "December") strQuerter = "Quarter-3";
            if (CommonHelper.SelectedMonth == "March") strQuerter = "Quarter-4";

            if (CommonHelper.IsQuarter == true)
            {
                
                dt = objGSTR1A.GetDataGSTR1A(QuarterQuery3B + " union all " + QuarterQuery1);
                DataRow[] d1r = dt.Select("Month_Name='" + strQuerter + "'");
                dt = d1r.CopyToDataTable();

            }

            else dt = objGSTR1A.GetDataGSTR1A(monthQuery3B + " union all " + monthlyQuery1);
            if (dt.Rows.Count == 2)
            {
                dr = dt.NewRow();
                dt.Rows[0][0] = "GSTR-3B";
                dt.Rows[1][0] = "GSTR-1";
                dr[0] = "Difference";


                foreach (DataGridViewColumn column in grdGSTR1vsGSTR3B.Columns)
                {
                    column.DataPropertyName = dt.Columns[column.Index].ColumnName;

                    if (column.Index > 0)
                    {
                        dr[column.Index] = Convert.ToDecimal(dt.Rows[0][column.Index]) - Convert.ToDecimal(dt.Rows[1][column.Index]);
                        column.DefaultCellStyle.NullValue = "0.00";
                        column.ValueType = typeof(double);
                        column.DefaultCellStyle.Format = String.Format("N2");
                        column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    }
                    column.SortMode = DataGridViewColumnSortMode.NotSortable;
                }
                dt.Rows.Add(dr);
                dt.AcceptChanges();
                //if (grdGSTR1vsGSTR3B.Columns.Count > 0) grdGSTR1vsGSTR3B.Columns.Clear();
                //grdGSTR1vsGSTR3B.DataSource = new DataTable();
                grdGSTR1vsGSTR3B.DataSource = dt;
            }


            HeaderRowColSpanClass spn = new HeaderRowColSpanClass();
            spn.HeaderColRowSpan_New(
                grdGSTR1vsGSTR3B, 
                new string[3] { "Supply", "GST On Taxable Supply", "IGST on Export" },
                new int[3] { 1, 6, 10 },
                new int[3] { 5, 4, 2 },
                new Color[3] { Color.Black, Color.WhiteSmoke, Color.Black }, new Color[3] { Color.DarkOrange, Color.Green, Color.SkyBlue });

            //  grdGSTR1vsGSTR3B.Width = grdGSTR1vsGSTR3B.Columns.Cast<DataGridViewColumn>().Sum(x => x.Width) + (grdGSTR1vsGSTR3B.RowHeadersVisible ? grdGSTR1vsGSTR3B.RowHeadersWidth : 0) + 22;
            //  grdGSTR1.Location = new Point(
            //this.pnlGrid.Width / 2 - grdGSTR1vsGSTR3B.Size.Width / 2,
            //grdGSTR1.Location.Y);
            //  grdGSTR1.Anchor = AnchorStyles.None;

            grdGSTR1vsGSTR3B.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            grdGSTR1vsGSTR3B.Rows[2].DefaultCellStyle.Font = new Font("Verdana", 7, FontStyle.Bold);
            grdGSTR1vsGSTR3B.Rows[2].DefaultCellStyle.BackColor = Color.LightGray;
            



        }

        private void btnImport_Click(object sender, EventArgs e)
        {
            SPQGSTR1ImportDialoge dlg = new SPQGSTR1ImportDialoge();
            var result = dlg.ShowDialog();
            if (result != DialogResult.OK)
            {
                //MessageBox.Show(dlg.Gstr1ImportType + "   ::   \r\n" + dlg.Gstr1ImportFilePath);
                string filepath = Convert.ToString(dlg.Gstr1ImportFilePath);
                if (dlg.Gstr1ImportType == "SOFT")
                {
                    msImpExcel_Click(null, null);
                }
                if (dlg.Gstr1ImportType == "TALLY")
                {
                    msImpTally_Click(null, null);
                }
                if (dlg.Gstr1ImportType == "GSTIN")
                {
                    msImpGSTNutility_Click(null, null);
                }
                if (dlg.Gstr1ImportType == "JSON")
                {
                    msImpJson_Click(null, null);
                }

            }
        }

        private void grdGSTR1vsGSTR3B_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

    }
}
